{"db":[{"meta":{"exported_on":1578866451264,"version":"1.26.2"},"data":{"app_fields":[],"app_settings":[],"apps":[],"brute":[{"key":"q+lFJKac++oJDNOXqWKfk4umXzXwpIHui2ivnZYuEkc=","firstRequest":1578866349172,"lastRequest":1578866349172,"lifetime":1578869949181,"count":1}],"invites":[],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"1.8"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"1.8"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"1.8"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"1.8"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"1.8"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"1.8"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"1.9"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"1.14"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"1.14"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"1.18"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"1.19"},{"id":12,"name":"1-remove-settings-keys.js","version":"1.20","currentVersion":"1.20"},{"id":13,"name":"1-add-contributor-role.js","version":"1.21","currentVersion":"1.21"},{"id":14,"name":"1-multiple-authors-DDL.js","version":"1.22","currentVersion":"1.22"},{"id":15,"name":"1-multiple-authors-DML.js","version":"1.22","currentVersion":"1.22"},{"id":16,"name":"1-update-koenig-beta-html.js","version":"1.25","currentVersion":"1.25"},{"id":17,"name":"2-demo-post.js","version":"1.25","currentVersion":"1.25"}],"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2018-07-25T14:56:42.000Z","released_at":"2018-07-25T14:56:43.000Z"}],"permissions":[{"id":"59ba7e680e5e5d0019f7b391","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b392","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b393","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b394","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b395","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b396","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b397","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b398","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b399","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b39a","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b39b","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b39c","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b39d","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b39e","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b39f","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a0","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a1","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a2","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a3","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a4","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a5","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a6","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a7","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a8","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3a9","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3aa","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3ab","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3ac","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3ad","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3ae","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3af","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b0","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b1","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b2","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b3","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b4","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b5","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b6","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b3b7","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3b8","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3b9","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3ba","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3bb","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3bc","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3bd","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3be","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3bf","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3c0","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ba7e690e5e5d0019f7b3c1","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2017-09-14T13:04:41.000Z","created_by":"1","updated_at":"2017-09-14T13:04:41.000Z","updated_by":"1"},{"id":"59ca830edbe80700190b3cfe","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2017-09-26T16:40:46.000Z","created_by":"1","updated_at":"2017-09-26T16:40:46.000Z","updated_by":"1"},{"id":"59ca830edbe80700190b3cff","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2017-09-26T16:40:46.000Z","created_by":"1","updated_at":"2017-09-26T16:40:46.000Z","updated_by":"1"},{"id":"5a31485c12f9d70023807e69","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2017-12-13T15:33:48.000Z","created_by":"1","updated_at":"2017-12-13T15:33:48.000Z","updated_by":"1"},{"id":"5a31485c12f9d70023807e6a","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2017-12-13T15:33:48.000Z","created_by":"1","updated_at":"2017-12-13T15:33:48.000Z","updated_by":"1"}],"permissions_apps":[],"permissions_roles":[{"id":"59ba7e690e5e5d0019f7b3c3","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b391"},{"id":"59ba7e690e5e5d0019f7b3c4","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b392"},{"id":"59ba7e690e5e5d0019f7b3c5","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b393"},{"id":"59ba7e690e5e5d0019f7b3c6","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b394"},{"id":"59ba7e690e5e5d0019f7b3c7","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b395"},{"id":"59ba7e690e5e5d0019f7b3c8","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b396"},{"id":"59ba7e690e5e5d0019f7b3c9","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b397"},{"id":"59ba7e690e5e5d0019f7b3ca","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b398"},{"id":"59ba7e690e5e5d0019f7b3cb","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b399"},{"id":"59ba7e690e5e5d0019f7b3cc","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b39a"},{"id":"59ba7e690e5e5d0019f7b3cd","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b39b"},{"id":"59ba7e690e5e5d0019f7b3ce","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b39c"},{"id":"59ba7e690e5e5d0019f7b3cf","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b39d"},{"id":"59ba7e690e5e5d0019f7b3d0","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b39e"},{"id":"59ba7e690e5e5d0019f7b3d1","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b39f"},{"id":"59ba7e690e5e5d0019f7b3d2","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a0"},{"id":"59ba7e690e5e5d0019f7b3d3","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a1"},{"id":"59ba7e690e5e5d0019f7b3d4","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a2"},{"id":"59ba7e690e5e5d0019f7b3d5","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a3"},{"id":"59ba7e690e5e5d0019f7b3d6","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a4"},{"id":"59ba7e690e5e5d0019f7b3d7","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a5"},{"id":"59ba7e690e5e5d0019f7b3d8","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a6"},{"id":"59ba7e690e5e5d0019f7b3d9","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a7"},{"id":"59ba7e690e5e5d0019f7b3da","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a8"},{"id":"59ba7e690e5e5d0019f7b3db","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3a9"},{"id":"59ba7e690e5e5d0019f7b3dc","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3aa"},{"id":"59ba7e690e5e5d0019f7b3dd","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3ab"},{"id":"59ba7e6a0e5e5d0019f7b3de","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3ac"},{"id":"59ba7e6a0e5e5d0019f7b3df","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3ad"},{"id":"59ba7e6a0e5e5d0019f7b3e0","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3ae"},{"id":"59ba7e6a0e5e5d0019f7b3e1","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3af"},{"id":"59ba7e6a0e5e5d0019f7b3e2","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b0"},{"id":"59ba7e6a0e5e5d0019f7b3e3","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b1"},{"id":"59ba7e6a0e5e5d0019f7b3e4","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b2"},{"id":"59ba7e6a0e5e5d0019f7b3e5","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b3"},{"id":"59ba7e6a0e5e5d0019f7b3e6","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b4"},{"id":"59ba7e6a0e5e5d0019f7b3e7","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b5"},{"id":"59ba7e6a0e5e5d0019f7b3e8","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b6"},{"id":"59ba7e6a0e5e5d0019f7b3e9","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e680e5e5d0019f7b3b7"},{"id":"59ba7e6a0e5e5d0019f7b3ea","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3b8"},{"id":"59ba7e6a0e5e5d0019f7b3eb","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3b9"},{"id":"59ba7e6a0e5e5d0019f7b3ec","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3ba"},{"id":"59ba7e6a0e5e5d0019f7b3ed","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3bb"},{"id":"59ba7e6a0e5e5d0019f7b3ee","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3bc"},{"id":"59ba7e6a0e5e5d0019f7b3ef","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3bd"},{"id":"59ba7e6a0e5e5d0019f7b3f0","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3be"},{"id":"59ba7e6a0e5e5d0019f7b3f1","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3bf"},{"id":"59ba7e6a0e5e5d0019f7b3f2","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3c0"},{"id":"59ba7e6a0e5e5d0019f7b3f3","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ba7e690e5e5d0019f7b3c1"},{"id":"59ba7e6a0e5e5d0019f7b3f4","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b398"},{"id":"59ba7e6a0e5e5d0019f7b3f5","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b399"},{"id":"59ba7e6a0e5e5d0019f7b3f6","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b39a"},{"id":"59ba7e6a0e5e5d0019f7b3f7","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b39b"},{"id":"59ba7e6a0e5e5d0019f7b3f8","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b39c"},{"id":"59ba7e6a0e5e5d0019f7b3f9","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b39d"},{"id":"59ba7e6a0e5e5d0019f7b3fa","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b39e"},{"id":"59ba7e6a0e5e5d0019f7b3fb","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a0"},{"id":"59ba7e6a0e5e5d0019f7b3fc","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a1"},{"id":"59ba7e6a0e5e5d0019f7b3fd","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a2"},{"id":"59ba7e6a0e5e5d0019f7b3fe","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a3"},{"id":"59ba7e6a0e5e5d0019f7b3ff","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a4"},{"id":"59ba7e6a0e5e5d0019f7b400","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a5"},{"id":"59ba7e6a0e5e5d0019f7b401","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3ac"},{"id":"59ba7e6a0e5e5d0019f7b402","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3ad"},{"id":"59ba7e6a0e5e5d0019f7b403","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3ae"},{"id":"59ba7e6a0e5e5d0019f7b404","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3af"},{"id":"59ba7e6a0e5e5d0019f7b405","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b0"},{"id":"59ba7e6a0e5e5d0019f7b406","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b1"},{"id":"59ba7e6a0e5e5d0019f7b407","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b2"},{"id":"59ba7e6a0e5e5d0019f7b408","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b3"},{"id":"59ba7e6a0e5e5d0019f7b409","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b4"},{"id":"59ba7e6a0e5e5d0019f7b40a","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b5"},{"id":"59ba7e6a0e5e5d0019f7b40b","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b6"},{"id":"59ba7e6a0e5e5d0019f7b40c","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3b7"},{"id":"59ba7e6a0e5e5d0019f7b40d","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e690e5e5d0019f7b3bb"},{"id":"59ba7e6a0e5e5d0019f7b40e","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e690e5e5d0019f7b3bd"},{"id":"59ba7e6a0e5e5d0019f7b40f","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e690e5e5d0019f7b3be"},{"id":"59ba7e6a0e5e5d0019f7b410","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e690e5e5d0019f7b3bf"},{"id":"59ba7e6a0e5e5d0019f7b411","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e690e5e5d0019f7b3c0"},{"id":"59ba7e6a0e5e5d0019f7b412","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e690e5e5d0019f7b3c1"},{"id":"59ba7e6a0e5e5d0019f7b413","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b398"},{"id":"59ba7e6a0e5e5d0019f7b414","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b399"},{"id":"59ba7e6a0e5e5d0019f7b415","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b39b"},{"id":"59ba7e6a0e5e5d0019f7b416","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b39d"},{"id":"59ba7e6a0e5e5d0019f7b417","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b39e"},{"id":"59ba7e6a0e5e5d0019f7b418","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3a0"},{"id":"59ba7e6a0e5e5d0019f7b419","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3a1"},{"id":"59ba7e6a0e5e5d0019f7b41a","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3a2"},{"id":"59ba7e6a0e5e5d0019f7b41b","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3a4"},{"id":"59ba7e6a0e5e5d0019f7b41c","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3ac"},{"id":"59ba7e6a0e5e5d0019f7b41d","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3ad"},{"id":"59ba7e6a0e5e5d0019f7b41e","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3b2"},{"id":"59ba7e6a0e5e5d0019f7b41f","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3b3"},{"id":"59ba7e6a0e5e5d0019f7b420","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3b4"},{"id":"59ba7e6a0e5e5d0019f7b421","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3b5"},{"id":"59ba7e6a0e5e5d0019f7b422","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3b6"},{"id":"59ba7e6a0e5e5d0019f7b423","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3b7"},{"id":"59ba7e6a0e5e5d0019f7b424","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e690e5e5d0019f7b3bb"},{"id":"59ca830edbe80700190b3d00","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ca830edbe80700190b3cfe"},{"id":"59ca830edbe80700190b3d01","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"59ca830edbe80700190b3cff"},{"id":"59e4c99e6e08770024887f18","role_id":"59ba7e680e5e5d0019f7b38e","permission_id":"59ba7e680e5e5d0019f7b3a6"},{"id":"59e4c99e6e08770024887f19","role_id":"59ba7e680e5e5d0019f7b38f","permission_id":"59ba7e680e5e5d0019f7b3a6"},{"id":"5a31485c12f9d70023807e6b","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"5a31485c12f9d70023807e69"},{"id":"5a31485c12f9d70023807e6c","role_id":"59ba7e680e5e5d0019f7b38d","permission_id":"5a31485c12f9d70023807e6a"},{"id":"5a7b50c4702bdc001860f7b2","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b398"},{"id":"5a7b50c4702bdc001860f7b3","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b399"},{"id":"5a7b50c4702bdc001860f7b4","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b39b"},{"id":"5a7b50c4702bdc001860f7b5","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b39d"},{"id":"5a7b50c4702bdc001860f7b6","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b39e"},{"id":"5a7b50c4702bdc001860f7b7","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3a0"},{"id":"5a7b50c4702bdc001860f7b8","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3a1"},{"id":"5a7b50c4702bdc001860f7b9","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3a2"},{"id":"5a7b50c4702bdc001860f7ba","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3ac"},{"id":"5a7b50c4702bdc001860f7bb","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3ad"},{"id":"5a7b50c4702bdc001860f7bc","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3b2"},{"id":"5a7b50c4702bdc001860f7bd","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3b3"},{"id":"5a7b50c4702bdc001860f7be","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3b4"},{"id":"5a7b50c4702bdc001860f7bf","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3b5"},{"id":"5a7b50c4702bdc001860f7c0","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3b6"},{"id":"5a7b50c4702bdc001860f7c1","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3b7"},{"id":"5a7b50c4702bdc001860f7c2","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e690e5e5d0019f7b3bb"},{"id":"5a7b50c4702bdc001860f7c3","role_id":"5a7b50c4702bdc001860f7b1","permission_id":"59ba7e680e5e5d0019f7b3a6"}],"permissions_users":[],"posts":[{"id":"59ba7e6b0e5e5d0019f7b47f","uuid":"3edd74cd-ef14-4f90-8cf3-2673cfdb1eac","title":"F# Functions: Tuple Syntax","slug":"f-functions-tuple-syntax","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I’m relatively new to F# and functional programming and recently worked through an issue that had me perplexed.  The issue was with creating functions with the “tuple syntax” versus the normal syntax of separating arguments by spaces.\\r\\n\\r\\nConsider the simple functions below that adds numeric arguments together.  They are constructed in two ways.  The first is by using a tuple to group the two arguments together.  It looks very similar to the syntax from other languages such as C#.  In the second declaration, the arguments are separated by spaces.\\r\\n<pre style=\\\"font-family: consolas; background: white; color: black; font-size: 13px;\\\"><span style=\\\"color: green;\\\">// The arguments are grouped using a tuple.</span>\\r\\n<span style=\\\"color: blue;\\\">let</span> add1(x, y) = x + y\\r\\n\\r\\n<span style=\\\"color: green;\\\">// The arguments are listed separately.</span>\\r\\n<span style=\\\"color: blue;\\\">let</span> add2 x y = x + y</pre>\\r\\nI initially thought that the signatures of the two functions were the same:  <em>int -&gt; int –&gt; int</em>; however that isn’t the case.  The signature for the first is:  <em>int * int –&gt; int</em> with a tuple being passed as the single argument.  So the tuple syntax is more than just another way of doing the same thing.  A tuple is actually created, and it’s arguments are passed to the function body.  I discovered this by trying to interchange the two styles when calling the methods.  This left me scratching my head trying to figure out where the syntax problem was.\\r\\n\\r\\nThe snippet below from the F# Interactive Window shows an attempt to call the add1 function without using the tuple syntax. Notice the error message.\\r\\n<pre style=\\\"font-family: consolas; background: white; color: black; font-size: 13px;\\\">&gt; let add1(x, y) = x + y;;\\r\\n\\r\\nval add1 : int * int -&gt; int\\r\\n\\r\\n&gt; add1 3 4;;\\r\\n  add1 3 4;;\\r\\n  ^^^^^^\\r\\n\\r\\nstdin(2,1): error FS0003: This value is not a function and cannot be applied</pre>\\r\\nUsing the tuple syntax, no error is thrown, and the expected result is returned.  You can even create a tuple value using the let binding and pass it in.\\r\\n<pre style=\\\"font-family: consolas; background: white; color: black; font-size: 13px;\\\">&gt; add1(3, 4);; \\r\\nval it : int = 7\\r\\n&gt; let args = (3, 4);;\\r\\n\\r\\nval args : int * int = (3, 4)\\r\\n\\r\\n&gt; add1 args;; \\r\\nval it : int = 7</pre>\\r\\nConversely, when the function is declared without the tuple syntax, its calling sites cannot use the tuple syntax.\\r\\n<pre style=\\\"font-family: consolas; background: white; color: black; font-size: 13px;\\\">&gt; let add2 x y = x + y;;\\r\\n\\r\\nval add2 : int -&gt; int -&gt; int\\r\\n\\r\\n&gt; add2(3, 4);;\\r\\n  add2(3, 4);;\\r\\n  -----^^^^\\r\\n\\r\\nstdin(5,6): error FS0001: This expression was expected to have type\\r\\n    int\\r\\nbut here has type\\r\\n    'a * 'b\\r\\n&gt; add2 3 4;; \\r\\n\\r\\nval it : int = 7</pre>\\r\\nBecause the tuple syntax resembles how you would create a method in C#, I thought it was simply another way of declaring a function with multiple arguments, but that’s not the case.  It creates a function with a single argument, a tuple, which has multiple values.\\r\\n\\r\\nWhich way is preferred?  Well, that depends on the situation.  If the two arguments are related in some way, then grouping them as a tuple makes sense.  If they are unrelated, then the space delimited syntax would be better so callers could take advantage of partial function application and other functional language features.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I’m relatively new to F# and functional programming and recently worked through an issue that had me perplexed.  The issue was with creating functions with the “tuple syntax” versus the normal syntax of separating arguments by spaces.</p>\n<p>Consider the simple functions below that adds numeric arguments together.  They are constructed in two ways.  The first is by using a tuple to group the two arguments together.  It looks very similar to the syntax from other languages such as C#.  In the second declaration, the arguments are separated by spaces.</p>\n<pre style=\"font-family: consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: green;\">// The arguments are grouped using a tuple.</span>\n<span style=\"color: blue;\">let</span> add1(x, y) = x + y\n\n<span style=\"color: green;\">// The arguments are listed separately.</span>\n<span style=\"color: blue;\">let</span> add2 x y = x + y</pre>\n<p>I initially thought that the signatures of the two functions were the same:  <em>int -&gt; int –&gt; int</em>; however that isn’t the case.  The signature for the first is:  <em>int * int –&gt; int</em> with a tuple being passed as the single argument.  So the tuple syntax is more than just another way of doing the same thing.  A tuple is actually created, and it’s arguments are passed to the function body.  I discovered this by trying to interchange the two styles when calling the methods.  This left me scratching my head trying to figure out where the syntax problem was.</p>\n<p>The snippet below from the F# Interactive Window shows an attempt to call the add1 function without using the tuple syntax. Notice the error message.</p>\n<pre style=\"font-family: consolas; background: white; color: black; font-size: 13px;\">&gt; let add1(x, y) = x + y;;\n\nval add1 : int * int -&gt; int\n\n&gt; add1 3 4;;\n  add1 3 4;;\n  ^^^^^^\n\nstdin(2,1): error FS0003: This value is not a function and cannot be applied</pre>\n<p>Using the tuple syntax, no error is thrown, and the expected result is returned.  You can even create a tuple value using the let binding and pass it in.</p>\n<pre style=\"font-family: consolas; background: white; color: black; font-size: 13px;\">&gt; add1(3, 4);; \nval it : int = 7\n&gt; let args = (3, 4);;\n\nval args : int * int = (3, 4)\n\n&gt; add1 args;; \nval it : int = 7</pre>\n<p>Conversely, when the function is declared without the tuple syntax, its calling sites cannot use the tuple syntax.</p>\n<pre style=\"font-family: consolas; background: white; color: black; font-size: 13px;\">&gt; let add2 x y = x + y;;\n\nval add2 : int -&gt; int -&gt; int\n\n&gt; add2(3, 4);;\n  add2(3, 4);;\n  -----^^^^\n\nstdin(5,6): error FS0001: This expression was expected to have type\n    int\nbut here has type\n    'a * 'b\n&gt; add2 3 4;; \n\nval it : int = 7</pre>\n<p>Because the tuple syntax resembles how you would create a method in C#, I thought it was simply another way of declaring a function with multiple arguments, but that’s not the case.  It creates a function with a single argument, a tuple, which has multiple values.</p>\n<p>Which way is preferred?  Well, that depends on the situation.  If the two arguments are related in some way, then grouping them as a tuple makes sense.  If they are unrelated, then the space delimited syntax would be better so callers could take advantage of partial function application and other functional language features.</p>\n</div>","amp":"4","plaintext":"I’m relatively new to F# and functional programming and recently worked through\nan issue that had me perplexed.  The issue was with creating functions with the\n“tuple syntax” versus the normal syntax of separating arguments by spaces.\n\nConsider the simple functions below that adds numeric arguments together.  They\nare constructed in two ways.  The first is by using a tuple to group the two\narguments together.  It looks very similar to the syntax from other languages\nsuch as C#.  In the second declaration, the arguments are separated by spaces.\n\n// The arguments are grouped using a tuple.\nlet add1(x, y) = x + y\n\n// The arguments are listed separately.\nlet add2 x y = x + y\n\nI initially thought that the signatures of the two functions were the same:  int\n-> int –> int; however that isn’t the case.  The signature for the first is:  \nint * int –> int  with a tuple being passed as the single argument.  So the\ntuple syntax is more than just another way of doing the same thing.  A tuple is\nactually created, and it’s arguments are passed to the function body.  I\ndiscovered this by trying to interchange the two styles when calling the\nmethods.  This left me scratching my head trying to figure out where the syntax\nproblem was.\n\nThe snippet below from the F# Interactive Window shows an attempt to call the\nadd1 function without using the tuple syntax. Notice the error message.\n\n> let add1(x, y) = x + y;;\n\nval add1 : int * int -> int\n\n> add1 3 4;;\n  add1 3 4;;\n  ^^^^^^\n\nstdin(2,1): error FS0003: This value is not a function and cannot be applied\n\nUsing the tuple syntax, no error is thrown, and the expected result is\nreturned.  You can even create a tuple value using the let binding and pass it\nin.\n\n> add1(3, 4);; \nval it : int = 7\n> let args = (3, 4);;\n\nval args : int * int = (3, 4)\n\n> add1 args;; \nval it : int = 7\n\nConversely, when the function is declared without the tuple syntax, its calling\nsites cannot use the tuple syntax.\n\n> let add2 x y = x + y;;\n\nval add2 : int -> int -> int\n\n> add2(3, 4);;\n  add2(3, 4);;\n  -----^^^^\n\nstdin(5,6): error FS0001: This expression was expected to have type\n    int\nbut here has type\n    'a * 'b\n> add2 3 4;; \n\nval it : int = 7\n\nBecause the tuple syntax resembles how you would create a method in C#, I\nthought it was simply another way of declaring a function with multiple\narguments, but that’s not the case.  It creates a function with a single\nargument, a tuple, which has multiple values.\n\nWhich way is preferred?  Well, that depends on the situation.  If the two\narguments are related in some way, then grouping them as a tuple makes sense. \nIf they are unrelated, then the space delimited syntax would be better so\ncallers could take advantage of partial function application and other\nfunctional language features.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2011-07-18T19:35:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b480","uuid":"0a0109cd-e88e-4936-a19e-e7f18127dd56","title":"My First Blog Post","slug":"my-first-blog-post","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've always told myself that I needed to start blogging and get my thoughts out there. Well, after years of putting it off, I finally got started. I decided to write about what I love (besides my family of course): writing software using .NET. I'll start out focusing on C# and F# language features. I'm proficient in C# but just starting out with F#. Functional programming is very different from what I'm used to; however, I'm liking it more and more.\\n\\nWell, we'll see how this goes...\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I've always told myself that I needed to start blogging and get my thoughts out there. Well, after years of putting it off, I finally got started. I decided to write about what I love (besides my family of course): writing software using .NET. I'll start out focusing on C# and F# language features. I'm proficient in C# but just starting out with F#. Functional programming is very different from what I'm used to; however, I'm liking it more and more.</p>\n<p>Well, we'll see how this goes...</p>\n</div>","amp":"5","plaintext":"I've always told myself that I needed to start blogging and get my thoughts out\nthere. Well, after years of putting it off, I finally got started. I decided to\nwrite about what I love (besides my family of course): writing software using\n.NET. I'll start out focusing on C# and F# language features. I'm proficient in\nC# but just starting out with F#. Functional programming is very different from\nwhat I'm used to; however, I'm liking it more and more.\n\nWell, we'll see how this goes...","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2011-07-16T14:08:34.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b481","uuid":"be0d66c3-c1a1-4f6d-8238-79a5c1681478","title":"The Best Design Patterns","slug":"the-best-design-patterns","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The first time I read the Gang of Four Design Patterns book, I was impressed, no blown away, by the brilliance of what I was reading.  The Visitor pattern utilizing double-dispatch.  Brilliant.  Chain of Responsibility.  Why didn't I think of that?  Adapter.  Simple and powerful.\\n\\nOf course I was itching to start implementing these patterns.  In practice though they seemed to be applicable only in rare situations.  Adapter, Builder, Factory, Strategy, were the most useful.  The more exotic patterns rarely popped up, and when they did, they were misapplied or misused.  For example, I've seen visitors used when double-dispatch wasn't necessary, and a simple iterator would have worked nicely.\\n\\nNow that I have 10+ years of experience, I've come up with a list of 3 patterns (best practices really) that are crucial to any software project and trump any fancy pattern-based design.\\n<h3>Encapsulation</h3>\\nThis is more of a best practice than a design pattern; however, I'm surprised at how many times data isn't properly protected.  I prefer to initialize fields as read-only, if possible, just in case it is accidentally exposed.  There are also subtle ways of exposing internal references.  For example, in C# you could expose a private <em>List&lt;T&gt;</em> field using only a public getter, but the list can still be manipulated outside of the class.  Instead, the list could be exposed as a read-only collection or as <em>IEnumerable&lt;T&gt;</em>.*\\n<h3>Request-Response Messages</h3>\\nI don't know of any formal name for this pattern, so I'm not sure what to call it.  Essentially, it is designing classes whose methods take a single input or request object and return a single output or response object.  There is no internal state at all.  The data that each method needs is passed in with the request.  This style is used frequently with service-based architectures like WCF; however, I like using it with any internal class.  Without any side effects, the method is easy to understand and unit test.\\n<h3>Unit Tests!!</h3>\\nIn my experience, most developers don't write unit tests with each code change or even a majority of code changes.  I will often comment out lines of critical business logic at work and run the unit tests to determine if there is any coverage.  Often they all pass.  I view unit tests as documentation of how the system should behave.  Proper coverage enables developers to refactor code with confidence; otherwise, they are more tentative, and the code base degrades over time.\\n\\nDesign patterns don't impress me like they used to, but I appreciate them.  Still, I would take a system of static classes with static methods that is thoroughly unit tested over a system that is built with design patterns and lacks unit tests.\\n\\n&nbsp;\\n\\n&nbsp;\\n\\n&nbsp;\\n\\n\\\\* Technically consumers of your class could cast the reference to a <em>List&lt;T&gt;</em> at which point they deserve what they get.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The first time I read the Gang of Four Design Patterns book, I was impressed, no blown away, by the brilliance of what I was reading.  The Visitor pattern utilizing double-dispatch.  Brilliant.  Chain of Responsibility.  Why didn't I think of that?  Adapter.  Simple and powerful.</p>\n<p>Of course I was itching to start implementing these patterns.  In practice though they seemed to be applicable only in rare situations.  Adapter, Builder, Factory, Strategy, were the most useful.  The more exotic patterns rarely popped up, and when they did, they were misapplied or misused.  For example, I've seen visitors used when double-dispatch wasn't necessary, and a simple iterator would have worked nicely.</p>\n<p>Now that I have 10+ years of experience, I've come up with a list of 3 patterns (best practices really) that are crucial to any software project and trump any fancy pattern-based design.</p>\n<h3>Encapsulation</h3>\nThis is more of a best practice than a design pattern; however, I'm surprised at how many times data isn't properly protected.  I prefer to initialize fields as read-only, if possible, just in case it is accidentally exposed.  There are also subtle ways of exposing internal references.  For example, in C# you could expose a private <em>List&lt;T&gt;</em> field using only a public getter, but the list can still be manipulated outside of the class.  Instead, the list could be exposed as a read-only collection or as <em>IEnumerable&lt;T&gt;</em>.*\n<h3>Request-Response Messages</h3>\nI don't know of any formal name for this pattern, so I'm not sure what to call it.  Essentially, it is designing classes whose methods take a single input or request object and return a single output or response object.  There is no internal state at all.  The data that each method needs is passed in with the request.  This style is used frequently with service-based architectures like WCF; however, I like using it with any internal class.  Without any side effects, the method is easy to understand and unit test.\n<h3>Unit Tests!!</h3>\nIn my experience, most developers don't write unit tests with each code change or even a majority of code changes.  I will often comment out lines of critical business logic at work and run the unit tests to determine if there is any coverage.  Often they all pass.  I view unit tests as documentation of how the system should behave.  Proper coverage enables developers to refactor code with confidence; otherwise, they are more tentative, and the code base degrades over time.\n<p>Design patterns don't impress me like they used to, but I appreciate them.  Still, I would take a system of static classes with static methods that is thoroughly unit tested over a system that is built with design patterns and lacks unit tests.</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p>* Technically consumers of your class could cast the reference to a <em>List&lt;T&gt;</em> at which point they deserve what they get.</p>\n</div>","amp":"6","plaintext":"The first time I read the Gang of Four Design Patterns book, I was impressed, no\nblown away, by the brilliance of what I was reading.  The Visitor pattern\nutilizing double-dispatch.  Brilliant.  Chain of Responsibility.  Why didn't I\nthink of that?  Adapter.  Simple and powerful.\n\nOf course I was itching to start implementing these patterns.  In practice\nthough they seemed to be applicable only in rare situations.  Adapter, Builder,\nFactory, Strategy, were the most useful.  The more exotic patterns rarely popped\nup, and when they did, they were misapplied or misused.  For example, I've seen\nvisitors used when double-dispatch wasn't necessary, and a simple iterator would\nhave worked nicely.\n\nNow that I have 10+ years of experience, I've come up with a list of 3 patterns\n(best practices really) that are crucial to any software project and trump any\nfancy pattern-based design.\n\nEncapsulation\nThis is more of a best practice than a design pattern; however, I'm surprised at\nhow many times data isn't properly protected.  I prefer to initialize fields as\nread-only, if possible, just in case it is accidentally exposed.  There are also\nsubtle ways of exposing internal references.  For example, in C# you could\nexpose a private List<T>  field using only a public getter, but the list can\nstill be manipulated outside of the class.  Instead, the list could be exposed\nas a read-only collection or as IEnumerable<T>.*Request-Response Messages\nI don't know of any formal name for this pattern, so I'm not sure what to call\nit.  Essentially, it is designing classes whose methods take a single input or\nrequest object and return a single output or response object.  There is no\ninternal state at all.  The data that each method needs is passed in with the\nrequest.  This style is used frequently with service-based architectures like\nWCF; however, I like using it with any internal class.  Without any side\neffects, the method is easy to understand and unit test.Unit Tests!!\nIn my experience, most developers don't write unit tests with each code change\nor even a majority of code changes.  I will often comment out lines of critical\nbusiness logic at work and run the unit tests to determine if there is any\ncoverage.  Often they all pass.  I view unit tests as documentation of how the\nsystem should behave.  Proper coverage enables developers to refactor code with\nconfidence; otherwise, they are more tentative, and the code base degrades over\ntime.Design patterns don't impress me like they used to, but I appreciate them. \nStill, I would take a system of static classes with static methods that is\nthoroughly unit tested over a system that is built with design patterns and\nlacks unit tests.\n\n\n\n\n\n\n\n* Technically consumers of your class could cast the reference to a List<T>  at\nwhich point they deserve what they get.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-26T01:37:06.000Z","updated_by":"1","published_at":"2012-01-30T20:38:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b482","uuid":"af8783e5-1d97-4b72-ae1e-1139793b2bb5","title":"Ditch the Grids and Use DockPanels","slug":"why-arent-dock-panels-used-more","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<p>I have worked extensively with WinForms and WPF/Silverlight and noticed that docking/dock panels are not used that often.&#160; At least this is the case where I work.&#160; I find this surprising given their power and ease of use.</p>  <p>Using XAML, why would a programmer choose a complex Grid/StackPanel setup over a DockPanel?&#160; Or on the WinForms side, set the anchor properties for control rather than simplify things with the dock property?&#160; I see this stuff all the time.&#160; Perhaps it's a lack of knowledge.&#160; Maybe there is a performance penalty that I don't know about.</p>  <p>There are a couple of quirks with docking that confused me at first.&#160; In WinForms, when setting a control's Dock property to Fill, it may appear behind the other controls on the form rather than filling the remaining space.&#160; The fix is to right-click the control in the designer and choose &quot;Bring to Front&quot;.&#160; It will resize to fill the remaining space as one would expect.</p>  <p>In WPF/Silverlight, there is no Dock property.&#160; Instead the DockPanel control performs the same function.&#160; Child controls of the DockPanel set the attached Dock property to dock themselves.&#160; The values may be Left, Right, Top, and Bottom, but there is no Fill value.&#160; Instead the last child control in the XAML is assumed to be the fill control even if it sets a value explicitly.&#160; Or the fill panel can be turned off by adding <em>LastChildFill = &quot;False&quot;</em> on the DockPanel.&#160; This can be a little strange especially coming from WinForms.</p>  <p>These are the only two oddities I've come across; otherwise I have not seen any obvious performance or functionality issues.&#160; In my experience, docking works beautifully and is my preferred method for layout.</p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I have worked extensively with WinForms and WPF/Silverlight and noticed that docking/dock panels are not used that often.&#160; At least this is the case where I work.&#160; I find this surprising given their power and ease of use.</p>  <p>Using XAML, why would a programmer choose a complex Grid/StackPanel setup over a DockPanel?&#160; Or on the WinForms side, set the anchor properties for control rather than simplify things with the dock property?&#160; I see this stuff all the time.&#160; Perhaps it's a lack of knowledge.&#160; Maybe there is a performance penalty that I don't know about.</p>  <p>There are a couple of quirks with docking that confused me at first.&#160; In WinForms, when setting a control's Dock property to Fill, it may appear behind the other controls on the form rather than filling the remaining space.&#160; The fix is to right-click the control in the designer and choose &quot;Bring to Front&quot;.&#160; It will resize to fill the remaining space as one would expect.</p>  <p>In WPF/Silverlight, there is no Dock property.&#160; Instead the DockPanel control performs the same function.&#160; Child controls of the DockPanel set the attached Dock property to dock themselves.&#160; The values may be Left, Right, Top, and Bottom, but there is no Fill value.&#160; Instead the last child control in the XAML is assumed to be the fill control even if it sets a value explicitly.&#160; Or the fill panel can be turned off by adding <em>LastChildFill = &quot;False&quot;</em> on the DockPanel.&#160; This can be a little strange especially coming from WinForms.</p>  <p>These are the only two oddities I've come across; otherwise I have not seen any obvious performance or functionality issues.&#160; In my experience, docking works beautifully and is my preferred method for layout.</p></div>","amp":"7","plaintext":"I have worked extensively with WinForms and WPF/Silverlight and noticed that\ndocking/dock panels are not used that often.  At least this is the case where I\nwork.  I find this surprising given their power and ease of use.\n\nUsing XAML, why would a programmer choose a complex Grid/StackPanel setup over a\nDockPanel?  Or on the WinForms side, set the anchor properties for control\nrather than simplify things with the dock property?  I see this stuff all the\ntime.  Perhaps it's a lack of knowledge.  Maybe there is a performance penalty\nthat I don't know about.\n\nThere are a couple of quirks with docking that confused me at first.  In\nWinForms, when setting a control's Dock property to Fill, it may appear behind\nthe other controls on the form rather than filling the remaining space.  The fix\nis to right-click the control in the designer and choose \"Bring to Front\".  It\nwill resize to fill the remaining space as one would expect.\n\nIn WPF/Silverlight, there is no Dock property.  Instead the DockPanel control\nperforms the same function.  Child controls of the DockPanel set the attached\nDock property to dock themselves.  The values may be Left, Right, Top, and\nBottom, but there is no Fill value.  Instead the last child control in the XAML\nis assumed to be the fill control even if it sets a value explicitly.  Or the\nfill panel can be turned off by adding LastChildFill = \"False\"  on the\nDockPanel.  This can be a little strange especially coming from WinForms.\n\nThese are the only two oddities I've come across; otherwise I have not seen any\nobvious performance or functionality issues.  In my experience, docking works\nbeautifully and is my preferred method for layout.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2012-03-12T19:58:25.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b483","uuid":"3c0c800c-e75b-4cda-8cea-292588e9b185","title":"Singleton Access from a Container","slug":"singleton-access-from-a-container","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I learned a cool programming technique this week from a co-worker <a href=\\\"http://blog.kellybrownsberger.com/\\\" target=\\\"_blank\\\">Kelly Brownsberger</a> to enable container access to a singleton.  Say you have an interface IApplicationSettings exposed as a static singleton property, but you want to inject it into other classes via a container.  The trick is to create another class that implements IApplicationSettings and grabs a reference to the singleton in the constructor.  Each implementation of an interface member simply delegates the call to the corresponding member of the singleton reference.  Now you have a class that can be registered with the container and gets its values from the singleton.\\r\\n<pre class=\\\"csharpcode\\\">    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">interface</span> IApplicationSettings\\r\\n    {\\r\\n        <span class=\\\"kwrd\\\">bool</span> AutoRefresh { get; }\\r\\n        <span class=\\\"kwrd\\\">bool</span> DisplayShoppingCart { get; }\\r\\n    }\\r\\n\\r\\n    <span class=\\\"rem\\\">/// &lt;summary&gt;</span>\\r\\n    <span class=\\\"rem\\\">/// Singleton implementation of IApplicationSettings.</span>\\r\\n    <span class=\\\"rem\\\">/// &lt;/summary&gt;</span>\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> ApplicationSettings : IApplicationSettings\\r\\n    {\\r\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">static</span> IApplicationSettings _current;\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">static</span> IApplicationSettings Current\\r\\n        {\\r\\n            get\\r\\n            {\\r\\n                <span class=\\\"kwrd\\\">if</span> (_current == <span class=\\\"kwrd\\\">null</span>)\\r\\n                    _current = ReadSettings();\\r\\n\\r\\n                <span class=\\\"kwrd\\\">return</span> _current;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">static</span> IApplicationSettings ReadSettings()\\r\\n        {\\r\\n            <span class=\\\"rem\\\">// Settings would actually come from a config file or DB.</span>\\r\\n            <span class=\\\"kwrd\\\">return</span> <span class=\\\"kwrd\\\">new</span> ApplicationSettings(<span class=\\\"kwrd\\\">true</span>, <span class=\\\"kwrd\\\">true</span>);\\r\\n        }\\r\\n\\r\\n        <span class=\\\"kwrd\\\">private</span> ApplicationSettings(<span class=\\\"kwrd\\\">bool</span> autoRefresh, <span class=\\\"kwrd\\\">bool</span> displayShoppingcart)\\r\\n        {\\r\\n            AutoRefresh = autoRefresh;\\r\\n            DisplayShoppingCart = displayShoppingcart;\\r\\n        }\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> AutoRefresh { get; <span class=\\\"kwrd\\\">private</span> set; }\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> DisplayShoppingCart { get; <span class=\\\"kwrd\\\">private</span> set; }\\r\\n    }\\r\\n\\r\\n    <span class=\\\"rem\\\">/// &lt;summary&gt;</span>\\r\\n    <span class=\\\"rem\\\">/// Container-friendly or injectable instance of IApplicationSettings.</span>\\r\\n    <span class=\\\"rem\\\">/// Delegates to the singleton.</span>\\r\\n    <span class=\\\"rem\\\">/// &lt;/summary&gt;</span>\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> ApplicationSettingsInstance : IApplicationSettings\\r\\n    {\\r\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">readonly</span> IApplicationSettings _instance;\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> ApplicationSettingsInstance()\\r\\n        {\\r\\n            _instance = ApplicationSettings.Current;\\r\\n        }\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> AutoRefresh\\r\\n        {\\r\\n            get { <span class=\\\"kwrd\\\">return</span> _instance.AutoRefresh; }\\r\\n        }\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> DisplayShoppingCart\\r\\n        {\\r\\n            get { <span class=\\\"kwrd\\\">return</span> _instance.DisplayShoppingCart; }\\r\\n        }\\r\\n    }</pre>\\r\\nThis is a useful technique, but I don't like the way each implementation of an interface member in the ApplicationSettingsInstance class has to delegate to the private instance field.  I've always thought it would be nice if C# had a feature where you could specify that a particular interface is implemented by a private member.  Then the C# compiler could automatically fill in the interface implementation with calls to the private member.  The syntax could look something like the example below.  The _instance field implements the interface, and the interface members go away.\\r\\n<pre class=\\\"csharpcode\\\">    <span class=\\\"rem\\\">/// &lt;summary&gt;</span>\\r\\n    <span class=\\\"rem\\\">/// Container-friendly or injectable instance of IApplicationSettings.</span>\\r\\n    <span class=\\\"rem\\\">/// Delegates to the singleton.</span>\\r\\n    <span class=\\\"rem\\\">/// &lt;/summary&gt;</span>\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> ApplicationSettingsInstance : IApplicationSettings\\r\\n    {\\r\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">readonly</span> IApplicationSettings _instance\\r\\n            <span class=\\\"kwrd\\\">handles</span> IApplicationSettings;\\r\\n\\r\\n        <span class=\\\"kwrd\\\">public</span> ApplicationSettingsInstance()\\r\\n        {\\r\\n            _instance = ApplicationSettings.Current;\\r\\n        }\\r\\n    }</pre>\\r\\nI'm not sure if any other languages have a feature like this.  It seems like it would be fairly simple to implement.  In the meantime, I'm adding it to my fantasy feature list.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I learned a cool programming technique this week from a co-worker <a href=\"http://blog.kellybrownsberger.com/\" target=\"_blank\">Kelly Brownsberger</a> to enable container access to a singleton.  Say you have an interface IApplicationSettings exposed as a static singleton property, but you want to inject it into other classes via a container.  The trick is to create another class that implements IApplicationSettings and grabs a reference to the singleton in the constructor.  Each implementation of an interface member simply delegates the call to the corresponding member of the singleton reference.  Now you have a class that can be registered with the container and gets its values from the singleton.</p>\n<pre class=\"csharpcode\">    <span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> IApplicationSettings\n    {\n        <span class=\"kwrd\">bool</span> AutoRefresh { get; }\n        <span class=\"kwrd\">bool</span> DisplayShoppingCart { get; }\n    }\n\n    <span class=\"rem\">/// &lt;summary&gt;</span>\n    <span class=\"rem\">/// Singleton implementation of IApplicationSettings.</span>\n    <span class=\"rem\">/// &lt;/summary&gt;</span>\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> ApplicationSettings : IApplicationSettings\n    {\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> IApplicationSettings _current;\n\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> IApplicationSettings Current\n        {\n            get\n            {\n                <span class=\"kwrd\">if</span> (_current == <span class=\"kwrd\">null</span>)\n                    _current = ReadSettings();\n\n                <span class=\"kwrd\">return</span> _current;\n            }\n        }\n\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> IApplicationSettings ReadSettings()\n        {\n            <span class=\"rem\">// Settings would actually come from a config file or DB.</span>\n            <span class=\"kwrd\">return</span> <span class=\"kwrd\">new</span> ApplicationSettings(<span class=\"kwrd\">true</span>, <span class=\"kwrd\">true</span>);\n        }\n\n        <span class=\"kwrd\">private</span> ApplicationSettings(<span class=\"kwrd\">bool</span> autoRefresh, <span class=\"kwrd\">bool</span> displayShoppingcart)\n        {\n            AutoRefresh = autoRefresh;\n            DisplayShoppingCart = displayShoppingcart;\n        }\n\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> AutoRefresh { get; <span class=\"kwrd\">private</span> set; }\n\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> DisplayShoppingCart { get; <span class=\"kwrd\">private</span> set; }\n    }\n\n    <span class=\"rem\">/// &lt;summary&gt;</span>\n    <span class=\"rem\">/// Container-friendly or injectable instance of IApplicationSettings.</span>\n    <span class=\"rem\">/// Delegates to the singleton.</span>\n    <span class=\"rem\">/// &lt;/summary&gt;</span>\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> ApplicationSettingsInstance : IApplicationSettings\n    {\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> IApplicationSettings _instance;\n\n        <span class=\"kwrd\">public</span> ApplicationSettingsInstance()\n        {\n            _instance = ApplicationSettings.Current;\n        }\n\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> AutoRefresh\n        {\n            get { <span class=\"kwrd\">return</span> _instance.AutoRefresh; }\n        }\n\n        <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> DisplayShoppingCart\n        {\n            get { <span class=\"kwrd\">return</span> _instance.DisplayShoppingCart; }\n        }\n    }</pre>\n<p>This is a useful technique, but I don't like the way each implementation of an interface member in the ApplicationSettingsInstance class has to delegate to the private instance field.  I've always thought it would be nice if C# had a feature where you could specify that a particular interface is implemented by a private member.  Then the C# compiler could automatically fill in the interface implementation with calls to the private member.  The syntax could look something like the example below.  The _instance field implements the interface, and the interface members go away.</p>\n<pre class=\"csharpcode\">    <span class=\"rem\">/// &lt;summary&gt;</span>\n    <span class=\"rem\">/// Container-friendly or injectable instance of IApplicationSettings.</span>\n    <span class=\"rem\">/// Delegates to the singleton.</span>\n    <span class=\"rem\">/// &lt;/summary&gt;</span>\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> ApplicationSettingsInstance : IApplicationSettings\n    {\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> IApplicationSettings _instance\n            <span class=\"kwrd\">handles</span> IApplicationSettings;\n\n        <span class=\"kwrd\">public</span> ApplicationSettingsInstance()\n        {\n            _instance = ApplicationSettings.Current;\n        }\n    }</pre>\n<p>I'm not sure if any other languages have a feature like this.  It seems like it would be fairly simple to implement.  In the meantime, I'm adding it to my fantasy feature list.</p>\n</div>","amp":"8","plaintext":"I learned a cool programming technique this week from a co-worker Kelly\nBrownsberger [http://blog.kellybrownsberger.com/]  to enable container access to\na singleton.  Say you have an interface IApplicationSettings exposed as a static\nsingleton property, but you want to inject it into other classes via a\ncontainer.  The trick is to create another class that implements\nIApplicationSettings and grabs a reference to the singleton in the constructor. \nEach implementation of an interface member simply delegates the call to the\ncorresponding member of the singleton reference.  Now you have a class that can\nbe registered with the container and gets its values from the singleton.\n\n    public interface IApplicationSettings\n    {\n        bool AutoRefresh { get; }\n        bool DisplayShoppingCart { get; }\n    }\n\n    /// <summary>\n    /// Singleton implementation of IApplicationSettings.\n    /// </summary>\n    public class ApplicationSettings : IApplicationSettings\n    {\n        private static IApplicationSettings _current;\n\n        public static IApplicationSettings Current\n        {\n            get\n            {\n                if (_current == null)\n                    _current = ReadSettings();\n\n                return _current;\n            }\n        }\n\n        private static IApplicationSettings ReadSettings()\n        {\n            // Settings would actually come from a config file or DB.\n            return new ApplicationSettings(true, true);\n        }\n\n        private ApplicationSettings(bool autoRefresh, bool displayShoppingcart)\n        {\n            AutoRefresh = autoRefresh;\n            DisplayShoppingCart = displayShoppingcart;\n        }\n\n        public bool AutoRefresh { get; private set; }\n\n        public bool DisplayShoppingCart { get; private set; }\n    }\n\n    /// <summary>\n    /// Container-friendly or injectable instance of IApplicationSettings.\n    /// Delegates to the singleton.\n    /// </summary>\n    public class ApplicationSettingsInstance : IApplicationSettings\n    {\n        private readonly IApplicationSettings _instance;\n\n        public ApplicationSettingsInstance()\n        {\n            _instance = ApplicationSettings.Current;\n        }\n\n        public bool AutoRefresh\n        {\n            get { return _instance.AutoRefresh; }\n        }\n\n        public bool DisplayShoppingCart\n        {\n            get { return _instance.DisplayShoppingCart; }\n        }\n    }\n\nThis is a useful technique, but I don't like the way each implementation of an\ninterface member in the ApplicationSettingsInstance class has to delegate to the\nprivate instance field.  I've always thought it would be nice if C# had a\nfeature where you could specify that a particular interface is implemented by a\nprivate member.  Then the C# compiler could automatically fill in the interface\nimplementation with calls to the private member.  The syntax could look\nsomething like the example below.  The _instance field implements the interface,\nand the interface members go away.\n\n    /// <summary>\n    /// Container-friendly or injectable instance of IApplicationSettings.\n    /// Delegates to the singleton.\n    /// </summary>\n    public class ApplicationSettingsInstance : IApplicationSettings\n    {\n        private readonly IApplicationSettings _instance\n            handles IApplicationSettings;\n\n        public ApplicationSettingsInstance()\n        {\n            _instance = ApplicationSettings.Current;\n        }\n    }\n\nI'm not sure if any other languages have a feature like this.  It seems like it\nwould be fairly simple to implement.  In the meantime, I'm adding it to my\nfantasy feature list.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2012-12-01T23:20:49.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b484","uuid":"e08c5777-e926-4b96-b6b8-adbf1b4c7633","title":"The Dangers of Mutable Data","slug":"the-dangers-of-mutable-data","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently came across a bug in some C# code that would never have been a problem if the data structures being used were immutable.  The data consisted of a .NET dictionary with an integer key and a list as a value.  The details below have been changed to protect the guilty.\\r\\n\\r\\nThe offending method takes customer and product objects as parameters and retrieves a list of available pricing for the customer from a dictionary using the product ID as the key.  Once the list is obtained, any pricing items the customer does not qualify for are removed and the list is returned.\\r\\n<pre class=\\\"code\\\"><span style=\\\"color: blue;\\\">private readonly </span><span style=\\\"color: #2b91af;\\\">Dictionary</span>&lt;<span style=\\\"color: blue;\\\">int</span>, <span style=\\\"color: #2b91af;\\\">List</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt;&gt; _map =\\r\\n    <span style=\\\"color: blue;\\\">new </span><span style=\\\"color: #2b91af;\\\">Dictionary</span>&lt;<span style=\\\"color: blue;\\\">int</span>, <span style=\\\"color: #2b91af;\\\">List</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt;&gt;();\\r\\n<span style=\\\"color: blue;\\\">private readonly </span><span style=\\\"color: #2b91af;\\\">PricingQualificationStrategy </span>_strategy =\\r\\n    <span style=\\\"color: blue;\\\">new </span><span style=\\\"color: #2b91af;\\\">PricingQualificationStrategy</span>();\\r\\n\\r\\n<span style=\\\"color: blue;\\\">private </span><span style=\\\"color: #2b91af;\\\">List</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt; GetAvailablePricing(\\r\\n    <span style=\\\"color: #2b91af;\\\">Customer </span>customer, <span style=\\\"color: #2b91af;\\\">Product </span>product)\\r\\n{\\r\\n    <span style=\\\"color: blue;\\\">int </span>productId = product.ProductId;\\r\\n\\r\\n    <span style=\\\"color: blue;\\\">if </span>(_map.ContainsKey(productId))\\r\\n    {\\r\\n        <span style=\\\"color: #2b91af;\\\">List</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt; potentialPricing = _map[productId];\\r\\n        potentialPricing.RemoveAll(p =&gt; !_strategy.IsQualified(p, customer));\\r\\n        <span style=\\\"color: blue;\\\">return </span>potentialPricing;\\r\\n    }\\r\\n\\r\\n    <span style=\\\"color: blue;\\\">return new </span><span style=\\\"color: #2b91af;\\\">List</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt;();\\r\\n}</pre>\\r\\nThe issue is with the line that removes all unqualified pricing.  Items are removed from the list referenced by the dictionary, not a copy, so subsequent calls to the method do not have access to the complete list.  If, by chance, a customer is not qualified for any pricing, then the list will be empty.  From that point on, the method will always return an empty list for the product regardless of customer qualification.\\r\\n<pre class=\\\"code\\\">potentialPricing.RemoveAll(p =&gt; !_strategy.IsQualified(p, customer));</pre>\\r\\nIt is a subtle bug.  When originally coded, the programmer most likely assumed the dictionary was returning a copy of the list.  What makes it even worse is the method returns a reference to the mutable list which can be further changed by the caller.\\r\\n\\r\\nInstead of storing a mutable list in the dictionary, values of type <span style=\\\"color: #2b91af;\\\">IEnumerable</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt; can be used.  It will achieve the desired result, returning a list of pricing items, without introducing the possibility of the list changing unexpectedly.  In addition, the <span style=\\\"color: #2b91af;\\\">Enumerable</span>.Where() extension method in the System.Linq namespace can be used to return a read-only enumeration with only the qualified items.  The returned enumeration is a copy, and the original is unaffected.\\r\\n\\r\\nThe updated code is below.\\r\\n<pre class=\\\"code\\\"><span style=\\\"color: blue;\\\">private readonly </span><span style=\\\"color: #2b91af;\\\">Dictionary</span>&lt;<span style=\\\"color: blue;\\\">int</span>, <span style=\\\"color: #2b91af;\\\">IEnumerable</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt;&gt; _map =\\r\\n    <span style=\\\"color: blue;\\\">new </span><span style=\\\"color: #2b91af;\\\">Dictionary</span>&lt;<span style=\\\"color: blue;\\\">int</span>, <span style=\\\"color: #2b91af;\\\">IEnumerable</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt;&gt;();\\r\\n<span style=\\\"color: blue;\\\">private readonly </span><span style=\\\"color: #2b91af;\\\">PricingQualificationStrategy </span>_strategy =\\r\\n    <span style=\\\"color: blue;\\\">new </span><span style=\\\"color: #2b91af;\\\">PricingQualificationStrategy</span>();\\r\\n\\r\\n<span style=\\\"color: blue;\\\">private </span><span style=\\\"color: #2b91af;\\\">IEnumerable</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt; GetAvailablePricing(\\r\\n    <span style=\\\"color: #2b91af;\\\">Customer </span>customer, <span style=\\\"color: #2b91af;\\\">Product </span>product)\\r\\n{\\r\\n    <span style=\\\"color: blue;\\\">int </span>productId = product.ProductId;\\r\\n\\r\\n    <span style=\\\"color: blue;\\\">if </span>(_map.ContainsKey(productId))\\r\\n    {\\r\\n        <span style=\\\"color: blue;\\\">var </span>potentialPricing = _map[productId];\\r\\n        <span style=\\\"color: blue;\\\">return </span>potentialPricing.Where(p =&gt; !_strategy.IsQualified(p, customer));\\r\\n    }\\r\\n\\r\\n    <span style=\\\"color: blue;\\\">return new </span><span style=\\\"color: #2b91af;\\\">List</span>&lt;<span style=\\\"color: #2b91af;\\\">IPricing</span>&gt;();\\r\\n}</pre>\\r\\nThis is a simple yet instructive example of the hidden dangers of mutable data.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I recently came across a bug in some C# code that would never have been a problem if the data structures being used were immutable.  The data consisted of a .NET dictionary with an integer key and a list as a value.  The details below have been changed to protect the guilty.</p>\n<p>The offending method takes customer and product objects as parameters and retrieves a list of available pricing for the customer from a dictionary using the product ID as the key.  Once the list is obtained, any pricing items the customer does not qualify for are removed and the list is returned.</p>\n<pre class=\"code\"><span style=\"color: blue;\">private readonly </span><span style=\"color: #2b91af;\">Dictionary</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: #2b91af;\">List</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt;&gt; _map =\n    <span style=\"color: blue;\">new </span><span style=\"color: #2b91af;\">Dictionary</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: #2b91af;\">List</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt;&gt;();\n<span style=\"color: blue;\">private readonly </span><span style=\"color: #2b91af;\">PricingQualificationStrategy </span>_strategy =\n    <span style=\"color: blue;\">new </span><span style=\"color: #2b91af;\">PricingQualificationStrategy</span>();\n\n<span style=\"color: blue;\">private </span><span style=\"color: #2b91af;\">List</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt; GetAvailablePricing(\n    <span style=\"color: #2b91af;\">Customer </span>customer, <span style=\"color: #2b91af;\">Product </span>product)\n{\n    <span style=\"color: blue;\">int </span>productId = product.ProductId;\n\n    <span style=\"color: blue;\">if </span>(_map.ContainsKey(productId))\n    {\n        <span style=\"color: #2b91af;\">List</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt; potentialPricing = _map[productId];\n        potentialPricing.RemoveAll(p =&gt; !_strategy.IsQualified(p, customer));\n        <span style=\"color: blue;\">return </span>potentialPricing;\n    }\n\n    <span style=\"color: blue;\">return new </span><span style=\"color: #2b91af;\">List</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt;();\n}</pre>\n<p>The issue is with the line that removes all unqualified pricing.  Items are removed from the list referenced by the dictionary, not a copy, so subsequent calls to the method do not have access to the complete list.  If, by chance, a customer is not qualified for any pricing, then the list will be empty.  From that point on, the method will always return an empty list for the product regardless of customer qualification.</p>\n<pre class=\"code\">potentialPricing.RemoveAll(p =&gt; !_strategy.IsQualified(p, customer));</pre>\n<p>It is a subtle bug.  When originally coded, the programmer most likely assumed the dictionary was returning a copy of the list.  What makes it even worse is the method returns a reference to the mutable list which can be further changed by the caller.</p>\n<p>Instead of storing a mutable list in the dictionary, values of type <span style=\"color: #2b91af;\">IEnumerable</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt; can be used.  It will achieve the desired result, returning a list of pricing items, without introducing the possibility of the list changing unexpectedly.  In addition, the <span style=\"color: #2b91af;\">Enumerable</span>.Where() extension method in the System.Linq namespace can be used to return a read-only enumeration with only the qualified items.  The returned enumeration is a copy, and the original is unaffected.</p>\n<p>The updated code is below.</p>\n<pre class=\"code\"><span style=\"color: blue;\">private readonly </span><span style=\"color: #2b91af;\">Dictionary</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: #2b91af;\">IEnumerable</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt;&gt; _map =\n    <span style=\"color: blue;\">new </span><span style=\"color: #2b91af;\">Dictionary</span>&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: #2b91af;\">IEnumerable</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt;&gt;();\n<span style=\"color: blue;\">private readonly </span><span style=\"color: #2b91af;\">PricingQualificationStrategy </span>_strategy =\n    <span style=\"color: blue;\">new </span><span style=\"color: #2b91af;\">PricingQualificationStrategy</span>();\n\n<span style=\"color: blue;\">private </span><span style=\"color: #2b91af;\">IEnumerable</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt; GetAvailablePricing(\n    <span style=\"color: #2b91af;\">Customer </span>customer, <span style=\"color: #2b91af;\">Product </span>product)\n{\n    <span style=\"color: blue;\">int </span>productId = product.ProductId;\n\n    <span style=\"color: blue;\">if </span>(_map.ContainsKey(productId))\n    {\n        <span style=\"color: blue;\">var </span>potentialPricing = _map[productId];\n        <span style=\"color: blue;\">return </span>potentialPricing.Where(p =&gt; !_strategy.IsQualified(p, customer));\n    }\n\n    <span style=\"color: blue;\">return new </span><span style=\"color: #2b91af;\">List</span>&lt;<span style=\"color: #2b91af;\">IPricing</span>&gt;();\n}</pre>\n<p>This is a simple yet instructive example of the hidden dangers of mutable data.</p>\n</div>","amp":"9","plaintext":"I recently came across a bug in some C# code that would never have been a\nproblem if the data structures being used were immutable.  The data consisted of\na .NET dictionary with an integer key and a list as a value.  The details below\nhave been changed to protect the guilty.\n\nThe offending method takes customer and product objects as parameters and\nretrieves a list of available pricing for the customer from a dictionary using\nthe product ID as the key.  Once the list is obtained, any pricing items the\ncustomer does not qualify for are removed and the list is returned.\n\nprivate readonly Dictionary<int, List<IPricing>> _map =\n    new Dictionary<int, List<IPricing>>();\nprivate readonly PricingQualificationStrategy _strategy =\n    new PricingQualificationStrategy();\n\nprivate List<IPricing> GetAvailablePricing(\n    Customer customer, Product product)\n{\n    int productId = product.ProductId;\n\n    if (_map.ContainsKey(productId))\n    {\n        List<IPricing> potentialPricing = _map[productId];\n        potentialPricing.RemoveAll(p => !_strategy.IsQualified(p, customer));\n        return potentialPricing;\n    }\n\n    return new List<IPricing>();\n}\n\nThe issue is with the line that removes all unqualified pricing.  Items are\nremoved from the list referenced by the dictionary, not a copy, so subsequent\ncalls to the method do not have access to the complete list.  If, by chance, a\ncustomer is not qualified for any pricing, then the list will be empty.  From\nthat point on, the method will always return an empty list for the product\nregardless of customer qualification.\n\npotentialPricing.RemoveAll(p => !_strategy.IsQualified(p, customer));\n\nIt is a subtle bug.  When originally coded, the programmer most likely assumed\nthe dictionary was returning a copy of the list.  What makes it even worse is\nthe method returns a reference to the mutable list which can be further changed\nby the caller.\n\nInstead of storing a mutable list in the dictionary, values of type IEnumerable<\nIPricing> can be used.  It will achieve the desired result, returning a list of\npricing items, without introducing the possibility of the list changing\nunexpectedly.  In addition, the Enumerable.Where() extension method in the\nSystem.Linq namespace can be used to return a read-only enumeration with only\nthe qualified items.  The returned enumeration is a copy, and the original is\nunaffected.\n\nThe updated code is below.\n\nprivate readonly Dictionary<int, IEnumerable<IPricing>> _map =\n    new Dictionary<int, IEnumerable<IPricing>>();\nprivate readonly PricingQualificationStrategy _strategy =\n    new PricingQualificationStrategy();\n\nprivate IEnumerable<IPricing> GetAvailablePricing(\n    Customer customer, Product product)\n{\n    int productId = product.ProductId;\n\n    if (_map.ContainsKey(productId))\n    {\n        var potentialPricing = _map[productId];\n        return potentialPricing.Where(p => !_strategy.IsQualified(p, customer));\n    }\n\n    return new List<IPricing>();\n}\n\nThis is a simple yet instructive example of the hidden dangers of mutable data.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2011-08-15T20:06:17.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b485","uuid":"7a0b3cd3-0e77-402b-860f-e5ee66b93846","title":"Creating a Crawl Control in WPF","slug":"creating-a-crawl-control-in-wpf","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<p>A few weeks ago I was watching CNN when an interesting blurb scrolled by on the crawl at the bottom of the screen.&nbsp; Normally, the crawl is not something I notice, but I thought to myself, “I wonder if I can implement one in WPF.”&nbsp; I had never done any animations before in WPF, and this seemed like a good way to start.</p> <p>So I gave it a shot.</p> <p>My initial instinct was to bring up Google and see if anyone else had done it.&nbsp; I stopped myself because this was a good learning opportunity.&nbsp; A chance to put my nascent XAML skills to the test.&nbsp; Afterward I could research the topic and see what I did or did not do right.</p> <p>My first challenge was to come up with a good visual layout that would enable the basic scrolling animation.&nbsp; I needed a panel of some type and a control to hold the scrolling text.&nbsp; The text would come from a bindable list so naturally an ItemsControl was the best choice.&nbsp; It would form the banner that would scroll across the screen.</p> <p>The panel was a little tougher.&nbsp; In WinForms, I would update the Left property to increasingly negative values to scroll it to the left; however, WPF framework elements do not have a Left property.&nbsp; WPF’s control layout resembles HTML more than WinForms.&nbsp; Enter the Canvas control.&nbsp; It enables child elements to be positioned using coordinates, and I could animate the Canvas.Left attached property to scroll the banner.</p> <p>The complete control template is listed below.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">&lt;</span><span style=\\\"color: #a31515\\\">ControlTemplate </span><span style=\\\"color: red\\\">TargetType</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">x</span><span style=\\\"color: blue\\\">:</span><span style=\\\"color: #a31515\\\">Type </span><span style=\\\"color: red\\\">Controls</span><span style=\\\"color: blue\\\">:</span><span style=\\\"color: red\\\">CrawlList</span><span style=\\\"color: blue\\\">}\\\"&gt;\\n    &lt;</span><span style=\\\"color: #a31515\\\">Border </span><span style=\\\"color: red\\\">Background</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">TemplateBinding </span><span style=\\\"color: red\\\">Background</span><span style=\\\"color: blue\\\">}\\\"\\n            </span><span style=\\\"color: red\\\">BorderBrush</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">TemplateBinding </span><span style=\\\"color: red\\\">BorderBrush</span><span style=\\\"color: blue\\\">}\\\"\\n            </span><span style=\\\"color: red\\\">BorderThickness</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">TemplateBinding </span><span style=\\\"color: red\\\">BorderThickness</span><span style=\\\"color: blue\\\">}\\\"&gt;\\n\\n        </span><span style=\\\"color: green\\\">&lt;!-- Use a Canvas as the parent panel to take advantage of absolute\\n             positioning which makes the animation easier. --&gt;\\n        </span><span style=\\\"color: blue\\\">&lt;</span><span style=\\\"color: #a31515\\\">Canvas </span><span style=\\\"color: red\\\">x</span><span style=\\\"color: blue\\\">:</span><span style=\\\"color: red\\\">Name</span><span style=\\\"color: blue\\\">=\\\"crawlCanvas\\\" </span><span style=\\\"color: red\\\">VerticalAlignment</span><span style=\\\"color: blue\\\">=\\\"Stretch\\\"\\n                </span><span style=\\\"color: red\\\">HorizontalAlignment</span><span style=\\\"color: blue\\\">=\\\"Stretch\\\"&gt;\\n\\n            </span><span style=\\\"color: green\\\">&lt;!-- An ItemsControl forms the scrolling banner. --&gt;\\n            </span><span style=\\\"color: blue\\\">&lt;</span><span style=\\\"color: #a31515\\\">ItemsControl </span><span style=\\\"color: red\\\">x</span><span style=\\\"color: blue\\\">:</span><span style=\\\"color: red\\\">Name</span><span style=\\\"color: blue\\\">=\\\"crawlItems\\\"\\n                          </span><span style=\\\"color: red\\\">ItemsSource</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">TemplateBinding </span><span style=\\\"color: red\\\">ItemsSource</span><span style=\\\"color: blue\\\">}\\\"\\n                          </span><span style=\\\"color: red\\\">Canvas.Top</span><span style=\\\"color: blue\\\">=\\\"0\\\"\\n                          </span><span style=\\\"color: red\\\">Canvas.Left</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">TemplateBinding </span><span style=\\\"color: red\\\">Left</span><span style=\\\"color: blue\\\">}\\\"\\n                          </span><span style=\\\"color: red\\\">Canvas.Bottom</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">Binding </span><span style=\\\"color: red\\\">Width</span><span style=\\\"color: blue\\\">,\\n                                          </span><span style=\\\"color: red\\\">ElementName</span><span style=\\\"color: blue\\\">=crawlCanvas}\\\"\\n                          </span><span style=\\\"color: red\\\">Canvas.Right</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">Binding </span><span style=\\\"color: red\\\">Height</span><span style=\\\"color: blue\\\">,\\n                                         </span><span style=\\\"color: red\\\">ElementName</span><span style=\\\"color: blue\\\">=crawlCanvas}\\\"&gt;\\n\\n                </span><span style=\\\"color: green\\\">&lt;!-- The default item template is a simple text block.\\n                     It can be updated to a different template using\\n                     CrawlList.ItemTemplate.--&gt;\\n                </span><span style=\\\"color: blue\\\">&lt;</span><span style=\\\"color: #a31515\\\">ItemsControl.ItemTemplate</span><span style=\\\"color: blue\\\">&gt;\\n                    &lt;</span><span style=\\\"color: #a31515\\\">DataTemplate</span><span style=\\\"color: blue\\\">&gt;\\n                        &lt;</span><span style=\\\"color: #a31515\\\">TextBlock </span><span style=\\\"color: red\\\">Text</span><span style=\\\"color: blue\\\">=\\\"{</span><span style=\\\"color: #a31515\\\">Binding</span><span style=\\\"color: blue\\\">}\\\" /&gt;\\n                    &lt;/</span><span style=\\\"color: #a31515\\\">DataTemplate</span><span style=\\\"color: blue\\\">&gt;\\n                &lt;/</span><span style=\\\"color: #a31515\\\">ItemsControl.ItemTemplate</span><span style=\\\"color: blue\\\">&gt;\\n\\n                </span><span style=\\\"color: green\\\">&lt;!-- By default the ItemsPanel property contans a StackPanel\\n                     with a vertical orientation.  Replace it with a StackPanel\\n                     with a horizontal orientation. --&gt;\\n                </span><span style=\\\"color: blue\\\">&lt;</span><span style=\\\"color: #a31515\\\">ItemsControl.ItemsPanel</span><span style=\\\"color: blue\\\">&gt;\\n                    &lt;</span><span style=\\\"color: #a31515\\\">ItemsPanelTemplate</span><span style=\\\"color: blue\\\">&gt;\\n                        &lt;</span><span style=\\\"color: #a31515\\\">StackPanel </span><span style=\\\"color: red\\\">x</span><span style=\\\"color: blue\\\">:</span><span style=\\\"color: red\\\">Name</span><span style=\\\"color: blue\\\">=\\\"crawlItemsPanel\\\"\\n                                    </span><span style=\\\"color: red\\\">Orientation</span><span style=\\\"color: blue\\\">=\\\"Horizontal\\\" /&gt;\\n                    &lt;/</span><span style=\\\"color: #a31515\\\">ItemsPanelTemplate</span><span style=\\\"color: blue\\\">&gt;\\n                &lt;/</span><span style=\\\"color: #a31515\\\">ItemsControl.ItemsPanel</span><span style=\\\"color: blue\\\">&gt;\\n            &lt;/</span><span style=\\\"color: #a31515\\\">ItemsControl</span><span style=\\\"color: blue\\\">&gt;\\n        &lt;/</span><span style=\\\"color: #a31515\\\">Canvas</span><span style=\\\"color: blue\\\">&gt;\\n\\n    &lt;/</span><span style=\\\"color: #a31515\\\">Border</span><span style=\\\"color: blue\\\">&gt;\\n&lt;/</span><span style=\\\"color: #a31515\\\">ControlTemplate</span><span style=\\\"color: blue\\\">&gt;</span></pre>\\n<p>In the control’s template, the <em>Canvas.Left</em> attached property is bound to the CrawlControl’s <em>Left</em> dependency property.&nbsp; This was my workaround because I could not find a way to animate <em>Canvas.Left</em> directly.&nbsp; It seems like a hack.&nbsp; Perhaps there is a better way?</p>\\n<p>After hooking up the <em>Left</em> property, all I had to do was animate it with an instance of the <em>DoubleAnimation</em> class.&nbsp; There is also a <em>CrawlAnimation</em> dependency property for custom animations.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">private void </span>StartCrawlAnimation()\\n{\\n    <span style=\\\"color: blue\\\">if </span>((_banner != <span style=\\\"color: blue\\\">null</span>) &amp;&amp; (_banner.ActualWidth &gt; 0))\\n    {\\n        <span style=\\\"color: #2b91af\\\">DoubleAnimationBase </span>doubleAnimation =\\n            CrawlAnimation ?? BuildDefaultAnimation();\\n        BeginAnimation(LeftProperty, doubleAnimation);\\n    }\\n}\\n\\n<span style=\\\"color: blue\\\">private void </span>EndCrawlAnimation()\\n{\\n    BeginAnimation(LeftProperty, <span style=\\\"color: blue\\\">null</span>);\\n}\\n\\n<span style=\\\"color: blue\\\">private </span><span style=\\\"color: #2b91af\\\">DoubleAnimationBase </span>BuildDefaultAnimation()\\n{\\n    <span style=\\\"color: blue\\\">double </span>bannerWidth = _banner.ActualWidth;\\n    <span style=\\\"color: blue\\\">double </span>fromValue = _crawlCanvas.ActualWidth;\\n    <span style=\\\"color: blue\\\">double </span>toValue = -1 * bannerWidth;\\n    <span style=\\\"color: blue\\\">double </span>speed = CrawlSpeed;\\n\\n    <span style=\\\"color: #2b91af\\\">Duration </span>duration = <span style=\\\"color: blue\\\">new </span><span style=\\\"color: #2b91af\\\">Duration</span>(\\n        <span style=\\\"color: #2b91af\\\">TimeSpan</span>.FromSeconds(bannerWidth / speed));\\n\\n    <span style=\\\"color: blue\\\">return new </span><span style=\\\"color: #2b91af\\\">DoubleAnimation</span>(fromValue, toValue, duration)\\n        { RepeatBehavior = <span style=\\\"color: #2b91af\\\">RepeatBehavior</span>.Forever };\\n}</pre>\\n<p>So there it is.&nbsp; My first animation.&nbsp; I was surprised at how easy WPF makes animations.</p>\\n<p>You can download the <a href=\\\"https://github.com/joebuschmann/Buschmann.Windows\\\" target=\\\"_blank\\\">complete source code</a>.&nbsp; The code behind is in CrawlList.cs, and the template is in CrawlListStyle.xaml.&nbsp; To see it in action, run the solution, and from the main window, click the “Crawl List” button to bring up a simple testing view.</p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>A few weeks ago I was watching CNN when an interesting blurb scrolled by on the crawl at the bottom of the screen.&nbsp; Normally, the crawl is not something I notice, but I thought to myself, “I wonder if I can implement one in WPF.”&nbsp; I had never done any animations before in WPF, and this seemed like a good way to start.</p> <p>So I gave it a shot.</p> <p>My initial instinct was to bring up Google and see if anyone else had done it.&nbsp; I stopped myself because this was a good learning opportunity.&nbsp; A chance to put my nascent XAML skills to the test.&nbsp; Afterward I could research the topic and see what I did or did not do right.</p> <p>My first challenge was to come up with a good visual layout that would enable the basic scrolling animation.&nbsp; I needed a panel of some type and a control to hold the scrolling text.&nbsp; The text would come from a bindable list so naturally an ItemsControl was the best choice.&nbsp; It would form the banner that would scroll across the screen.</p> <p>The panel was a little tougher.&nbsp; In WinForms, I would update the Left property to increasingly negative values to scroll it to the left; however, WPF framework elements do not have a Left property.&nbsp; WPF’s control layout resembles HTML more than WinForms.&nbsp; Enter the Canvas control.&nbsp; It enables child elements to be positioned using coordinates, and I could animate the Canvas.Left attached property to scroll the banner.</p> <p>The complete control template is listed below.</p><pre class=\"code\"><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">ControlTemplate </span><span style=\"color: red\">TargetType</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">x</span><span style=\"color: blue\">:</span><span style=\"color: #a31515\">Type </span><span style=\"color: red\">Controls</span><span style=\"color: blue\">:</span><span style=\"color: red\">CrawlList</span><span style=\"color: blue\">}\"&gt;\n    &lt;</span><span style=\"color: #a31515\">Border </span><span style=\"color: red\">Background</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">TemplateBinding </span><span style=\"color: red\">Background</span><span style=\"color: blue\">}\"\n            </span><span style=\"color: red\">BorderBrush</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">TemplateBinding </span><span style=\"color: red\">BorderBrush</span><span style=\"color: blue\">}\"\n            </span><span style=\"color: red\">BorderThickness</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">TemplateBinding </span><span style=\"color: red\">BorderThickness</span><span style=\"color: blue\">}\"&gt;\n<pre><code>    &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;&amp;lt;!-- Use a Canvas as the parent panel to take advantage of absolute\n         positioning which makes the animation easier. --&amp;gt;\n    &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Canvas &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;crawlCanvas&quot; &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;VerticalAlignment&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Stretch&quot;\n            &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;HorizontalAlignment&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Stretch&quot;&amp;gt;\n\n        &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;&amp;lt;!-- An ItemsControl forms the scrolling banner. --&amp;gt;\n        &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsControl &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;crawlItems&quot;\n                      &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;ItemsSource&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;TemplateBinding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;ItemsSource&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}&quot;\n                      &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Canvas.Top&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;0&quot;\n                      &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Canvas.Left&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;TemplateBinding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Left&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}&quot;\n                      &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Canvas.Bottom&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Binding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Width&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;,\n                                      &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;ElementName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=crawlCanvas}&quot;\n                      &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Canvas.Right&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Binding &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Height&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;,\n                                     &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;ElementName&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=crawlCanvas}&quot;&amp;gt;\n\n            &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;&amp;lt;!-- The default item template is a simple text block.\n                 It can be updated to a different template using\n                 CrawlList.ItemTemplate.--&amp;gt;\n            &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsControl.ItemTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DataTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;TextBlock &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Text&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;{&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Binding&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;}&quot; /&amp;gt;\n                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;DataTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n            &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsControl.ItemTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n\n            &lt;/span&gt;&lt;span style=&quot;color: green&quot;&gt;&amp;lt;!-- By default the ItemsPanel property contans a StackPanel\n                 with a vertical orientation.  Replace it with a StackPanel\n                 with a horizontal orientation. --&amp;gt;\n            &lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n                &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n                    &amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;StackPanel &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Name&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;crawlItemsPanel&quot;\n                                &lt;/span&gt;&lt;span style=&quot;color: red&quot;&gt;Orientation&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;=&quot;Horizontal&quot; /&amp;gt;\n                &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsPanelTemplate&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n            &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsControl.ItemsPanel&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n        &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;ItemsControl&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n    &amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Canvas&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n\n&amp;lt;/&lt;/span&gt;&lt;span style=&quot;color: #a31515&quot;&gt;Border&lt;/span&gt;&lt;span style=&quot;color: blue&quot;&gt;&amp;gt;\n</code></pre>\n<p>&lt;/</span><span style=\"color: #a31515\">ControlTemplate</span><span style=\"color: blue\">&gt;</span></pre></p>\n<p>In the control’s template, the <em>Canvas.Left</em> attached property is bound to the CrawlControl’s <em>Left</em> dependency property.&nbsp; This was my workaround because I could not find a way to animate <em>Canvas.Left</em> directly.&nbsp; It seems like a hack.&nbsp; Perhaps there is a better way?</p>\n<p>After hooking up the <em>Left</em> property, all I had to do was animate it with an instance of the <em>DoubleAnimation</em> class.&nbsp; There is also a <em>CrawlAnimation</em> dependency property for custom animations.</p><pre class=\"code\"><span style=\"color: blue\">private void </span>StartCrawlAnimation()\n{\n    <span style=\"color: blue\">if </span>((_banner != <span style=\"color: blue\">null</span>) &amp;&amp; (_banner.ActualWidth &gt; 0))\n    {\n        <span style=\"color: #2b91af\">DoubleAnimationBase </span>doubleAnimation =\n            CrawlAnimation ?? BuildDefaultAnimation();\n        BeginAnimation(LeftProperty, doubleAnimation);\n    }\n}\n<p><span style=\"color: blue\">private void </span>EndCrawlAnimation()<br>\n{<br>\nBeginAnimation(LeftProperty, <span style=\"color: blue\">null</span>);<br>\n}</p>\n<p><span style=\"color: blue\">private </span><span style=\"color: #2b91af\">DoubleAnimationBase </span>BuildDefaultAnimation()<br>\n{<br>\n<span style=\"color: blue\">double </span>bannerWidth = _banner.ActualWidth;<br>\n<span style=\"color: blue\">double </span>fromValue = _crawlCanvas.ActualWidth;<br>\n<span style=\"color: blue\">double </span>toValue = -1 * bannerWidth;<br>\n<span style=\"color: blue\">double </span>speed = CrawlSpeed;</p>\n<pre><code>&lt;span style=&quot;color: #2b91af&quot;&gt;Duration &lt;/span&gt;duration = &lt;span style=&quot;color: blue&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;Duration&lt;/span&gt;(\n    &lt;span style=&quot;color: #2b91af&quot;&gt;TimeSpan&lt;/span&gt;.FromSeconds(bannerWidth / speed));\n\n&lt;span style=&quot;color: blue&quot;&gt;return new &lt;/span&gt;&lt;span style=&quot;color: #2b91af&quot;&gt;DoubleAnimation&lt;/span&gt;(fromValue, toValue, duration)\n    { RepeatBehavior = &lt;span style=&quot;color: #2b91af&quot;&gt;RepeatBehavior&lt;/span&gt;.Forever };\n</code></pre>\n<p>}</pre></p>\n<p>So there it is.&nbsp; My first animation.&nbsp; I was surprised at how easy WPF makes animations.</p>\n<p>You can download the <a href=\"https://github.com/joebuschmann/Buschmann.Windows\" target=\"_blank\">complete source code</a>.&nbsp; The code behind is in CrawlList.cs, and the template is in CrawlListStyle.xaml.&nbsp; To see it in action, run the solution, and from the main window, click the “Crawl List” button to bring up a simple testing view.</p></div>","amp":"10","plaintext":"A few weeks ago I was watching CNN when an interesting blurb scrolled by on the\ncrawl at the bottom of the screen.  Normally, the crawl is not something I\nnotice, but I thought to myself, “I wonder if I can implement one in WPF.”  I\nhad never done any animations before in WPF, and this seemed like a good way to\nstart.\n\nSo I gave it a shot.\n\nMy initial instinct was to bring up Google and see if anyone else had done it. \nI stopped myself because this was a good learning opportunity.  A chance to put\nmy nascent XAML skills to the test.  Afterward I could research the topic and\nsee what I did or did not do right.\n\nMy first challenge was to come up with a good visual layout that would enable\nthe basic scrolling animation.  I needed a panel of some type and a control to\nhold the scrolling text.  The text would come from a bindable list so naturally\nan ItemsControl was the best choice.  It would form the banner that would scroll\nacross the screen.\n\nThe panel was a little tougher.  In WinForms, I would update the Left property\nto increasingly negative values to scroll it to the left; however, WPF framework\nelements do not have a Left property.  WPF’s control layout resembles HTML more\nthan WinForms.  Enter the Canvas control.  It enables child elements to be\npositioned using coordinates, and I could animate the Canvas.Left attached\nproperty to scroll the banner.\n\nThe complete control template is listed below.\n\n<ControlTemplate TargetType=\"{x:Type Controls:CrawlList}\">\n    <Border Background=\"{TemplateBinding Background}\"\n            BorderBrush=\"{TemplateBinding BorderBrush}\"\n            BorderThickness=\"{TemplateBinding BorderThickness}\">\n    </span><span style=\"color: green\">&lt;!-- Use a Canvas as the parent panel to take advantage of absolute\n         positioning which makes the animation easier. --&gt;\n    </span><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">Canvas </span><span style=\"color: red\">x</span><span style=\"color: blue\">:</span><span style=\"color: red\">Name</span><span style=\"color: blue\">=\"crawlCanvas\" </span><span style=\"color: red\">VerticalAlignment</span><span style=\"color: blue\">=\"Stretch\"\n            </span><span style=\"color: red\">HorizontalAlignment</span><span style=\"color: blue\">=\"Stretch\"&gt;\n\n        </span><span style=\"color: green\">&lt;!-- An ItemsControl forms the scrolling banner. --&gt;\n        </span><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">ItemsControl </span><span style=\"color: red\">x</span><span style=\"color: blue\">:</span><span style=\"color: red\">Name</span><span style=\"color: blue\">=\"crawlItems\"\n                      </span><span style=\"color: red\">ItemsSource</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">TemplateBinding </span><span style=\"color: red\">ItemsSource</span><span style=\"color: blue\">}\"\n                      </span><span style=\"color: red\">Canvas.Top</span><span style=\"color: blue\">=\"0\"\n                      </span><span style=\"color: red\">Canvas.Left</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">TemplateBinding </span><span style=\"color: red\">Left</span><span style=\"color: blue\">}\"\n                      </span><span style=\"color: red\">Canvas.Bottom</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">Binding </span><span style=\"color: red\">Width</span><span style=\"color: blue\">,\n                                      </span><span style=\"color: red\">ElementName</span><span style=\"color: blue\">=crawlCanvas}\"\n                      </span><span style=\"color: red\">Canvas.Right</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">Binding </span><span style=\"color: red\">Height</span><span style=\"color: blue\">,\n                                     </span><span style=\"color: red\">ElementName</span><span style=\"color: blue\">=crawlCanvas}\"&gt;\n\n            </span><span style=\"color: green\">&lt;!-- The default item template is a simple text block.\n                 It can be updated to a different template using\n                 CrawlList.ItemTemplate.--&gt;\n            </span><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">ItemsControl.ItemTemplate</span><span style=\"color: blue\">&gt;\n                &lt;</span><span style=\"color: #a31515\">DataTemplate</span><span style=\"color: blue\">&gt;\n                    &lt;</span><span style=\"color: #a31515\">TextBlock </span><span style=\"color: red\">Text</span><span style=\"color: blue\">=\"{</span><span style=\"color: #a31515\">Binding</span><span style=\"color: blue\">}\" /&gt;\n                &lt;/</span><span style=\"color: #a31515\">DataTemplate</span><span style=\"color: blue\">&gt;\n            &lt;/</span><span style=\"color: #a31515\">ItemsControl.ItemTemplate</span><span style=\"color: blue\">&gt;\n\n            </span><span style=\"color: green\">&lt;!-- By default the ItemsPanel property contans a StackPanel\n                 with a vertical orientation.  Replace it with a StackPanel\n                 with a horizontal orientation. --&gt;\n            </span><span style=\"color: blue\">&lt;</span><span style=\"color: #a31515\">ItemsControl.ItemsPanel</span><span style=\"color: blue\">&gt;\n                &lt;</span><span style=\"color: #a31515\">ItemsPanelTemplate</span><span style=\"color: blue\">&gt;\n                    &lt;</span><span style=\"color: #a31515\">StackPanel </span><span style=\"color: red\">x</span><span style=\"color: blue\">:</span><span style=\"color: red\">Name</span><span style=\"color: blue\">=\"crawlItemsPanel\"\n                                </span><span style=\"color: red\">Orientation</span><span style=\"color: blue\">=\"Horizontal\" /&gt;\n                &lt;/</span><span style=\"color: #a31515\">ItemsPanelTemplate</span><span style=\"color: blue\">&gt;\n            &lt;/</span><span style=\"color: #a31515\">ItemsControl.ItemsPanel</span><span style=\"color: blue\">&gt;\n        &lt;/</span><span style=\"color: #a31515\">ItemsControl</span><span style=\"color: blue\">&gt;\n    &lt;/</span><span style=\"color: #a31515\">Canvas</span><span style=\"color: blue\">&gt;\n\n&lt;/</span><span style=\"color: #a31515\">Border</span><span style=\"color: blue\">&gt;\n\n\n\n</\n\nControlTemplate>\n\n\n\nIn the control’s template, the Canvas.Left  attached property is bound to the\nCrawlControl’s Left  dependency property.  This was my workaround because I\ncould not find a way to animate Canvas.Left  directly.  It seems like a hack. \nPerhaps there is a better way?\n\nAfter hooking up the Left  property, all I had to do was animate it with an\ninstance of the DoubleAnimation  class.  There is also a CrawlAnimation \ndependency property for custom animations.\n\nprivate void StartCrawlAnimation()\n{\n    if ((_banner != null) && (_banner.ActualWidth > 0))\n    {\n        DoubleAnimationBase doubleAnimation =\n            CrawlAnimation ?? BuildDefaultAnimation();\n        BeginAnimation(LeftProperty, doubleAnimation);\n    }\n}\nprivate void EndCrawlAnimation()\n\n{\n\nBeginAnimation(LeftProperty, null);\n\n}\n\n\nprivate DoubleAnimationBase BuildDefaultAnimation()\n\n{\n\ndouble bannerWidth = _banner.ActualWidth;\n\ndouble fromValue = _crawlCanvas.ActualWidth;\n\ndouble toValue = -1 * bannerWidth;\n\ndouble speed = CrawlSpeed;\n\n\n<span style=\"color: #2b91af\">Duration </span>duration = <span style=\"color: blue\">new </span><span style=\"color: #2b91af\">Duration</span>(\n    <span style=\"color: #2b91af\">TimeSpan</span>.FromSeconds(bannerWidth / speed));\n\n<span style=\"color: blue\">return new </span><span style=\"color: #2b91af\">DoubleAnimation</span>(fromValue, toValue, duration)\n    { RepeatBehavior = <span style=\"color: #2b91af\">RepeatBehavior</span>.Forever };\n\n\n\n}\n\n\n\n\n\nSo there it is.  My first animation.  I was surprised at how easy WPF makes\nanimations.\n\nYou can download the complete source code\n[https://github.com/joebuschmann/Buschmann.Windows].  The code behind is in\nCrawlList.cs, and the template is in CrawlListStyle.xaml.  To see it in action,\nrun the solution, and from the main window, click the “Crawl List” button to\nbring up a simple testing view.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2011-10-06T19:45:09.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b486","uuid":"9c394712-24c7-42ca-a4e8-794a65b8aeab","title":"Best Practices for Creating and Consuming Modal Dialogs in WinForms","slug":"best-practices-for-creating-and-consuming-modal-dialogs-in-winforms","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"This is an article I wrote a few years ago after seeing some bad coding practices around modal dialogs in WinForms.  Bad habits like explicitly closing the dialog form and using custom OK/Cancel flags irked me, so I came up with some best practices.  I hope you find them useful.\\n\\n**Tip 1: Set the AcceptButton and CancelButton properties**\\n\\nWindows Forms have two properties, *AcceptButton* and *CancelButton*, for determining what should be done when the user presses the Enter or Escape keys. You can set the *AcceptButton* property value to the name of an existing button on the form, normally an OK or Yes button, to fire that button's click event when the user presses the Enter key. Similarly, you can set the *CancelButton* property to an Cancel or No button to fire that button's click event when the user presses the Escape key.\\n\\n![AcceptButton and CancelButton properties](http://media.joebuschmann.com/formproperties.png)\\n\\n**Tip 2: Use a Button's DialogResult property when applicable**\\n\\nThe Button class has a property, *DialogResult*, that can be set to one of several values in the `System.Windows.Forms.DialogResult` enumeration. This value is returned by the `Form.ShowDialog()` method indicating the result of the modal dialog operation when the button is clicked. For example, you can set this property to `DialogResult.OK` for an OK button and `DialogResult.Cancel` for a Cancel button.\\n\\n![DialogResult property](http://media.joebuschmann.com/formproperties2.png)\\n\\n**Tip 3: Don't explicitly hide the form**\\n\\nIf a button's *DialogResult* property is set to any value besides `DialogResult.None`, there is no need to explicitly hide the form in the button's click event. The form will automatically close and control will return to the calling code. Setting the form's *DialogResult* property to `DialogResult.None` in the button's click event will prevent the form from closing. You can do this if validation fails, and you want to keep the form visible.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/6a10c5813be82e46cc5a.js\\\"></script>\\n\\n**Tip 4: Employ the *using* statement**\\n\\nWrap the code that displays and processes a modal dialog window in a *using* block to ensure the window is disposed properly. This is a simple and obvious tip but one that is often overlooked.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4e5965df1c536682f72a.js\\\"></script>\\n\\n**Tip 5: Prefer overriding a form's OnLoad method**\\n\\nFrom within subclasses of the Form class, prefer overriding the *OnLoad* method over attaching an event handler to the Load event. Of course, you should still call the base class's *OnLoad* method. You can use this method to process input from the calling code that is set between the time the constructor is executed and the window is displayed.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/2ca78bd08ce7eb149055.js\\\"></script>\\n\\n**Tip 6: Override *Form.ProcessDialogKey()* to suppress the accept and/or cancel buttons**\\n\\nThere are situations where you may not want the accept or cancel button's code to execute on a key press event. For example, if a filter editor is displayed at the top of the window and you would like the filter to be applied when the user presses enter, you can override the `Form.ProcessDialogKey()` method and check to see if the accept button should be suppressed. Similarly, you can suppress the cancel button when the escape key is pressed.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/3aaf386381926ad90cd3.js\\\"></script>\\n\\nAn alternative is to suppress the accept and cancel buttons from within a custom user control. This is especially useful for controls that contain text editors where the return key is needed for adding line breaks, and the accept button should always be suppressed regardless of the containing form.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/3d4608cee4566a89d4e2.js\\\"></script>\\n\\n**Bringing It All Together**\\n\\nThe following code samples demonstrates good and bad practices when coding modal dialog windows.\\n\\nWhen displaying a modal dialog window...\\n\\n<span style=\\\"color: #00ff00;\\\">do this:</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c54d16c3cff101960f91.js\\\"></script>\\n\\n<span style=\\\"color: #ff0000;\\\">don't do this:</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a8da72fcdaaea1847b9c.js\\\"></script>\\n\\nIn the modal dialog form's OK and Cancel button click events...\\n\\n<span style=\\\"color: #00ff00;\\\">do this:</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/caede8ad756c68832512.js\\\"></script>\\n\\n<span style=\\\"color: #ff0000;\\\">don't do this:</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/ca5b5147ef6b6391a73c.js\\\"></script>\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>This is an article I wrote a few years ago after seeing some bad coding practices around modal dialogs in WinForms.  Bad habits like explicitly closing the dialog form and using custom OK/Cancel flags irked me, so I came up with some best practices.  I hope you find them useful.</p>\n<p><strong>Tip 1: Set the AcceptButton and CancelButton properties</strong></p>\n<p>Windows Forms have two properties, <em>AcceptButton</em> and <em>CancelButton</em>, for determining what should be done when the user presses the Enter or Escape keys. You can set the <em>AcceptButton</em> property value to the name of an existing button on the form, normally an OK or Yes button, to fire that button's click event when the user presses the Enter key. Similarly, you can set the <em>CancelButton</em> property to an Cancel or No button to fire that button's click event when the user presses the Escape key.</p>\n<p><img src=\"http://media.joebuschmann.com/formproperties.png\" alt=\"AcceptButton and CancelButton properties\"></p>\n<p><strong>Tip 2: Use a Button's DialogResult property when applicable</strong></p>\n<p>The Button class has a property, <em>DialogResult</em>, that can be set to one of several values in the <code>System.Windows.Forms.DialogResult</code> enumeration. This value is returned by the <code>Form.ShowDialog()</code> method indicating the result of the modal dialog operation when the button is clicked. For example, you can set this property to <code>DialogResult.OK</code> for an OK button and <code>DialogResult.Cancel</code> for a Cancel button.</p>\n<p><img src=\"http://media.joebuschmann.com/formproperties2.png\" alt=\"DialogResult property\"></p>\n<p><strong>Tip 3: Don't explicitly hide the form</strong></p>\n<p>If a button's <em>DialogResult</em> property is set to any value besides <code>DialogResult.None</code>, there is no need to explicitly hide the form in the button's click event. The form will automatically close and control will return to the calling code. Setting the form's <em>DialogResult</em> property to <code>DialogResult.None</code> in the button's click event will prevent the form from closing. You can do this if validation fails, and you want to keep the form visible.</p>\n<script src=\"https://gist.github.com/joebuschmann/6a10c5813be82e46cc5a.js\"></script>\n<p><strong>Tip 4: Employ the <em>using</em> statement</strong></p>\n<p>Wrap the code that displays and processes a modal dialog window in a <em>using</em> block to ensure the window is disposed properly. This is a simple and obvious tip but one that is often overlooked.</p>\n<script src=\"https://gist.github.com/joebuschmann/4e5965df1c536682f72a.js\"></script>\n<p><strong>Tip 5: Prefer overriding a form's OnLoad method</strong></p>\n<p>From within subclasses of the Form class, prefer overriding the <em>OnLoad</em> method over attaching an event handler to the Load event. Of course, you should still call the base class's <em>OnLoad</em> method. You can use this method to process input from the calling code that is set between the time the constructor is executed and the window is displayed.</p>\n<script src=\"https://gist.github.com/joebuschmann/2ca78bd08ce7eb149055.js\"></script>\n<p><strong>Tip 6: Override <em>Form.ProcessDialogKey()</em> to suppress the accept and/or cancel buttons</strong></p>\n<p>There are situations where you may not want the accept or cancel button's code to execute on a key press event. For example, if a filter editor is displayed at the top of the window and you would like the filter to be applied when the user presses enter, you can override the <code>Form.ProcessDialogKey()</code> method and check to see if the accept button should be suppressed. Similarly, you can suppress the cancel button when the escape key is pressed.</p>\n<script src=\"https://gist.github.com/joebuschmann/3aaf386381926ad90cd3.js\"></script>\n<p>An alternative is to suppress the accept and cancel buttons from within a custom user control. This is especially useful for controls that contain text editors where the return key is needed for adding line breaks, and the accept button should always be suppressed regardless of the containing form.</p>\n<script src=\"https://gist.github.com/joebuschmann/3d4608cee4566a89d4e2.js\"></script>\n<p><strong>Bringing It All Together</strong></p>\n<p>The following code samples demonstrates good and bad practices when coding modal dialog windows.</p>\n<p>When displaying a modal dialog window...</p>\n<p><span style=\"color: #00ff00;\">do this:</span></p>\n<script src=\"https://gist.github.com/joebuschmann/c54d16c3cff101960f91.js\"></script>\n<p><span style=\"color: #ff0000;\">don't do this:</span></p>\n<script src=\"https://gist.github.com/joebuschmann/a8da72fcdaaea1847b9c.js\"></script>\n<p>In the modal dialog form's OK and Cancel button click events...</p>\n<p><span style=\"color: #00ff00;\">do this:</span></p>\n<script src=\"https://gist.github.com/joebuschmann/caede8ad756c68832512.js\"></script>\n<p><span style=\"color: #ff0000;\">don't do this:</span></p>\n<script src=\"https://gist.github.com/joebuschmann/ca5b5147ef6b6391a73c.js\"></script>\n</div>","amp":"11","plaintext":"This is an article I wrote a few years ago after seeing some bad coding\npractices around modal dialogs in WinForms.  Bad habits like explicitly closing\nthe dialog form and using custom OK/Cancel flags irked me, so I came up with\nsome best practices.  I hope you find them useful.\n\nTip 1: Set the AcceptButton and CancelButton properties\n\nWindows Forms have two properties, AcceptButton  and CancelButton, for\ndetermining what should be done when the user presses the Enter or Escape keys.\nYou can set the AcceptButton  property value to the name of an existing button\non the form, normally an OK or Yes button, to fire that button's click event\nwhen the user presses the Enter key. Similarly, you can set the CancelButton \nproperty to an Cancel or No button to fire that button's click event when the\nuser presses the Escape key.\n\n\n\nTip 2: Use a Button's DialogResult property when applicable\n\nThe Button class has a property, DialogResult, that can be set to one of several\nvalues in the System.Windows.Forms.DialogResult  enumeration. This value is\nreturned by the Form.ShowDialog()  method indicating the result of the modal\ndialog operation when the button is clicked. For example, you can set this\nproperty to DialogResult.OK  for an OK button and DialogResult.Cancel  for a\nCancel button.\n\n\n\nTip 3: Don't explicitly hide the form\n\nIf a button's DialogResult  property is set to any value besides \nDialogResult.None, there is no need to explicitly hide the form in the button's\nclick event. The form will automatically close and control will return to the\ncalling code. Setting the form's DialogResult  property to DialogResult.None  in\nthe button's click event will prevent the form from closing. You can do this if\nvalidation fails, and you want to keep the form visible.\n\nTip 4: Employ the using  statement\n\nWrap the code that displays and processes a modal dialog window in a using \nblock to ensure the window is disposed properly. This is a simple and obvious\ntip but one that is often overlooked.\n\nTip 5: Prefer overriding a form's OnLoad method\n\nFrom within subclasses of the Form class, prefer overriding the OnLoad  method\nover attaching an event handler to the Load event. Of course, you should still\ncall the base class's OnLoad  method. You can use this method to process input\nfrom the calling code that is set between the time the constructor is executed\nand the window is displayed.\n\nTip 6: Override Form.ProcessDialogKey()  to suppress the accept and/or cancel\nbuttons\n\nThere are situations where you may not want the accept or cancel button's code\nto execute on a key press event. For example, if a filter editor is displayed at\nthe top of the window and you would like the filter to be applied when the user\npresses enter, you can override the Form.ProcessDialogKey()  method and check to\nsee if the accept button should be suppressed. Similarly, you can suppress the\ncancel button when the escape key is pressed.\n\nAn alternative is to suppress the accept and cancel buttons from within a custom\nuser control. This is especially useful for controls that contain text editors\nwhere the return key is needed for adding line breaks, and the accept button\nshould always be suppressed regardless of the containing form.\n\nBringing It All Together\n\nThe following code samples demonstrates good and bad practices when coding modal\ndialog windows.\n\nWhen displaying a modal dialog window...\n\ndo this:\n\ndon't do this:\n\nIn the modal dialog form's OK and Cancel button click events...\n\ndo this:\n\ndon't do this:","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"How to Display Modal Forms in .NET/Winforms","meta_description":"Best practices for showing modal forms in .NET/Winforms. How to set accept/cancel buttons. Prevent closing the window when pressing enter in a child control","author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2014-12-18T21:15:02.000Z","updated_by":"1","published_at":"2011-07-28T19:37:55.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6b0e5e5d0019f7b487","uuid":"c7bd5e36-45c8-4e52-a266-d21e4f1e64f2","title":"Creating Mocks with F# Object Expressions","slug":"creating-mocks-with-f-object-expressions","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<p>When I read about F# object expressions, the first thought that popped into my head was to use them to create mocks for unit tests.&nbsp; For those of you who are not familiar with object expressions, they are similar to anonymous classes in Java.&nbsp; They are the object equivalent of lambda functions, and they allow you to create objects that implement an interface or base class without having to declare a new class.&nbsp; This is something that does not exist in C#, my primary language, where I have had to use a mock framework or define my own mock classes when writing unit tests.&nbsp; There are downsides to both solutions.&nbsp; Mock frameworks tend to be heavy-handed and are not built into the language.&nbsp; Creating custom mock classes tends to lead to a large number custom classes declared outside of the unit test methods.</p> <p>So that is why object expressions caught my eye.&nbsp; As an exercise, I decided to use them to create mocks for some common unit testing scenarios.&nbsp; First, I created a C# project with some fake business logic classes.&nbsp; Next, I added an F# project to the solution for the unit tests.&nbsp; The business logic code is listed below.&nbsp; It contains a couple of interfaces representing a service provider and state container and a class, Order, that contains the “logic” to be unit tested.</p><pre class=\\\"csharpcode\\\"><span class=\\\"rem\\\">// A simple class representing a product</span>\\n<span class=\\\"rem\\\">// in an order.</span>\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> Product\\n{\\n    <span class=\\\"kwrd\\\">public</span> Product(<span class=\\\"kwrd\\\">string</span> productName)\\n    {\\n        ProductName = productName;\\n    }\\n\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> ProductName { get; <span class=\\\"kwrd\\\">private</span> set; }\\n}\\n\\n<span class=\\\"rem\\\">// A service request class.</span>\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> RetrieveAvailableProductsRequest\\n{\\n}\\n\\n<span class=\\\"rem\\\">// A service response class with a list of products.</span>\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> RetrieveAvailableProductsResponse\\n{\\n    <span class=\\\"kwrd\\\">public</span> RetrieveAvailableProductsResponse(\\n        IEnumerable&lt;Product&gt; products)\\n    {\\n        Products = products;\\n    }\\n\\n    <span class=\\\"kwrd\\\">public</span> IEnumerable&lt;Product&gt; Products\\n    {\\n        get;\\n        <span class=\\\"kwrd\\\">private</span> set;\\n    }\\n}\\n\\n<span class=\\\"rem\\\">// An interface for a service provider.</span>\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">interface</span> ICatalogService\\n{\\n    RetrieveAvailableProductsResponse\\n        RetrieveAvailableProducts(\\n            RetrieveAvailableProductsRequest request);\\n}\\n\\n<span class=\\\"rem\\\">// An interface for a state container.</span>\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">interface</span> IOrderState\\n{\\n    IEnumerable&lt;Product&gt; Products { get; set; }\\n}\\n\\n<span class=\\\"rem\\\">// A class containing simple \\\"business logic\\\".</span>\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> Order\\n{\\n    <span class=\\\"kwrd\\\">public</span> IEnumerable&lt;Product&gt; GetAvailableProducts(\\n        ICatalogService catalogService)\\n    {\\n        var request = <span class=\\\"kwrd\\\">new</span> RetrieveAvailableProductsRequest();\\n        var response =\\n            catalogService.RetrieveAvailableProducts(request);\\n\\n        <span class=\\\"kwrd\\\">return</span> response.Products;\\n    }\\n\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">void</span> AddProductsToOrder(\\n        IEnumerable&lt;Product&gt; products,\\n        IOrderState orderState)\\n    {\\n        <span class=\\\"kwrd\\\">foreach</span> (var product <span class=\\\"kwrd\\\">in</span> products)\\n            AddProductToState(product, orderState);\\n    }\\n\\n    <span class=\\\"kwrd\\\">protected</span> <span class=\\\"kwrd\\\">virtual</span> <span class=\\\"kwrd\\\">void</span> AddProductToState(\\n        Product product,\\n        IOrderState orderState)\\n    {\\n        var products = <span class=\\\"kwrd\\\">new</span> List&lt;Product&gt;(orderState.Products);\\n        products.Add(product);\\n\\n        orderState.Products = products;\\n    }\\n}</pre>\\n<p>There are two common mocking scenarios I come across when writing unit tests.&nbsp; The first is to use a mock object in place of one that invokes a service, database operations, file system IO, or some other long-running process.&nbsp; Both the mock and runtime objects implement an interface which is referenced by the business logic code instead of the runtime implementation.&nbsp; Unit tests can substitute or “inject” their own implementation to avoid the expensive or unavailable runtime logic.&nbsp; This is a common pattern called dependency injection.</p>\\n<p>The <em>Order.AddProductsToOrder()</em> method takes an interface, <em>ICatalogService</em>, that represents a web service exposing a product catalog.&nbsp; In unit tests, the runtime implementation is replaced by a mock object that returns dummy values.&nbsp; Creating this mock object in C# requires either a mock framework or a class definition.&nbsp; Objects expressions in F# can simplify things by creating an object on the fly with very little overhead.&nbsp; Below is a simple example.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">let </span>mockProducts = seq { <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 1\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 2\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 3\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 4\\\"</span>) }\\n\\n[&lt;Fact&gt;]\\n<span style=\\\"color: blue\\\">let </span>TestGetAvailableProducts() =\\n  <span style=\\\"color: blue\\\">let </span>mockCatalogService = { <span style=\\\"color: blue\\\">new </span>ICatalogService <span style=\\\"color: blue\\\">with\\n    member </span>x.RetrieveAvailableProducts(request) =\\n      <span style=\\\"color: blue\\\">new </span>RetrieveAvailableProductsResponse(mockProducts) }\\n  <span style=\\\"color: blue\\\">let </span>order = <span style=\\\"color: blue\\\">new </span>Order()\\n  <span style=\\\"color: blue\\\">let </span>products = order.GetAvailableProducts(mockCatalogService)\\n  Assert.Equal(4, Seq.length(products))\\n  Assert.Same(mockProducts, products)</pre>\\n<p>The example starts by creating a sequence of dummy products.&nbsp; The mock service, <em>mockCatalogService</em>, is created on the first three lines of the unit test method using an object expression which specifies that the new object implements the <em>ICatalogService</em> interface.&nbsp; The implementation of <em>ICatalogService.RetrieveAvailableProducts()</em> returns the dummy products.&nbsp; Next, the <em>Order.GetAvailableProducts()</em> method is invoked with the mock service, and finally, the last two lines verify that the products returned by the service are the same as those returned by <em>GetAvailableProducts()</em>.</p>\\n<p>Below is another example where a mock is passed into Order.AddProductsToOrder() and updated.&nbsp; The function, <em>getMockOrderState()</em>, uses an object expression to create a mock implementing <em>IOrderState</em> and stores a list of products in a reference cell.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">let </span>mockProducts = seq { <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 1\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 2\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 3\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 4\\\"</span>) }\\n\\n<span style=\\\"color: blue\\\">let </span>getMockOrderState() =\\n  <span style=\\\"color: blue\\\">let </span>productsInState = ref Seq.empty\\n  { <span style=\\\"color: blue\\\">new </span>IOrderState <span style=\\\"color: blue\\\">with\\n    member </span>x.Products <span style=\\\"color: blue\\\">with </span>get() = !productsInState\\n                      <span style=\\\"color: blue\\\">and </span>set(value) = productsInState := value }\\n\\n[&lt;Fact&gt;]\\n<span style=\\\"color: blue\\\">let </span>TestAddProductsToOrderUsingMockOrderState() =\\n  <span style=\\\"color: blue\\\">let </span>order = <span style=\\\"color: blue\\\">new </span>Order()\\n  <span style=\\\"color: blue\\\">let </span>mockOrderState = getMockOrderState()\\n  order.AddProductsToOrder(mockProducts, mockOrderState)\\n  Assert.Equal(4, mockOrderState.Products |&gt; Seq.length)\\n  mockOrderState.Products |&gt;\\n    Seq.iteri (<span style=\\\"color: blue\\\">fun </span>i p <span style=\\\"color: blue\\\">-&gt;\\n                 let </span>i = i + 1\\n                 Assert.Equal(<span style=\\\"color: maroon\\\">\\\"Product \\\" </span>+ i.ToString(), p.ProductName))</pre>\\n<p>Sometimes it is difficult to use dependency injection because the code may not be structured correctly, and it may be too complex for easy refactoring.&nbsp; In these cases, I will often move the problematic code into its own virtual method.&nbsp; The method can be overridden in a derived class that is used in the unit tests.&nbsp; This is the second common scenario I encounter.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">let </span>mockProducts = seq { <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 1\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 2\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 3\\\"</span>)\\n                         <span style=\\\"color: blue\\\">yield new </span>Product(<span style=\\\"color: maroon\\\">\\\"Product 4\\\"</span>) }\\n\\n<span style=\\\"color: blue\\\">let </span>getMockOrderState() =\\n  <span style=\\\"color: blue\\\">let </span>productsInState = ref Seq.empty\\n  { <span style=\\\"color: blue\\\">new </span>IOrderState <span style=\\\"color: blue\\\">with\\n    member </span>x.Products <span style=\\\"color: blue\\\">with </span>get() = !productsInState\\n                      <span style=\\\"color: blue\\\">and </span>set(value) = productsInState := value }\\n\\n[&lt;Fact&gt;]\\n<span style=\\\"color: blue\\\">let </span>TestAddProductsToOrder() =\\n  <span style=\\\"color: blue\\\">let </span>products = ref []\\n  <span style=\\\"color: blue\\\">let </span>mockOrder =\\n    { <span style=\\\"color: blue\\\">new </span>Order() <span style=\\\"color: blue\\\">with\\n      member </span>x.AddProductToState(product, state) =\\n        products := product :: !products }\\n  <span style=\\\"color: blue\\\">let </span>mockOrderState = getMockOrderState()\\n  mockOrder.AddProductsToOrder(mockProducts, mockOrderState)\\n  Assert.Equal(0, mockOrderState.Products |&gt; Seq.length)\\n  Assert.Equal(4, !products |&gt; List.length)</pre>\\n<p>In the example above, the <em>mockOrder</em> object overrides the <em>Order.AddProductToState()</em> method and provides a simple implementation that stores the products in a reference cell.&nbsp; This method is trivial; however, it demonstrates the idea.&nbsp; The asserts prove that the local <em>products</em> reference cell was updated and not the order state.</p>\\n<p>I love how object expressions make creating mocks much easier.&nbsp; This is a feature I hope makes its way into C#.&nbsp; If you want the complete source code for the examples above, you can find it <a href=\\\"https://github.com/joebuschmann/FSharpUnitTest\\\" target=\\\"_blank\\\">on GitHub</a>.&nbsp; You will need to install xUnit to run the unit tests.</p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>When I read about F# object expressions, the first thought that popped into my head was to use them to create mocks for unit tests.&nbsp; For those of you who are not familiar with object expressions, they are similar to anonymous classes in Java.&nbsp; They are the object equivalent of lambda functions, and they allow you to create objects that implement an interface or base class without having to declare a new class.&nbsp; This is something that does not exist in C#, my primary language, where I have had to use a mock framework or define my own mock classes when writing unit tests.&nbsp; There are downsides to both solutions.&nbsp; Mock frameworks tend to be heavy-handed and are not built into the language.&nbsp; Creating custom mock classes tends to lead to a large number custom classes declared outside of the unit test methods.</p> <p>So that is why object expressions caught my eye.&nbsp; As an exercise, I decided to use them to create mocks for some common unit testing scenarios.&nbsp; First, I created a C# project with some fake business logic classes.&nbsp; Next, I added an F# project to the solution for the unit tests.&nbsp; The business logic code is listed below.&nbsp; It contains a couple of interfaces representing a service provider and state container and a class, Order, that contains the “logic” to be unit tested.</p><pre class=\"csharpcode\"><span class=\"rem\">// A simple class representing a product</span>\n<span class=\"rem\">// in an order.</span>\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> Product\n{\n    <span class=\"kwrd\">public</span> Product(<span class=\"kwrd\">string</span> productName)\n    {\n        ProductName = productName;\n    }\n<pre><code>&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ProductName { get; &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; set; }\n</code></pre>\n<p>}</p>\n<p><span class=\"rem\">// A service request class.</span><br>\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> RetrieveAvailableProductsRequest<br>\n{<br>\n}</p>\n<p><span class=\"rem\">// A service response class with a list of products.</span><br>\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> RetrieveAvailableProductsResponse<br>\n{<br>\n<span class=\"kwrd\">public</span> RetrieveAvailableProductsResponse(<br>\nIEnumerable&lt;Product&gt; products)<br>\n{<br>\nProducts = products;<br>\n}</p>\n<pre><code>&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;Product&amp;gt; Products\n{\n    get;\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; set;\n}\n</code></pre>\n<p>}</p>\n<p><span class=\"rem\">// An interface for a service provider.</span><br>\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> ICatalogService<br>\n{<br>\nRetrieveAvailableProductsResponse<br>\nRetrieveAvailableProducts(<br>\nRetrieveAvailableProductsRequest request);<br>\n}</p>\n<p><span class=\"rem\">// An interface for a state container.</span><br>\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> IOrderState<br>\n{<br>\nIEnumerable&lt;Product&gt; Products { get; set; }<br>\n}</p>\n<p><span class=\"rem\">// A class containing simple &quot;business logic&quot;.</span><br>\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> Order<br>\n{<br>\n<span class=\"kwrd\">public</span> IEnumerable&lt;Product&gt; GetAvailableProducts(<br>\nICatalogService catalogService)<br>\n{<br>\nvar request = <span class=\"kwrd\">new</span> RetrieveAvailableProductsRequest();<br>\nvar response =<br>\ncatalogService.RetrieveAvailableProducts(request);</p>\n<pre><code>    &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; response.Products;\n}\n\n&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AddProductsToOrder(\n    IEnumerable&amp;lt;Product&amp;gt; products,\n    IOrderState orderState)\n{\n    &lt;span class=&quot;kwrd&quot;&gt;foreach&lt;/span&gt; (var product &lt;span class=&quot;kwrd&quot;&gt;in&lt;/span&gt; products)\n        AddProductToState(product, orderState);\n}\n\n&lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AddProductToState(\n    Product product,\n    IOrderState orderState)\n{\n    var products = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; List&amp;lt;Product&amp;gt;(orderState.Products);\n    products.Add(product);\n\n    orderState.Products = products;\n}\n</code></pre>\n<p>}</pre></p>\n<p>There are two common mocking scenarios I come across when writing unit tests.&nbsp; The first is to use a mock object in place of one that invokes a service, database operations, file system IO, or some other long-running process.&nbsp; Both the mock and runtime objects implement an interface which is referenced by the business logic code instead of the runtime implementation.&nbsp; Unit tests can substitute or “inject” their own implementation to avoid the expensive or unavailable runtime logic.&nbsp; This is a common pattern called dependency injection.</p>\n<p>The <em>Order.AddProductsToOrder()</em> method takes an interface, <em>ICatalogService</em>, that represents a web service exposing a product catalog.&nbsp; In unit tests, the runtime implementation is replaced by a mock object that returns dummy values.&nbsp; Creating this mock object in C# requires either a mock framework or a class definition.&nbsp; Objects expressions in F# can simplify things by creating an object on the fly with very little overhead.&nbsp; Below is a simple example.</p><pre class=\"code\"><span style=\"color: blue\">let </span>mockProducts = seq { <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 1\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 2\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 3\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 4\"</span>) }\n<p>[&lt;Fact&gt;]<br>\n<span style=\"color: blue\">let </span>TestGetAvailableProducts() =<br>\n<span style=\"color: blue\">let </span>mockCatalogService = { <span style=\"color: blue\">new </span>ICatalogService <span style=\"color: blue\">with<br>\nmember </span>x.RetrieveAvailableProducts(request) =<br>\n<span style=\"color: blue\">new </span>RetrieveAvailableProductsResponse(mockProducts) }<br>\n<span style=\"color: blue\">let </span>order = <span style=\"color: blue\">new </span>Order()<br>\n<span style=\"color: blue\">let </span>products = order.GetAvailableProducts(mockCatalogService)<br>\nAssert.Equal(4, Seq.length(products))<br>\nAssert.Same(mockProducts, products)</pre></p>\n<p>The example starts by creating a sequence of dummy products.&nbsp; The mock service, <em>mockCatalogService</em>, is created on the first three lines of the unit test method using an object expression which specifies that the new object implements the <em>ICatalogService</em> interface.&nbsp; The implementation of <em>ICatalogService.RetrieveAvailableProducts()</em> returns the dummy products.&nbsp; Next, the <em>Order.GetAvailableProducts()</em> method is invoked with the mock service, and finally, the last two lines verify that the products returned by the service are the same as those returned by <em>GetAvailableProducts()</em>.</p>\n<p>Below is another example where a mock is passed into Order.AddProductsToOrder() and updated.&nbsp; The function, <em>getMockOrderState()</em>, uses an object expression to create a mock implementing <em>IOrderState</em> and stores a list of products in a reference cell.</p><pre class=\"code\"><span style=\"color: blue\">let </span>mockProducts = seq { <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 1\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 2\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 3\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 4\"</span>) }\n<p><span style=\"color: blue\">let </span>getMockOrderState() =<br>\n<span style=\"color: blue\">let </span>productsInState = ref Seq.empty<br>\n{ <span style=\"color: blue\">new </span>IOrderState <span style=\"color: blue\">with<br>\nmember </span>x.Products <span style=\"color: blue\">with </span>get() = !productsInState<br>\n<span style=\"color: blue\">and </span>set(value) = productsInState := value }</p>\n<p>[&lt;Fact&gt;]<br>\n<span style=\"color: blue\">let </span>TestAddProductsToOrderUsingMockOrderState() =<br>\n<span style=\"color: blue\">let </span>order = <span style=\"color: blue\">new </span>Order()<br>\n<span style=\"color: blue\">let </span>mockOrderState = getMockOrderState()<br>\norder.AddProductsToOrder(mockProducts, mockOrderState)<br>\nAssert.Equal(4, mockOrderState.Products |&gt; Seq.length)<br>\nmockOrderState.Products |&gt;<br>\nSeq.iteri (<span style=\"color: blue\">fun </span>i p <span style=\"color: blue\">-&gt;<br>\nlet </span>i = i + 1<br>\nAssert.Equal(<span style=\"color: maroon\">&quot;Product &quot; </span>+ i.ToString(), p.ProductName))</pre></p>\n<p>Sometimes it is difficult to use dependency injection because the code may not be structured correctly, and it may be too complex for easy refactoring.&nbsp; In these cases, I will often move the problematic code into its own virtual method.&nbsp; The method can be overridden in a derived class that is used in the unit tests.&nbsp; This is the second common scenario I encounter.</p><pre class=\"code\"><span style=\"color: blue\">let </span>mockProducts = seq { <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 1\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 2\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 3\"</span>)\n                         <span style=\"color: blue\">yield new </span>Product(<span style=\"color: maroon\">\"Product 4\"</span>) }\n<p><span style=\"color: blue\">let </span>getMockOrderState() =<br>\n<span style=\"color: blue\">let </span>productsInState = ref Seq.empty<br>\n{ <span style=\"color: blue\">new </span>IOrderState <span style=\"color: blue\">with<br>\nmember </span>x.Products <span style=\"color: blue\">with </span>get() = !productsInState<br>\n<span style=\"color: blue\">and </span>set(value) = productsInState := value }</p>\n<p>[&lt;Fact&gt;]<br>\n<span style=\"color: blue\">let </span>TestAddProductsToOrder() =<br>\n<span style=\"color: blue\">let </span>products = ref []<br>\n<span style=\"color: blue\">let </span>mockOrder =<br>\n{ <span style=\"color: blue\">new </span>Order() <span style=\"color: blue\">with<br>\nmember </span>x.AddProductToState(product, state) =<br>\nproducts := product :: !products }<br>\n<span style=\"color: blue\">let </span>mockOrderState = getMockOrderState()<br>\nmockOrder.AddProductsToOrder(mockProducts, mockOrderState)<br>\nAssert.Equal(0, mockOrderState.Products |&gt; Seq.length)<br>\nAssert.Equal(4, !products |&gt; List.length)</pre></p>\n<p>In the example above, the <em>mockOrder</em> object overrides the <em>Order.AddProductToState()</em> method and provides a simple implementation that stores the products in a reference cell.&nbsp; This method is trivial; however, it demonstrates the idea.&nbsp; The asserts prove that the local <em>products</em> reference cell was updated and not the order state.</p>\n<p>I love how object expressions make creating mocks much easier.&nbsp; This is a feature I hope makes its way into C#.&nbsp; If you want the complete source code for the examples above, you can find it <a href=\"https://github.com/joebuschmann/FSharpUnitTest\" target=\"_blank\">on GitHub</a>.&nbsp; You will need to install xUnit to run the unit tests.</p></div>","amp":"12","plaintext":"When I read about F# object expressions, the first thought that popped into my\nhead was to use them to create mocks for unit tests.  For those of you who are\nnot familiar with object expressions, they are similar to anonymous classes in\nJava.  They are the object equivalent of lambda functions, and they allow you to\ncreate objects that implement an interface or base class without having to\ndeclare a new class.  This is something that does not exist in C#, my primary\nlanguage, where I have had to use a mock framework or define my own mock classes\nwhen writing unit tests.  There are downsides to both solutions.  Mock\nframeworks tend to be heavy-handed and are not built into the language. \nCreating custom mock classes tends to lead to a large number custom classes\ndeclared outside of the unit test methods.\n\nSo that is why object expressions caught my eye.  As an exercise, I decided to\nuse them to create mocks for some common unit testing scenarios.  First, I\ncreated a C# project with some fake business logic classes.  Next, I added an F#\nproject to the solution for the unit tests.  The business logic code is listed\nbelow.  It contains a couple of interfaces representing a service provider and\nstate container and a class, Order, that contains the “logic” to be unit tested.\n\n// A simple class representing a product\n// in an order.\npublic class Product\n{\n    public Product(string productName)\n    {\n        ProductName = productName;\n    }\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> ProductName { get; <span class=\"kwrd\">private</span> set; }\n\n\n\n}\n\n\n// A service request class.\n\npublic class RetrieveAvailableProductsRequest\n\n{\n\n}\n\n\n// A service response class with a list of products.\n\npublic class RetrieveAvailableProductsResponse\n\n{\n\npublic RetrieveAvailableProductsResponse(\n\nIEnumerable<Product> products)\n\n{\n\nProducts = products;\n\n}\n\n\n<span class=\"kwrd\">public</span> IEnumerable&lt;Product&gt; Products\n{\n    get;\n    <span class=\"kwrd\">private</span> set;\n}\n\n\n\n}\n\n\n// An interface for a service provider.\n\npublic interface ICatalogService\n\n{\n\nRetrieveAvailableProductsResponse\n\nRetrieveAvailableProducts(\n\nRetrieveAvailableProductsRequest request);\n\n}\n\n\n// An interface for a state container.\n\npublic interface IOrderState\n\n{\n\nIEnumerable<Product> Products { get; set; }\n\n}\n\n\n// A class containing simple \"business logic\".\n\npublic class Order\n\n{\n\npublic IEnumerable<Product> GetAvailableProducts(\n\nICatalogService catalogService)\n\n{\n\nvar request = new RetrieveAvailableProductsRequest();\n\nvar response =\n\ncatalogService.RetrieveAvailableProducts(request);\n\n\n    <span class=\"kwrd\">return</span> response.Products;\n}\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> AddProductsToOrder(\n    IEnumerable&lt;Product&gt; products,\n    IOrderState orderState)\n{\n    <span class=\"kwrd\">foreach</span> (var product <span class=\"kwrd\">in</span> products)\n        AddProductToState(product, orderState);\n}\n\n<span class=\"kwrd\">protected</span> <span class=\"kwrd\">virtual</span> <span class=\"kwrd\">void</span> AddProductToState(\n    Product product,\n    IOrderState orderState)\n{\n    var products = <span class=\"kwrd\">new</span> List&lt;Product&gt;(orderState.Products);\n    products.Add(product);\n\n    orderState.Products = products;\n}\n\n\n\n}\n\n\n\n\n\nThere are two common mocking scenarios I come across when writing unit tests. \nThe first is to use a mock object in place of one that invokes a service,\ndatabase operations, file system IO, or some other long-running process.  Both\nthe mock and runtime objects implement an interface which is referenced by the\nbusiness logic code instead of the runtime implementation.  Unit tests can\nsubstitute or “inject” their own implementation to avoid the expensive or\nunavailable runtime logic.  This is a common pattern called dependency\ninjection.\n\nThe Order.AddProductsToOrder()  method takes an interface, ICatalogService, that\nrepresents a web service exposing a product catalog.  In unit tests, the runtime\nimplementation is replaced by a mock object that returns dummy values.  Creating\nthis mock object in C# requires either a mock framework or a class definition. \nObjects expressions in F# can simplify things by creating an object on the fly\nwith very little overhead.  Below is a simple example.\n\nlet mockProducts = seq { yield new Product(\"Product 1\")\n                         yield new Product(\"Product 2\")\n                         yield new Product(\"Product 3\")\n                         yield new Product(\"Product 4\") }\n[<Fact>]\n\nlet TestGetAvailableProducts() =\n\nlet mockCatalogService = { new ICatalogService with\n\nmember x.RetrieveAvailableProducts(request) =\n\nnew RetrieveAvailableProductsResponse(mockProducts) }\n\nlet order = new Order()\n\nlet products = order.GetAvailableProducts(mockCatalogService)\n\nAssert.Equal(4, Seq.length(products))\n\nAssert.Same(mockProducts, products)\n\n\n\n\n\nThe example starts by creating a sequence of dummy products.  The mock service, \nmockCatalogService, is created on the first three lines of the unit test method\nusing an object expression which specifies that the new object implements the \nICatalogService  interface.  The implementation of \nICatalogService.RetrieveAvailableProducts()  returns the dummy products.  Next,\nthe Order.GetAvailableProducts()  method is invoked with the mock service, and\nfinally, the last two lines verify that the products returned by the service are\nthe same as those returned by GetAvailableProducts().\n\nBelow is another example where a mock is passed into Order.AddProductsToOrder()\nand updated.  The function, getMockOrderState(), uses an object expression to\ncreate a mock implementing IOrderState  and stores a list of products in a\nreference cell.\n\nlet mockProducts = seq { yield new Product(\"Product 1\")\n                         yield new Product(\"Product 2\")\n                         yield new Product(\"Product 3\")\n                         yield new Product(\"Product 4\") }\nlet getMockOrderState() =\n\nlet productsInState = ref Seq.empty\n\n{ new IOrderState with\n\nmember x.Products with get() = !productsInState\n\nand set(value) = productsInState := value }\n\n\n[<Fact>]\n\nlet TestAddProductsToOrderUsingMockOrderState() =\n\nlet order = new Order()\n\nlet mockOrderState = getMockOrderState()\n\norder.AddProductsToOrder(mockProducts, mockOrderState)\n\nAssert.Equal(4, mockOrderState.Products |> Seq.length)\n\nmockOrderState.Products |>\n\nSeq.iteri (fun i p ->\n\nlet i = i + 1\n\nAssert.Equal(\"Product \" + i.ToString(), p.ProductName))\n\n\n\n\n\nSometimes it is difficult to use dependency injection because the code may not\nbe structured correctly, and it may be too complex for easy refactoring.  In\nthese cases, I will often move the problematic code into its own virtual\nmethod.  The method can be overridden in a derived class that is used in the\nunit tests.  This is the second common scenario I encounter.\n\nlet mockProducts = seq { yield new Product(\"Product 1\")\n                         yield new Product(\"Product 2\")\n                         yield new Product(\"Product 3\")\n                         yield new Product(\"Product 4\") }\nlet getMockOrderState() =\n\nlet productsInState = ref Seq.empty\n\n{ new IOrderState with\n\nmember x.Products with get() = !productsInState\n\nand set(value) = productsInState := value }\n\n\n[<Fact>]\n\nlet TestAddProductsToOrder() =\n\nlet products = ref []\n\nlet mockOrder =\n\n{ new Order() with\n\nmember x.AddProductToState(product, state) =\n\nproducts := product :: !products }\n\nlet mockOrderState = getMockOrderState()\n\nmockOrder.AddProductsToOrder(mockProducts, mockOrderState)\n\nAssert.Equal(0, mockOrderState.Products |> Seq.length)\n\nAssert.Equal(4, !products |> List.length)\n\n\n\n\n\nIn the example above, the mockOrder  object overrides the \nOrder.AddProductToState()  method and provides a simple implementation that\nstores the products in a reference cell.  This method is trivial; however, it\ndemonstrates the idea.  The asserts prove that the local products  reference\ncell was updated and not the order state.\n\nI love how object expressions make creating mocks much easier.  This is a\nfeature I hope makes its way into C#.  If you want the complete source code for\nthe examples above, you can find it on GitHub\n[https://github.com/joebuschmann/FSharpUnitTest].  You will need to install\nxUnit to run the unit tests.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2011-10-13T19:59:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b488","uuid":"7e106952-bf47-4905-87da-5ba10a26af30","title":"SpecFlow Nested Tables: A Bad Idea","slug":"specflow-nested-tables-a-bad-idea","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<p>I’ve been using <a href=\\\"http://www.specflow.org/specflownew/\\\" target=\\\"_blank\\\">SpecFlow</a> to write behavior specifications for just under a year, and one question that comes up is whether or not nested tables are supported for creating complex or hierarchal types. Other folks have discussed this at <a href=\\\"http://stackoverflow.com/questions/5788964/specflow-and-complex-objects\\\">Stack Overflow</a> and <a href=\\\"https://groups.google.com/forum/#!topic/specflow/9VLN7dTz7Kk\\\">Google Groups</a>. Nested tables aren’t currently supported, and that’s probably a good thing.</p> <p>The intent of the Cucumber syntax is to express business requirements in the language of the business. Nested tables don’t add value from the business side because the nesting tends to make the step less readable and serves the developer more than the business. Anything that makes the steps less readable <a href=\\\"http://www.elabs.se/blog/15-you-re-cuking-it-wrong\\\">should be avoided</a>.</p> <p>Below are a couple of examples of what nested tables might look like if they were supported. The steps populate a Customer type with the simple properties FirstName and LastName, and the nested table populates ContactInformation a collection of phone numbers represented by a complex type as well.</p> <p>The first example uses a double pipe delimiter to indicate the contact information. The second uses an indicator of some sort to point to the nested table. Both examples are difficult to read, and they’re fairly simple compared to some of the complex types found in real systems.</p><pre class=\\\"csharpcode\\\"><p># Example 1: Embedded inside the contact info cell</p><p>Given the following customer</p><p>  | First Name | Last Name | Contact Information                |\\n  | Gary       | Smith     | || Contact Type || Number       || |\\n  |            |           | || HomePhone    || 513 555-1111 || |\\n  |            |           | || CellPhone    || 513 555-2222 || |\\n</p><p>&nbsp;</p><p>&nbsp;</p><p># Example 2: Contact info appears after the primary table specification</p><p>Given the following customer\\n  | First Name | Last Name | Contact Information |\\n  | Gary       | Smith     | {nested}            |\\n    | Contact Type | Number       |\\n    | HomePhone    | 513 555-1111 |\\n    | CellPhone    | 513 555-2222 |</p></pre>\\n<p>With that said, it would still be nice to be able to build out a complex object using tables. Consider the following specification that builds out the same complex customer object.</p><pre class=\\\"csharpcode\\\">Given the following customer\\n    | First Name | Last Name |\\n    | Gary       | Smith     |\\nAnd the following contact information\\n    | Customer   | Contact Type | Number       |\\n    | Gary Smith | HomePhone    | 513 555-1111 |\\n    | Gary Smith | CellPhone    | 513 555-2222 |</pre>This is much more readable than nested tables.&nbsp; Even with more data it remains easy to follow.<pre class=\\\"csharpcode\\\">Given the following customer\\n    | First Name | Last Name |\\n    | Gary       | Smith     |\\n    | Kim        | Green     |\\nAnd the following contact information\\n    | Customer   | Contact Type | Number       |\\n    | Gary Smith | HomePhone    | 513 555-1111 |\\n    | Gary Smith | CellPhone    | 513 555-2222 |\\n    | Kim Green  | CellPhone    | 513 555-3333 |\\n    | Kim Green  | WorkPhone    | 513 555-4444 |\\nAnd the following addresses\\n    | Customer   | Address Type | Street          | City       | State |\\n    | Gary Smith | Home         | 111 Main Street | Cincinnati | OH    |\\n    | Gary Smith | Work         | 111 Poplar Road | Cincinnati | OH    |\\n    | Kim Green  | Home         | 222 Main Street | Cincinnati | OH    |\\n    | Kim Green  | Work         | 333 Poplar Road | Cincinnati | OH    |</pre>\\n<p>Now imagine what this would look like with nested tables. No matter how elegant the proposed syntax, it would be very difficult for non-technical people to follow.</p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I’ve been using <a href=\"http://www.specflow.org/specflownew/\" target=\"_blank\">SpecFlow</a> to write behavior specifications for just under a year, and one question that comes up is whether or not nested tables are supported for creating complex or hierarchal types. Other folks have discussed this at <a href=\"http://stackoverflow.com/questions/5788964/specflow-and-complex-objects\">Stack Overflow</a> and <a href=\"https://groups.google.com/forum/#!topic/specflow/9VLN7dTz7Kk\">Google Groups</a>. Nested tables aren’t currently supported, and that’s probably a good thing.</p> <p>The intent of the Cucumber syntax is to express business requirements in the language of the business. Nested tables don’t add value from the business side because the nesting tends to make the step less readable and serves the developer more than the business. Anything that makes the steps less readable <a href=\"http://www.elabs.se/blog/15-you-re-cuking-it-wrong\">should be avoided</a>.</p> <p>Below are a couple of examples of what nested tables might look like if they were supported. The steps populate a Customer type with the simple properties FirstName and LastName, and the nested table populates ContactInformation a collection of phone numbers represented by a complex type as well.</p> <p>The first example uses a double pipe delimiter to indicate the contact information. The second uses an indicator of some sort to point to the nested table. Both examples are difficult to read, and they’re fairly simple compared to some of the complex types found in real systems.</p><pre class=\"csharpcode\"><p># Example 1: Embedded inside the contact info cell</p><p>Given the following customer</p><p>  | First Name | Last Name | Contact Information                |\n  | Gary       | Smith     | || Contact Type || Number       || |\n  |            |           | || HomePhone    || 513 555-1111 || |\n  |            |           | || CellPhone    || 513 555-2222 || |\n</p><p>&nbsp;</p><p>&nbsp;</p><p># Example 2: Contact info appears after the primary table specification</p><p>Given the following customer\n  | First Name | Last Name | Contact Information |\n  | Gary       | Smith     | {nested}            |\n    | Contact Type | Number       |\n    | HomePhone    | 513 555-1111 |\n    | CellPhone    | 513 555-2222 |</p></pre>\n<p>With that said, it would still be nice to be able to build out a complex object using tables. Consider the following specification that builds out the same complex customer object.</p><pre class=\"csharpcode\">Given the following customer\n    | First Name | Last Name |\n    | Gary       | Smith     |\nAnd the following contact information\n    | Customer   | Contact Type | Number       |\n    | Gary Smith | HomePhone    | 513 555-1111 |\n    | Gary Smith | CellPhone    | 513 555-2222 |</pre>This is much more readable than nested tables.&nbsp; Even with more data it remains easy to follow.<pre class=\"csharpcode\">Given the following customer\n    | First Name | Last Name |\n    | Gary       | Smith     |\n    | Kim        | Green     |\nAnd the following contact information\n    | Customer   | Contact Type | Number       |\n    | Gary Smith | HomePhone    | 513 555-1111 |\n    | Gary Smith | CellPhone    | 513 555-2222 |\n    | Kim Green  | CellPhone    | 513 555-3333 |\n    | Kim Green  | WorkPhone    | 513 555-4444 |\nAnd the following addresses\n    | Customer   | Address Type | Street          | City       | State |\n    | Gary Smith | Home         | 111 Main Street | Cincinnati | OH    |\n    | Gary Smith | Work         | 111 Poplar Road | Cincinnati | OH    |\n    | Kim Green  | Home         | 222 Main Street | Cincinnati | OH    |\n    | Kim Green  | Work         | 333 Poplar Road | Cincinnati | OH    |</pre>\n<p>Now imagine what this would look like with nested tables. No matter how elegant the proposed syntax, it would be very difficult for non-technical people to follow.</p></div>","amp":"14","plaintext":"I’ve been using SpecFlow [http://www.specflow.org/specflownew/]  to write\nbehavior specifications for just under a year, and one question that comes up is\nwhether or not nested tables are supported for creating complex or hierarchal\ntypes. Other folks have discussed this at Stack Overflow\n[http://stackoverflow.com/questions/5788964/specflow-and-complex-objects]  and \nGoogle Groups. Nested tables aren’t currently supported, and that’s probably a\ngood thing.\n\nThe intent of the Cucumber syntax is to express business requirements in the\nlanguage of the business. Nested tables don’t add value from the business side\nbecause the nesting tends to make the step less readable and serves the\ndeveloper more than the business. Anything that makes the steps less readable \nshould be avoided [http://www.elabs.se/blog/15-you-re-cuking-it-wrong].\n\nBelow are a couple of examples of what nested tables might look like if they\nwere supported. The steps populate a Customer type with the simple properties\nFirstName and LastName, and the nested table populates ContactInformation a\ncollection of phone numbers represented by a complex type as well.\n\nThe first example uses a double pipe delimiter to indicate the contact\ninformation. The second uses an indicator of some sort to point to the nested\ntable. Both examples are difficult to read, and they’re fairly simple compared\nto some of the complex types found in real systems.\n\n# Example 1: Embedded inside the contact info cell\n\nGiven the following customer\n\n  | First Name | Last Name | Contact Information                |\n  | Gary       | Smith     | || Contact Type || Number       || |\n  |            |           | || HomePhone    || 513 555-1111 || |\n  |            |           | || CellPhone    || 513 555-2222 || |\n\n\n \n\n \n\n# Example 2: Contact info appears after the primary table specification\n\nGiven the following customer\n  | First Name | Last Name | Contact Information |\n  | Gary       | Smith     | {nested}            |\n    | Contact Type | Number       |\n    | HomePhone    | 513 555-1111 |\n    | CellPhone    | 513 555-2222 |\n\n\n\nWith that said, it would still be nice to be able to build out a complex object\nusing tables. Consider the following specification that builds out the same\ncomplex customer object.\n\nGiven the following customer\n    | First Name | Last Name |\n    | Gary       | Smith     |\nAnd the following contact information\n    | Customer   | Contact Type | Number       |\n    | Gary Smith | HomePhone    | 513 555-1111 |\n    | Gary Smith | CellPhone    | 513 555-2222 |\n\nThis is much more readable than nested tables.  Even with more data it remains\neasy to follow.Given the following customer\n    | First Name | Last Name |\n    | Gary       | Smith     |\n    | Kim        | Green     |\nAnd the following contact information\n    | Customer   | Contact Type | Number       |\n    | Gary Smith | HomePhone    | 513 555-1111 |\n    | Gary Smith | CellPhone    | 513 555-2222 |\n    | Kim Green  | CellPhone    | 513 555-3333 |\n    | Kim Green  | WorkPhone    | 513 555-4444 |\nAnd the following addresses\n    | Customer   | Address Type | Street          | City       | State |\n    | Gary Smith | Home         | 111 Main Street | Cincinnati | OH    |\n    | Gary Smith | Work         | 111 Poplar Road | Cincinnati | OH    |\n    | Kim Green  | Home         | 222 Main Street | Cincinnati | OH    |\n    | Kim Green  | Work         | 333 Poplar Road | Cincinnati | OH    |\n\nNow imagine what this would look like with nested tables. No matter how elegant\nthe proposed syntax, it would be very difficult for non-technical people to\nfollow.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2017-10-22T02:58:41.000Z","updated_by":"1","published_at":"2013-10-22T07:45:06.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b489","uuid":"70424ac2-2fcb-4fd6-885d-9f8948d77ece","title":"Text Parsing with F#","slug":"getting-over-my-fear-of-parsing-text","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<p>I’ve always had a fear of parsing text.&nbsp; Strange since it’s a basic programmer’s task.&nbsp; I’ve always found it to be tedious and boring, and the resulting code is a jumbled mess of indexes and string parsing methods.&nbsp; I avoid it every chance I get.</p> <p>And there’s regex.&nbsp; The syntax is cryptic and difficult to remember.&nbsp; It’s another thing I should know well, but, again, I avoid it.</p> <p>Recently I decided to come to grips with this weakness and parse a text file containing information about TCP sockets in a TIME_WAIT status.&nbsp; It was generated by a co-worker investigating network performance.&nbsp; He wanted to get a list of IP addresses along with the amount of time they spent with a status of TIME_WAIT.&nbsp; Then he could pull it into Excel to visualize the data.</p> <p>I’ve been told that functional languages are great for parsing text, so I decided to use F#.&nbsp; While doing some research, I came to a sudden realization.&nbsp; The reason why it has always been difficult for me was I had been taking the wrong approach.&nbsp; I was intermingling the parsing code with the business logic code.&nbsp; My approach was along the lines of:&nbsp; parse a line, pull some string values from previous lines from state, run some logic for the current line, store the string values in state, and move to the next line.&nbsp; Included in the code were lots of index values into the text, helper methods, and conversions to data types like dates, integers, etc.&nbsp; All that mixed in with the business logic.&nbsp; No wonder I hated it.</p> <p>The correct approach (or at least a better one) is to convert the textual representation of the data into data structures before running any business logic.&nbsp; There should be a clear separation between the two.&nbsp; With this step, the logic becomes easier.&nbsp; There are no indexes or type conversions.&nbsp; All that’s been done, and the business logic is focused and concise.</p> <h3>The Data Structures</h3> <p>Before I could continue, I needed to understand the data represented in the file from my co-worker and map them to data structures.&nbsp; A portion of the file is below.</p><pre>Time : 2011-11-09_08:36:19\\nTime : 2011-11-09_08:36:24\\nTime : 2011-11-09_08:36:29\\nTime : 2011-11-09_08:36:34\\nTime : 2011-11-09_08:36:40\\nTime : 2011-11-09_08:36:45\\nTime : 2011-11-09_08:36:50\\nTime : 2011-11-09_08:36:56\\nTime : 2011-11-09_08:37:01\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1804&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTime :&nbsp; 2011-11-09_08:37:06\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1804&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1809&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1813&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1819&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1831&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1834&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</pre>\\n<p>Each line was written in intervals of about 5 seconds.&nbsp; There seemed to be two types of information recorded, a timestamp and an IP address of a socket with a status of TIME_WAIT, and each needed its own data structure.&nbsp; The IP address lines were consistent in their format; however, the timestamps were not.&nbsp; Sometimes there was a line break between the “Time :” label and the value and other times they were on the same line.&nbsp; The table below breaks down each type of line format and the action to take.</p>\\n<table border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"2\\\" width=\\\"587\\\">\\n<tbody>\\n<tr>\\n<td valign=\\\"top\\\" width=\\\"429\\\">\\n<h5>Format</h5></td>\\n<td valign=\\\"top\\\" width=\\\"156\\\">\\n<h5>Action</h5></td></tr>\\n<tr>\\n<td valign=\\\"top\\\" width=\\\"429\\\">Time : 2011-11-09_08:37:01</td>\\n<td valign=\\\"top\\\" width=\\\"156\\\">Create a data structure representation</td></tr>\\n<tr>\\n<td valign=\\\"top\\\" width=\\\"429\\\">Time :</td>\\n<td valign=\\\"top\\\" width=\\\"156\\\">Ignore</td></tr>\\n<tr>\\n<td valign=\\\"top\\\" width=\\\"429\\\">2011-11-09_08:37:11</td>\\n<td valign=\\\"top\\\" width=\\\"156\\\">Create a data structure representation</td></tr>\\n<tr>\\n<td valign=\\\"top\\\" width=\\\"429\\\">TCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1834&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp; 0</td>\\n<td valign=\\\"top\\\" width=\\\"156\\\">Create a data structure representation</td></tr></tbody></table>\\n<p>&nbsp;</p>\\n<p>To represent the data, I used a discriminated union with two discriminators that store the timestamp and IP address.&nbsp; For the lines with the IP addresses, there are two addresses, and only the first one is useful because it is the one in a TIME_WAIT state.&nbsp; The remaining information is superfluous and can be discarded.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">type </span>LineRecord =\\n| TimeRecord <span style=\\\"color: blue\\\">of </span>DateTime\\n| TimeWaitRecord <span style=\\\"color: blue\\\">of </span>int * int * int * int * int</pre>\\n<h3>Active Patterns</h3>\\n<p>To parse each line into a LineRecord, I used an F# feature called <a href=\\\"http://msdn.microsoft.com/en-us/library/dd233248.aspx\\\" target=\\\"_blank\\\">active patterns</a> which allowed me to set up pattern matching expressions for text values just as I would for a discriminated union.&nbsp; I created four active pattern definitions.&nbsp; The first two take a string value and attempt to return a date or an IP address.&nbsp; The next two take a line of text from the file and return a LineRecord discriminator value.&nbsp; Once these were in place, writing a function to convert the text file into a list of LineRecord values became trivial.</p><pre class=\\\"code\\\"><span style=\\\"color: green\\\">// Attempt to convert a string value into a date.\\n</span><span style=\\\"color: blue\\\">let </span>(|Date|_|) (input:string) =\\n  <span style=\\\"color: blue\\\">let </span>(success, date) = DateTime.TryParse(input)\\n  <span style=\\\"color: blue\\\">if </span>(success) <span style=\\\"color: blue\\\">then </span>Some(date)\\n  <span style=\\\"color: blue\\\">else </span>None\\n\\n<span style=\\\"color: green\\\">// Attempt to convert a string value into an IP address\\n// represented by a tuple with four or five integers with\\n// the port being optional.\\n</span><span style=\\\"color: blue\\\">let </span>(|IP|_|) (input:string) =\\n  <span style=\\\"color: blue\\\">let </span>delimChars = [|<span style=\\\"color: maroon\\\">'.'</span>; <span style=\\\"color: maroon\\\">':'</span>|]\\n  <span style=\\\"color: blue\\\">let </span>arr = input.Split(delimChars)\\n  <span style=\\\"color: blue\\\">match </span>arr.Length <span style=\\\"color: blue\\\">with\\n  </span>| 4 <span style=\\\"color: blue\\\">-&gt; </span>Some((int(arr.[0]), int(arr.[1]), int(arr.[2]), int(arr.[3]), 0))\\n  | 5 <span style=\\\"color: blue\\\">-&gt; </span>Some((int(arr.[0]), int(arr.[1]), int(arr.[2]), int(arr.[3]),\\n               int(arr.[4])))\\n  | _ <span style=\\\"color: blue\\\">-&gt; </span>None\\n\\n<span style=\\\"color: green\\\">// Attempt to convert a time record.\\n</span><span style=\\\"color: blue\\\">let </span>(|TimeEntry|_|) (line:string) =\\n  <span style=\\\"color: blue\\\">let </span>line = line.Trim().Replace(<span style=\\\"color: maroon\\\">\\\"Time : \\\"</span>, <span style=\\\"color: maroon\\\">\\\"\\\"</span>).Replace(<span style=\\\"color: maroon\\\">'_'</span>, <span style=\\\"color: maroon\\\">' '</span>)\\n  <span style=\\\"color: blue\\\">match </span>line <span style=\\\"color: blue\\\">with\\n  </span>| Date dateTime <span style=\\\"color: blue\\\">-&gt; </span>Some(TimeRecord(dateTime))\\n  | _ <span style=\\\"color: blue\\\">-&gt; </span>None\\n\\n<span style=\\\"color: green\\\">// Attempt to convert a TIME_WAIT record.\\n</span><span style=\\\"color: blue\\\">let </span>(|TimeWaitEntry|_|) (line:string) =\\n  <span style=\\\"color: blue\\\">let </span>line = line.Replace(<span style=\\\"color: maroon\\\">\\\"TCP\\\"</span>, <span style=\\\"color: maroon\\\">\\\"\\\"</span>).Trim()\\n  <span style=\\\"color: blue\\\">let </span>index = line.IndexOf(<span style=\\\"color: maroon\\\">' '</span>)\\n\\n  <span style=\\\"color: blue\\\">match </span>index <span style=\\\"color: blue\\\">with\\n  </span>| -1 <span style=\\\"color: blue\\\">-&gt; </span>None\\n  | index <span style=\\\"color: blue\\\">-&gt;\\n    let </span>line = line.Substring(0, index)\\n    <span style=\\\"color: blue\\\">match </span>line <span style=\\\"color: blue\\\">with\\n    </span>| IP (ip) <span style=\\\"color: blue\\\">-&gt; </span>Some(TimeWaitRecord ip)\\n    | _ <span style=\\\"color: blue\\\">-&gt; </span>None\\n\\n<span style=\\\"color: green\\\">// Parses lines from the file into a list of LineRecords.\\n</span><span style=\\\"color: blue\\\">let </span>parseFile lines =\\n  <span style=\\\"color: blue\\\">let </span>lines = lines |&gt; List.rev\\n  <span style=\\\"color: blue\\\">let rec </span>parseFileUtil lines acc =\\n    <span style=\\\"color: blue\\\">match </span>lines <span style=\\\"color: blue\\\">with\\n    </span>| hd :: tl <span style=\\\"color: blue\\\">-&gt;\\n      let </span>acc = <span style=\\\"color: blue\\\">match </span>hd <span style=\\\"color: blue\\\">with\\n                </span>| TimeEntry timeRecord <span style=\\\"color: blue\\\">-&gt; </span>timeRecord :: acc\\n                | TimeWaitEntry timeWaitRecord <span style=\\\"color: blue\\\">-&gt; </span>timeWaitRecord :: acc\\n                | _ <span style=\\\"color: blue\\\">-&gt; </span>acc\\n      parseFileUtil tl acc\\n    | [] <span style=\\\"color: blue\\\">-&gt; </span>acc\\n  parseFileUtil lines []</pre>\\n<h3>Running the Business Logic</h3>\\n<p>Now that the contents of the file were represented neatly as a data structure, it was much easier to manipulate the data.&nbsp; For example, I could get a list of times and the number of IP addresses in a TIME_WAIT state and save this list to a CSV file.</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">open </span>System\\n<span style=\\\"color: blue\\\">open </span>System.Collections.Generic\\n<span style=\\\"color: blue\\\">open </span>System.IO\\n<span style=\\\"color: blue\\\">open </span>DataStructures\\n\\n<span style=\\\"color: blue\\\">let </span>lines = File.ReadAllLines(<span style=\\\"color: maroon\\\">\\\"out_time0.txt\\\"</span>) |&gt; Array.toList\\n<span style=\\\"color: blue\\\">let </span>items = parseFile lines\\n\\n<span style=\\\"color: green\\\">// Find the times of each TIME_WAIT record and return a tuple\\n// with the time and IP address.  Since the time was written\\n// to the file once for a set of addresses, it has to be\\n// passed into the util function as state.  The accumulator\\n// parameter exists to enable tail call optimization.\\n</span><span style=\\\"color: blue\\\">let </span>getTimeWaitTimes items =\\n  <span style=\\\"color: blue\\\">let rec </span>util items (currentTime:DateTime) acc =\\n      <span style=\\\"color: blue\\\">match </span>items <span style=\\\"color: blue\\\">with\\n      </span>| hd :: tl <span style=\\\"color: blue\\\">-&gt;\\n        let </span>currentTime = <span style=\\\"color: blue\\\">match </span>hd <span style=\\\"color: blue\\\">with\\n                          </span>| TimeRecord newTime <span style=\\\"color: blue\\\">-&gt; </span>newTime\\n                          | _ <span style=\\\"color: blue\\\">-&gt; </span>currentTime\\n\\n        <span style=\\\"color: blue\\\">let </span>acc = <span style=\\\"color: blue\\\">match </span>hd <span style=\\\"color: blue\\\">with\\n                  </span>| TimeWaitRecord (val1, val2, val3, val4, val5) <span style=\\\"color: blue\\\">-&gt;\\n                    </span>(currentTime, (val1, val2, val3, val4, val5)) :: acc\\n                  | _ <span style=\\\"color: blue\\\">-&gt; </span>acc\\n\\n        <span style=\\\"color: green\\\">//printfn \\\"Current Time %s\\\" (currentTime.ToString())\\n        </span>util tl currentTime acc\\n      | [] <span style=\\\"color: blue\\\">-&gt; </span>acc\\n  util items DateTime.MinValue []\\n\\n<span style=\\\"color: blue\\\">let </span>timeWaits = getTimeWaitTimes items\\n\\n<span style=\\\"color: green\\\">// Create a map of the number of IP addresses in a\\n// TIME_WAIT state at a give time.  The time is the key.\\n</span><span style=\\\"color: blue\\\">let </span>counts = timeWaits |&gt; List.fold (<span style=\\\"color: blue\\\">fun </span>(state:Map&lt;_,_&gt;) (time, _) <span style=\\\"color: blue\\\">-&gt;\\n                                      if </span>(state.ContainsKey(time)) <span style=\\\"color: blue\\\">then\\n                                        </span>state |&gt; Map.map\\n                                                (<span style=\\\"color: blue\\\">fun </span>k v <span style=\\\"color: blue\\\">-&gt;\\n                                                  if </span>k = time <span style=\\\"color: blue\\\">then\\n                                                    </span>v + 1\\n                                                  <span style=\\\"color: blue\\\">else </span>v)\\n                                      <span style=\\\"color: blue\\\">else\\n                                        </span>state.Add(time, 1)\\n                                    ) (Map.empty)\\n\\n<span style=\\\"color: green\\\">// Write the results to a CSV file.\\n</span><span style=\\\"color: blue\\\">let </span>file = File.CreateText(<span style=\\\"color: maroon\\\">\\\"results.csv\\\"</span>)\\nfile.WriteLine(<span style=\\\"color: maroon\\\">\\\"Time,Count\\\"</span>)\\n\\ncounts |&gt; Map.iter (<span style=\\\"color: blue\\\">fun </span>k v <span style=\\\"color: blue\\\">-&gt; </span>file.WriteLine(<span style=\\\"color: maroon\\\">\\\"{0},{1}\\\"</span>, k, v) )\\n\\nfile.Flush()\\n\\nignore(Console.ReadLine())</pre>\\n<p>You can find the full source code including unit tests <a href=\\\"https://github.com/joebuschmann/FSharpTextParsing\\\" target=\\\"_blank\\\">on GitHub</a>.</p>\\n<p>This was a simple example, but it demonstrates the power of converting the textual data to an internal representation.&nbsp; With the parsing done, the business logic comes together much easier.&nbsp; Also, the active pattern language feature in F# makes the textual analysis simpler.</p>\\n<p>Now, if I could only master regex.</p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I’ve always had a fear of parsing text.&nbsp; Strange since it’s a basic programmer’s task.&nbsp; I’ve always found it to be tedious and boring, and the resulting code is a jumbled mess of indexes and string parsing methods.&nbsp; I avoid it every chance I get.</p> <p>And there’s regex.&nbsp; The syntax is cryptic and difficult to remember.&nbsp; It’s another thing I should know well, but, again, I avoid it.</p> <p>Recently I decided to come to grips with this weakness and parse a text file containing information about TCP sockets in a TIME_WAIT status.&nbsp; It was generated by a co-worker investigating network performance.&nbsp; He wanted to get a list of IP addresses along with the amount of time they spent with a status of TIME_WAIT.&nbsp; Then he could pull it into Excel to visualize the data.</p> <p>I’ve been told that functional languages are great for parsing text, so I decided to use F#.&nbsp; While doing some research, I came to a sudden realization.&nbsp; The reason why it has always been difficult for me was I had been taking the wrong approach.&nbsp; I was intermingling the parsing code with the business logic code.&nbsp; My approach was along the lines of:&nbsp; parse a line, pull some string values from previous lines from state, run some logic for the current line, store the string values in state, and move to the next line.&nbsp; Included in the code were lots of index values into the text, helper methods, and conversions to data types like dates, integers, etc.&nbsp; All that mixed in with the business logic.&nbsp; No wonder I hated it.</p> <p>The correct approach (or at least a better one) is to convert the textual representation of the data into data structures before running any business logic.&nbsp; There should be a clear separation between the two.&nbsp; With this step, the logic becomes easier.&nbsp; There are no indexes or type conversions.&nbsp; All that’s been done, and the business logic is focused and concise.</p> <h3>The Data Structures</h3> <p>Before I could continue, I needed to understand the data represented in the file from my co-worker and map them to data structures.&nbsp; A portion of the file is below.</p><pre>Time : 2011-11-09_08:36:19\nTime : 2011-11-09_08:36:24\nTime : 2011-11-09_08:36:29\nTime : 2011-11-09_08:36:34\nTime : 2011-11-09_08:36:40\nTime : 2011-11-09_08:36:45\nTime : 2011-11-09_08:36:50\nTime : 2011-11-09_08:36:56\nTime : 2011-11-09_08:37:01\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1804&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTime :&nbsp; 2011-11-09_08:37:06\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1804&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1809&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1813&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1818&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1819&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1829&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1831&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0\nTCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1834&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</pre>\n<p>Each line was written in intervals of about 5 seconds.&nbsp; There seemed to be two types of information recorded, a timestamp and an IP address of a socket with a status of TIME_WAIT, and each needed its own data structure.&nbsp; The IP address lines were consistent in their format; however, the timestamps were not.&nbsp; Sometimes there was a line break between the “Time :” label and the value and other times they were on the same line.&nbsp; The table below breaks down each type of line format and the action to take.</p>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" width=\"587\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"429\">\n<h5>Format</h5></td>\n<td valign=\"top\" width=\"156\">\n<h5>Action</h5></td></tr>\n<tr>\n<td valign=\"top\" width=\"429\">Time : 2011-11-09_08:37:01</td>\n<td valign=\"top\" width=\"156\">Create a data structure representation</td></tr>\n<tr>\n<td valign=\"top\" width=\"429\">Time :</td>\n<td valign=\"top\" width=\"156\">Ignore</td></tr>\n<tr>\n<td valign=\"top\" width=\"429\">2011-11-09_08:37:11</td>\n<td valign=\"top\" width=\"156\">Create a data structure representation</td></tr>\n<tr>\n<td valign=\"top\" width=\"429\">TCP&nbsp;&nbsp;&nbsp; 10.28.65.14:1834&nbsp;&nbsp;&nbsp; 10.28.65.15:808&nbsp;&nbsp;&nbsp; TIME_WAIT&nbsp;&nbsp;&nbsp; 0</td>\n<td valign=\"top\" width=\"156\">Create a data structure representation</td></tr></tbody></table>\n<p>&nbsp;</p>\n<p>To represent the data, I used a discriminated union with two discriminators that store the timestamp and IP address.&nbsp; For the lines with the IP addresses, there are two addresses, and only the first one is useful because it is the one in a TIME_WAIT state.&nbsp; The remaining information is superfluous and can be discarded.</p><pre class=\"code\"><span style=\"color: blue\">type </span>LineRecord =\n| TimeRecord <span style=\"color: blue\">of </span>DateTime\n| TimeWaitRecord <span style=\"color: blue\">of </span>int * int * int * int * int</pre>\n<h3>Active Patterns</h3>\n<p>To parse each line into a LineRecord, I used an F# feature called <a href=\"http://msdn.microsoft.com/en-us/library/dd233248.aspx\" target=\"_blank\">active patterns</a> which allowed me to set up pattern matching expressions for text values just as I would for a discriminated union.&nbsp; I created four active pattern definitions.&nbsp; The first two take a string value and attempt to return a date or an IP address.&nbsp; The next two take a line of text from the file and return a LineRecord discriminator value.&nbsp; Once these were in place, writing a function to convert the text file into a list of LineRecord values became trivial.</p><pre class=\"code\"><span style=\"color: green\">// Attempt to convert a string value into a date.\n</span><span style=\"color: blue\">let </span>(|Date|_|) (input:string) =\n  <span style=\"color: blue\">let </span>(success, date) = DateTime.TryParse(input)\n  <span style=\"color: blue\">if </span>(success) <span style=\"color: blue\">then </span>Some(date)\n  <span style=\"color: blue\">else </span>None\n<p><span style=\"color: green\">// Attempt to convert a string value into an IP address<br>\n// represented by a tuple with four or five integers with<br>\n// the port being optional.<br>\n</span><span style=\"color: blue\">let </span>(|IP|_|) (input:string) =<br>\n<span style=\"color: blue\">let </span>delimChars = [|<span style=\"color: maroon\">'.'</span>; <span style=\"color: maroon\">':'</span>|]<br>\n<span style=\"color: blue\">let </span>arr = input.Split(delimChars)<br>\n<span style=\"color: blue\">match </span>arr.Length <span style=\"color: blue\">with<br>\n</span>| 4 <span style=\"color: blue\">-&gt; </span>Some((int(arr.[0]), int(arr.[1]), int(arr.[2]), int(arr.[3]), 0))<br>\n| 5 <span style=\"color: blue\">-&gt; </span>Some((int(arr.[0]), int(arr.[1]), int(arr.[2]), int(arr.[3]),<br>\nint(arr.[4])))<br>\n| _ <span style=\"color: blue\">-&gt; </span>None</p>\n<p><span style=\"color: green\">// Attempt to convert a time record.<br>\n</span><span style=\"color: blue\">let </span>(|TimeEntry|<em>|) (line:string) =<br>\n<span style=\"color: blue\">let </span>line = line.Trim().Replace(<span style=\"color: maroon\">&quot;Time : &quot;</span>, <span style=\"color: maroon\">&quot;&quot;</span>).Replace(<span style=\"color: maroon\">'</em>'</span>, <span style=\"color: maroon\">' '</span>)<br>\n<span style=\"color: blue\">match </span>line <span style=\"color: blue\">with<br>\n</span>| Date dateTime <span style=\"color: blue\">-&gt; </span>Some(TimeRecord(dateTime))<br>\n| _ <span style=\"color: blue\">-&gt; </span>None</p>\n<p><span style=\"color: green\">// Attempt to convert a TIME_WAIT record.<br>\n</span><span style=\"color: blue\">let </span>(|TimeWaitEntry|_|) (line:string) =<br>\n<span style=\"color: blue\">let </span>line = line.Replace(<span style=\"color: maroon\">&quot;TCP&quot;</span>, <span style=\"color: maroon\">&quot;&quot;</span>).Trim()<br>\n<span style=\"color: blue\">let </span>index = line.IndexOf(<span style=\"color: maroon\">' '</span>)</p>\n<p><span style=\"color: blue\">match </span>index <span style=\"color: blue\">with<br>\n</span>| -1 <span style=\"color: blue\">-&gt; </span>None<br>\n| index <span style=\"color: blue\">-&gt;<br>\nlet </span>line = line.Substring(0, index)<br>\n<span style=\"color: blue\">match </span>line <span style=\"color: blue\">with<br>\n</span>| IP (ip) <span style=\"color: blue\">-&gt; </span>Some(TimeWaitRecord ip)<br>\n| _ <span style=\"color: blue\">-&gt; </span>None</p>\n<p><span style=\"color: green\">// Parses lines from the file into a list of LineRecords.<br>\n</span><span style=\"color: blue\">let </span>parseFile lines =<br>\n<span style=\"color: blue\">let </span>lines = lines |&gt; List.rev<br>\n<span style=\"color: blue\">let rec </span>parseFileUtil lines acc =<br>\n<span style=\"color: blue\">match </span>lines <span style=\"color: blue\">with<br>\n</span>| hd :: tl <span style=\"color: blue\">-&gt;<br>\nlet </span>acc = <span style=\"color: blue\">match </span>hd <span style=\"color: blue\">with<br>\n</span>| TimeEntry timeRecord <span style=\"color: blue\">-&gt; </span>timeRecord :: acc<br>\n| TimeWaitEntry timeWaitRecord <span style=\"color: blue\">-&gt; </span>timeWaitRecord :: acc<br>\n| _ <span style=\"color: blue\">-&gt; </span>acc<br>\nparseFileUtil tl acc<br>\n| [] <span style=\"color: blue\">-&gt; </span>acc<br>\nparseFileUtil lines []</pre></p>\n<h3>Running the Business Logic</h3>\n<p>Now that the contents of the file were represented neatly as a data structure, it was much easier to manipulate the data.&nbsp; For example, I could get a list of times and the number of IP addresses in a TIME_WAIT state and save this list to a CSV file.</p><pre class=\"code\"><span style=\"color: blue\">open </span>System\n<span style=\"color: blue\">open </span>System.Collections.Generic\n<span style=\"color: blue\">open </span>System.IO\n<span style=\"color: blue\">open </span>DataStructures\n<p><span style=\"color: blue\">let </span>lines = File.ReadAllLines(<span style=\"color: maroon\">&quot;out_time0.txt&quot;</span>) |&gt; Array.toList<br>\n<span style=\"color: blue\">let </span>items = parseFile lines</p>\n<p><span style=\"color: green\">// Find the times of each TIME_WAIT record and return a tuple<br>\n// with the time and IP address.  Since the time was written<br>\n// to the file once for a set of addresses, it has to be<br>\n// passed into the util function as state.  The accumulator<br>\n// parameter exists to enable tail call optimization.<br>\n</span><span style=\"color: blue\">let </span>getTimeWaitTimes items =<br>\n<span style=\"color: blue\">let rec </span>util items (currentTime:DateTime) acc =<br>\n<span style=\"color: blue\">match </span>items <span style=\"color: blue\">with<br>\n</span>| hd :: tl <span style=\"color: blue\">-&gt;<br>\nlet </span>currentTime = <span style=\"color: blue\">match </span>hd <span style=\"color: blue\">with<br>\n</span>| TimeRecord newTime <span style=\"color: blue\">-&gt; </span>newTime<br>\n| _ <span style=\"color: blue\">-&gt; </span>currentTime</p>\n<pre><code>    &lt;span style=&quot;color: blue&quot;&gt;let &lt;/span&gt;acc = &lt;span style=&quot;color: blue&quot;&gt;match &lt;/span&gt;hd &lt;span style=&quot;color: blue&quot;&gt;with\n              &lt;/span&gt;| TimeWaitRecord (val1, val2, val3, val4, val5) &lt;span style=&quot;color: blue&quot;&gt;-&amp;gt;\n                &lt;/span&gt;(currentTime, (val1, val2, val3, val4, val5)) :: acc\n              | _ &lt;span style=&quot;color: blue&quot;&gt;-&amp;gt; &lt;/span&gt;acc\n\n    &lt;span style=&quot;color: green&quot;&gt;//printfn &quot;Current Time %s&quot; (currentTime.ToString())\n    &lt;/span&gt;util tl currentTime acc\n  | [] &lt;span style=&quot;color: blue&quot;&gt;-&amp;gt; &lt;/span&gt;acc\n</code></pre>\n<p>util items DateTime.MinValue []</p>\n<p><span style=\"color: blue\">let </span>timeWaits = getTimeWaitTimes items</p>\n<p><span style=\"color: green\">// Create a map of the number of IP addresses in a<br>\n// TIME_WAIT state at a give time.  The time is the key.<br>\n</span><span style=\"color: blue\">let </span>counts = timeWaits |&gt; List.fold (<span style=\"color: blue\">fun </span>(state:Map&lt;<em>,</em>&gt;) (time, _) <span style=\"color: blue\">-&gt;<br>\nif </span>(state.ContainsKey(time)) <span style=\"color: blue\">then<br>\n</span>state |&gt; Map.map<br>\n(<span style=\"color: blue\">fun </span>k v <span style=\"color: blue\">-&gt;<br>\nif </span>k = time <span style=\"color: blue\">then<br>\n</span>v + 1<br>\n<span style=\"color: blue\">else </span>v)<br>\n<span style=\"color: blue\">else<br>\n</span>state.Add(time, 1)<br>\n) (Map.empty)</p>\n<p><span style=\"color: green\">// Write the results to a CSV file.<br>\n</span><span style=\"color: blue\">let </span>file = File.CreateText(<span style=\"color: maroon\">&quot;results.csv&quot;</span>)<br>\nfile.WriteLine(<span style=\"color: maroon\">&quot;Time,Count&quot;</span>)</p>\n<p>counts |&gt; Map.iter (<span style=\"color: blue\">fun </span>k v <span style=\"color: blue\">-&gt; </span>file.WriteLine(<span style=\"color: maroon\">&quot;{0},{1}&quot;</span>, k, v) )</p>\n<p>file.Flush()</p>\n<p>ignore(Console.ReadLine())</pre></p>\n<p>You can find the full source code including unit tests <a href=\"https://github.com/joebuschmann/FSharpTextParsing\" target=\"_blank\">on GitHub</a>.</p>\n<p>This was a simple example, but it demonstrates the power of converting the textual data to an internal representation.&nbsp; With the parsing done, the business logic comes together much easier.&nbsp; Also, the active pattern language feature in F# makes the textual analysis simpler.</p>\n<p>Now, if I could only master regex.</p></div>","amp":"15","plaintext":"I’ve always had a fear of parsing text.  Strange since it’s a basic programmer’s\ntask.  I’ve always found it to be tedious and boring, and the resulting code is\na jumbled mess of indexes and string parsing methods.  I avoid it every chance I\nget.\n\nAnd there’s regex.  The syntax is cryptic and difficult to remember.  It’s\nanother thing I should know well, but, again, I avoid it.\n\nRecently I decided to come to grips with this weakness and parse a text file\ncontaining information about TCP sockets in a TIME_WAIT status.  It was\ngenerated by a co-worker investigating network performance.  He wanted to get a\nlist of IP addresses along with the amount of time they spent with a status of\nTIME_WAIT.  Then he could pull it into Excel to visualize the data.\n\nI’ve been told that functional languages are great for parsing text, so I\ndecided to use F#.  While doing some research, I came to a sudden realization. \nThe reason why it has always been difficult for me was I had been taking the\nwrong approach.  I was intermingling the parsing code with the business logic\ncode.  My approach was along the lines of:  parse a line, pull some string\nvalues from previous lines from state, run some logic for the current line,\nstore the string values in state, and move to the next line.  Included in the\ncode were lots of index values into the text, helper methods, and conversions to\ndata types like dates, integers, etc.  All that mixed in with the business\nlogic.  No wonder I hated it.\n\nThe correct approach (or at least a better one) is to convert the textual\nrepresentation of the data into data structures before running any business\nlogic.  There should be a clear separation between the two.  With this step, the\nlogic becomes easier.  There are no indexes or type conversions.  All that’s\nbeen done, and the business logic is focused and concise.\n\nThe Data Structures\nBefore I could continue, I needed to understand the data represented in the file\nfrom my co-worker and map them to data structures.  A portion of the file is\nbelow.\n\nTime : 2011-11-09_08:36:19\nTime : 2011-11-09_08:36:24\nTime : 2011-11-09_08:36:29\nTime : 2011-11-09_08:36:34\nTime : 2011-11-09_08:36:40\nTime : 2011-11-09_08:36:45\nTime : 2011-11-09_08:36:50\nTime : 2011-11-09_08:36:56\nTime : 2011-11-09_08:37:01\nTCP    10.28.65.14:1804       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1812       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1818       10.28.65.15:808        TIME_WAIT       0\nTime :  2011-11-09_08:37:06\nTCP    10.28.65.14:1804       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1809       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1812       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1813       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1818       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1819       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1829       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1831       10.28.65.15:808        TIME_WAIT       0\nTCP    10.28.65.14:1834       10.28.65.15:808        TIME_WAIT       0\n\nEach line was written in intervals of about 5 seconds.  There seemed to be two\ntypes of information recorded, a timestamp and an IP address of a socket with a\nstatus of TIME_WAIT, and each needed its own data structure.  The IP address\nlines were consistent in their format; however, the timestamps were not. \nSometimes there was a line break between the “Time :” label and the value and\nother times they were on the same line.  The table below breaks down each type\nof line format and the action to take.\n\nFormat\nAction\nTime : 2011-11-09_08:37:01Create a data structure representationTime :Ignore\n2011-11-09_08:37:11Create a data structure representationTCP   \n10.28.65.14:1834    10.28.65.15:808    TIME_WAIT    0Create a data structure\nrepresentation\n\nTo represent the data, I used a discriminated union with two discriminators that\nstore the timestamp and IP address.  For the lines with the IP addresses, there\nare two addresses, and only the first one is useful because it is the one in a\nTIME_WAIT state.  The remaining information is superfluous and can be discarded.\n\ntype LineRecord =\n| TimeRecord of DateTime\n| TimeWaitRecord of int * int * int * int * int\n\nActive Patterns\nTo parse each line into a LineRecord, I used an F# feature called active\npatterns [http://msdn.microsoft.com/en-us/library/dd233248.aspx]  which allowed\nme to set up pattern matching expressions for text values just as I would for a\ndiscriminated union.  I created four active pattern definitions.  The first two\ntake a string value and attempt to return a date or an IP address.  The next two\ntake a line of text from the file and return a LineRecord discriminator value. \nOnce these were in place, writing a function to convert the text file into a\nlist of LineRecord values became trivial.\n\n// Attempt to convert a string value into a date.\nlet (|Date|_|) (input:string) =\n  let (success, date) = DateTime.TryParse(input)\n  if (success) then Some(date)\n  else None\n// Attempt to convert a string value into an IP address\n\n// represented by a tuple with four or five integers with\n\n// the port being optional.\n\nlet (|IP|_|) (input:string) =\n\nlet delimChars = [|'.'; ':'|]\n\nlet arr = input.Split(delimChars)\n\nmatch arr.Length with\n\n| 4 -> Some((int(arr.[0]), int(arr.[1]), int(arr.[2]), int(arr.[3]), 0))\n\n| 5 -> Some((int(arr.[0]), int(arr.[1]), int(arr.[2]), int(arr.[3]),\n\nint(arr.[4])))\n\n| _ -> None\n\n\n// Attempt to convert a time record.\n\nlet (|TimeEntry||) (line:string) =\n\nlet line = line.Trim().Replace(\"Time : \", \"\").Replace('', ' ')\n\nmatch line with\n\n| Date dateTime -> Some(TimeRecord(dateTime))\n\n| _ -> None\n\n\n// Attempt to convert a TIME_WAIT record.\n\nlet (|TimeWaitEntry|_|) (line:string) =\n\nlet line = line.Replace(\"TCP\", \"\").Trim()\n\nlet index = line.IndexOf(' ')\n\n\nmatch index with\n\n| -1 -> None\n\n| index ->\n\nlet line = line.Substring(0, index)\n\nmatch line with\n\n| IP (ip) -> Some(TimeWaitRecord ip)\n\n| _ -> None\n\n\n// Parses lines from the file into a list of LineRecords.\n\nlet parseFile lines =\n\nlet lines = lines |> List.rev\n\nlet rec parseFileUtil lines acc =\n\nmatch lines with\n\n| hd :: tl ->\n\nlet acc = match hd with\n\n| TimeEntry timeRecord -> timeRecord :: acc\n\n| TimeWaitEntry timeWaitRecord -> timeWaitRecord :: acc\n\n| _ -> acc\n\nparseFileUtil tl acc\n\n| [] -> acc\n\nparseFileUtil lines []\n\n\n\n\n\nRunning the Business Logic\nNow that the contents of the file were represented neatly as a data structure,\nit was much easier to manipulate the data.  For example, I could get a list of\ntimes and the number of IP addresses in a TIME_WAIT state and save this list to\na CSV file.\n\nopen System\nopen System.Collections.Generic\nopen System.IO\nopen DataStructures\nlet lines = File.ReadAllLines(\"out_time0.txt\") |> Array.toList\n\nlet items = parseFile lines\n\n\n// Find the times of each TIME_WAIT record and return a tuple\n\n// with the time and IP address.  Since the time was written\n\n// to the file once for a set of addresses, it has to be\n\n// passed into the util function as state.  The accumulator\n\n// parameter exists to enable tail call optimization.\n\nlet getTimeWaitTimes items =\n\nlet rec util items (currentTime:DateTime) acc =\n\nmatch items with\n\n| hd :: tl ->\n\nlet currentTime = match hd with\n\n| TimeRecord newTime -> newTime\n\n| _ -> currentTime\n\n\n    <span style=\"color: blue\">let </span>acc = <span style=\"color: blue\">match </span>hd <span style=\"color: blue\">with\n              </span>| TimeWaitRecord (val1, val2, val3, val4, val5) <span style=\"color: blue\">-&gt;\n                </span>(currentTime, (val1, val2, val3, val4, val5)) :: acc\n              | _ <span style=\"color: blue\">-&gt; </span>acc\n\n    <span style=\"color: green\">//printfn \"Current Time %s\" (currentTime.ToString())\n    </span>util tl currentTime acc\n  | [] <span style=\"color: blue\">-&gt; </span>acc\n\n\n\nutil items DateTime.MinValue []\n\n\nlet timeWaits = getTimeWaitTimes items\n\n\n// Create a map of the number of IP addresses in a\n\n// TIME_WAIT state at a give time.  The time is the key.\n\nlet counts = timeWaits |> List.fold (fun (state:Map<,>) (time, _) ->\n\nif (state.ContainsKey(time)) then\n\nstate |> Map.map\n\n(fun k v ->\n\nif k = time then\n\nv + 1\n\nelse v)\n\nelse\n\nstate.Add(time, 1)\n\n) (Map.empty)\n\n\n// Write the results to a CSV file.\n\nlet file = File.CreateText(\"results.csv\")\n\nfile.WriteLine(\"Time,Count\")\n\n\ncounts |> Map.iter (fun k v -> file.WriteLine(\"{0},{1}\", k, v) )\n\n\nfile.Flush()\n\n\nignore(Console.ReadLine())\n\n\n\n\n\nYou can find the full source code including unit tests on GitHub\n[https://github.com/joebuschmann/FSharpTextParsing].\n\nThis was a simple example, but it demonstrates the power of converting the\ntextual data to an internal representation.  With the parsing done, the business\nlogic comes together much easier.  Also, the active pattern language feature in\nF# makes the textual analysis simpler.\n\nNow, if I could only master regex.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2012-01-15T21:02:30.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b48a","uuid":"93509c19-4b8a-4e47-8abb-23545b74a750","title":"Executing Actions Before and After Code Blocks with IDisposable","slug":"executing-actions-before-and-after-code-blocks-with-idisposable","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<p>I ran into a scenario this week where a boolean field was being flipped temporarily to modify behavior elsewhere while a block of code was executing.&nbsp; I have seen this pattern mainly in WinForms applications where data are being loaded into controls, but their events need to be suppressed during the load.&nbsp; Afterward, the events should fire normally.</p> <p>Below is an example of this scenario.&nbsp; It is a Windows form with a single combobox.&nbsp; Whenever the selected value of the combobox changes, an expensive action is executed such as a database or service call.&nbsp; During the loading of the form data, the possible values of the combobox are added, and the first item is selected.&nbsp; This causes the expensive operation to execute unnecessarily.</p><pre class=\\\"csharpcode\\\">    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">partial</span> <span class=\\\"kwrd\\\">class</span> BeforeAndAfterTest : Form\\n    {\\n        <span class=\\\"kwrd\\\">public</span> BeforeAndAfterTest()\\n        {\\n            InitializeComponent();\\n        }\\n\\n        <span class=\\\"kwrd\\\">protected</span> <span class=\\\"kwrd\\\">override</span> <span class=\\\"kwrd\\\">void</span> OnLoad(EventArgs e)\\n        {\\n            LoadComboBoxData();\\n\\n            <span class=\\\"kwrd\\\">base</span>.OnLoad(e);\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> LoadComboBoxData()\\n        {\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 1\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 2\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 3\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 4\\\"</span>);\\n\\n            comboBox.SelectedIndex = 0;\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> comboBox_SelectedIndexChanged(\\n            <span class=\\\"kwrd\\\">object</span> sender, EventArgs e)\\n        {\\n            PerformExpensiveOperation();\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> PerformExpensiveOperation()\\n        {\\n            <span class=\\\"rem\\\">// Imagine that this method performs an expensive operation</span>\\n            <span class=\\\"rem\\\">// that doesn't need to execute when the form loads.</span>\\n            MessageBox.Show(<span class=\\\"str\\\">\\\"Expensive operation.\\\"</span>);\\n        }\\n    }</pre>\\n<p>A common fix for this issue is to add a boolean flag to indicate that the event action does not need to execute.</p><pre class=\\\"csharpcode\\\">    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">partial</span> <span class=\\\"kwrd\\\">class</span> BeforeAndAfterTest : Form\\n    {\\n        <span class=\\\"highlight\\\"><span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">bool</span> _loading = <span class=\\\"kwrd\\\">false</span>;</span>\\n\\n        <span class=\\\"kwrd\\\">public</span> BeforeAndAfterTest()\\n        {\\n            InitializeComponent();\\n        }\\n\\n        <span class=\\\"kwrd\\\">protected</span> <span class=\\\"kwrd\\\">override</span> <span class=\\\"kwrd\\\">void</span> OnLoad(EventArgs e)\\n        {\\n            <span class=\\\"highlight\\\">_loading = <span class=\\\"kwrd\\\">true</span>;</span>\\n\\n            LoadComboBoxData();\\n\\n            <span class=\\\"kwrd\\\">base</span>.OnLoad(e);\\n\\n            <span class=\\\"highlight\\\">_loading = <span class=\\\"kwrd\\\">false</span>;</span>\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> LoadComboBoxData()\\n        {\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 1\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 2\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 3\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 4\\\"</span>);\\n\\n            comboBox.SelectedIndex = 0;\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> comboBox_SelectedIndexChanged(\\n            <span class=\\\"kwrd\\\">object</span> sender, EventArgs e)\\n        {\\n            <span class=\\\"highlight\\\"><span class=\\\"kwrd\\\">if</span> (_loading)</span>\\n                <span class=\\\"highlight\\\"><span class=\\\"kwrd\\\">return</span>;</span>\\n\\n            PerformExpensiveOperation();\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> PerformExpensiveOperation()\\n        {\\n            <span class=\\\"rem\\\">// Imagine that this method performs an expensive operation</span>\\n            <span class=\\\"rem\\\">// that doesn't need to execute when the form loads.</span>\\n            MessageBox.Show(<span class=\\\"str\\\">\\\"Expensive operation.\\\"</span>);\\n        }\\n    }</pre>\\n<p>This type of coding makes me nervous because a programmer could forget to wrap the updates to the boolean flag in a <em>try {} finally {}</em> block as in the previous example.&nbsp; In the case that an exception is thrown, the flag will not be reset resulting in incorrect behavior.</p>\\n<p>A nice solution is to use a class that implements <em>IDisposable</em> to update the flag before and after the block of code is run.</p><pre class=\\\"csharpcode\\\">    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> BeforeAndAfterBlock : IDisposable\\n    {\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">readonly</span> Action _before;\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">readonly</span> Action _after;\\n\\n        <span class=\\\"kwrd\\\">public</span> BeforeAndAfterBlock(Action before, Action after)\\n        {\\n            _before = before ?? <span class=\\\"kwrd\\\">delegate</span> { };\\n            _after = after ?? <span class=\\\"kwrd\\\">delegate</span> { };\\n\\n            _before();\\n        }\\n\\n        <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">void</span> Dispose()\\n        {\\n            _after();\\n        }\\n    }</pre>\\n<p>The constructor takes two actions to execute.&nbsp; One is executed immediately, and the other is executed in the <em>Dispose()</em> method.&nbsp; With the C# using statement, the code becomes clear, concise, and most importantly, safer.</p><pre class=\\\"csharpcode\\\">    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">partial</span> <span class=\\\"kwrd\\\">class</span> BeforeAndAfterTest : Form\\n    {\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">bool</span> _loading = <span class=\\\"kwrd\\\">false</span>;\\n\\n        <span class=\\\"kwrd\\\">public</span> BeforeAndAfterTest()\\n        {\\n            InitializeComponent();\\n        }\\n\\n        <span class=\\\"kwrd\\\">protected</span> <span class=\\\"kwrd\\\">override</span> <span class=\\\"kwrd\\\">void</span> OnLoad(EventArgs e)\\n        {\\n            <div class=\\\"highlight\\\">            <span class=\\\"kwrd\\\">using</span> (<span class=\\\"kwrd\\\">new</span> BeforeAndAfterBlock(\\n                () =&gt; _loading = <span class=\\\"kwrd\\\">true</span>, () =&gt; _loading = <span class=\\\"kwrd\\\">false</span>))</div>\\n            {\\n                LoadComboBoxData();\\n\\n                <span class=\\\"kwrd\\\">base</span>.OnLoad(e);\\n            }\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> LoadComboBoxData()\\n        {\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 1\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 2\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 3\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 4\\\"</span>);\\n\\n            comboBox.SelectedIndex = 0;\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> comboBox_SelectedIndexChanged(\\n            <span class=\\\"kwrd\\\">object</span> sender, EventArgs e)\\n        {\\n            <span class=\\\"kwrd\\\">if</span> (_loading)\\n                <span class=\\\"kwrd\\\">return</span>;\\n\\n            PerformExpensiveOperation();\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> PerformExpensiveOperation()\\n        {\\n            <span class=\\\"rem\\\">// Imagine that this method performs an expensive operation</span>\\n            <span class=\\\"rem\\\">// that doesn't need to execute when the form loads.</span>\\n            MessageBox.Show(<span class=\\\"str\\\">\\\"Expensive operation.\\\"</span>);\\n        }\\n    }</pre>\\n<p>For further refinement, <em>BeforeAndAfterBlock</em> could be subclassed to simplify its construction and make it easier to use in multiple locations.&nbsp; Also, instead of using a flag, the event handler could be detached from the event for the duration of the block and then re-attached.</p><pre class=\\\"csharpcode\\\">    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">partial</span> <span class=\\\"kwrd\\\">class</span> BeforeAndAfterTest : Form\\n    {\\n        <span class=\\\"kwrd\\\">public</span> BeforeAndAfterTest()\\n        {\\n            InitializeComponent();\\n        }\\n\\n        <span class=\\\"kwrd\\\">protected</span> <span class=\\\"kwrd\\\">override</span> <span class=\\\"kwrd\\\">void</span> OnLoad(EventArgs e)\\n        {\\n            <span class=\\\"highlight\\\"><span class=\\\"kwrd\\\">using</span> (<span class=\\\"kwrd\\\">new</span> LoadingBlock(<span class=\\\"kwrd\\\">this</span>))</span>\\n            {\\n                LoadComboBoxData();\\n\\n                <span class=\\\"kwrd\\\">base</span>.OnLoad(e);\\n            }\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> LoadComboBoxData()\\n        {\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 1\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 2\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 3\\\"</span>);\\n            comboBox.Items.Add(<span class=\\\"str\\\">\\\"Item 4\\\"</span>);\\n\\n            comboBox.SelectedIndex = 0;\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> comboBox_SelectedIndexChanged(\\n            <span class=\\\"kwrd\\\">object</span> sender, EventArgs e)\\n        {\\n            PerformExpensiveOperation();\\n        }\\n\\n        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">void</span> PerformExpensiveOperation()\\n        {\\n            <span class=\\\"rem\\\">// Imagine that this method performs an expensive operation</span>\\n            <span class=\\\"rem\\\">// that doesn't need to execute when the form loads.</span>\\n            MessageBox.Show(<span class=\\\"str\\\">\\\"Expensive operation.\\\"</span>);\\n        }\\n\\n        <div class=\\\"highlight\\\">        <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">class</span> LoadingBlock : BeforeAndAfterBlock\\n        {\\n            <span class=\\\"kwrd\\\">public</span> LoadingBlock(BeforeAndAfterTest form)\\n                : <span class=\\\"kwrd\\\">base</span>(() =&gt; DetachEvents(form), () =&gt; AttachEvents(form))\\n            {\\n            }\\n\\n            <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">static</span> <span class=\\\"kwrd\\\">void</span> DetachEvents(BeforeAndAfterTest form)\\n            {\\n                form.comboBox.SelectedIndexChanged -=\\n                    form.comboBox_SelectedIndexChanged;\\n            }\\n\\n            <span class=\\\"kwrd\\\">private</span> <span class=\\\"kwrd\\\">static</span> <span class=\\\"kwrd\\\">void</span> AttachEvents(BeforeAndAfterTest form)\\n            {\\n                <span class=\\\"rem\\\">// Detach first to prevent accidental double subscription.</span>\\n                form.comboBox.SelectedIndexChanged -=\\n                    form.comboBox_SelectedIndexChanged;\\n                form.comboBox.SelectedIndexChanged +=\\n                    form.comboBox_SelectedIndexChanged;\\n            }\\n        }</div>\\n    }</pre>\\n<p>Finally, I don't want to leave out my new favorite language.&nbsp; Below is an implementation of the <em>BeforeAndAfterBlock</em> class in F# along with a simple test in the console.&nbsp; Not so functional, but it works.&nbsp; Perhaps there is a way to do this with computation expressions?</p><pre class=\\\"code\\\"><span style=\\\"color: blue\\\">open </span>System\\n\\n<span style=\\\"color: blue\\\">type </span>BeforeAndAfterBlock(fBefore, fAfter) =\\n  <span style=\\\"color: blue\\\">do </span>fBefore()\\n\\n  <span style=\\\"color: blue\\\">interface </span>IDisposable <span style=\\\"color: blue\\\">with\\n    member </span>x.Dispose() = fAfter()\\n\\n<span style=\\\"color: blue\\\">let </span>fBefore = <span style=\\\"color: blue\\\">fun</span>() <span style=\\\"color: blue\\\">-&gt; </span>printfn <span style=\\\"color: maroon\\\">\\\"Before\\\"\\n</span><span style=\\\"color: blue\\\">let </span>fAfter = <span style=\\\"color: blue\\\">fun</span>() <span style=\\\"color: blue\\\">-&gt; </span>printfn <span style=\\\"color: maroon\\\">\\\"And After\\\"\\n\\n</span><span style=\\\"color: blue\\\">let </span>testBlockWithType() =\\n  <span style=\\\"color: blue\\\">use </span>printMessageBlock = <span style=\\\"color: blue\\\">new </span>BeforeAndAfterBlock(fBefore, fAfter)\\n  printfn <span style=\\\"color: maroon\\\">\\\"Middle\\\"\\n\\n</span>testBlockWithType()\\n\\nignore(Console.ReadLine())</pre>\\n<p>So that's it.&nbsp; A pretty cool and non-standard way of using <em>IDisposable</em> and the using statement.</p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I ran into a scenario this week where a boolean field was being flipped temporarily to modify behavior elsewhere while a block of code was executing.&nbsp; I have seen this pattern mainly in WinForms applications where data are being loaded into controls, but their events need to be suppressed during the load.&nbsp; Afterward, the events should fire normally.</p> <p>Below is an example of this scenario.&nbsp; It is a Windows form with a single combobox.&nbsp; Whenever the selected value of the combobox changes, an expensive action is executed such as a database or service call.&nbsp; During the loading of the form data, the possible values of the combobox are added, and the first item is selected.&nbsp; This causes the expensive operation to execute unnecessarily.</p><pre class=\"csharpcode\">    <span class=\"kwrd\">public</span> <span class=\"kwrd\">partial</span> <span class=\"kwrd\">class</span> BeforeAndAfterTest : Form\n    {\n        <span class=\"kwrd\">public</span> BeforeAndAfterTest()\n        {\n            InitializeComponent();\n        }\n<pre><code>    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; OnLoad(EventArgs e)\n    {\n        LoadComboBoxData();\n\n        &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;.OnLoad(e);\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; LoadComboBoxData()\n    {\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 1&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 2&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 3&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 4&quot;&lt;/span&gt;);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; comboBox_SelectedIndexChanged(\n        &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e)\n    {\n        PerformExpensiveOperation();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; PerformExpensiveOperation()\n    {\n        &lt;span class=&quot;rem&quot;&gt;// Imagine that this method performs an expensive operation&lt;/span&gt;\n        &lt;span class=&quot;rem&quot;&gt;// that doesn't need to execute when the form loads.&lt;/span&gt;\n        MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&quot;Expensive operation.&quot;&lt;/span&gt;);\n    }\n}&lt;/pre&gt;\n</code></pre>\n<p>A common fix for this issue is to add a boolean flag to indicate that the event action does not need to execute.</p><pre class=\"csharpcode\">    <span class=\"kwrd\">public</span> <span class=\"kwrd\">partial</span> <span class=\"kwrd\">class</span> BeforeAndAfterTest : Form\n    {\n        <span class=\"highlight\"><span class=\"kwrd\">private</span> <span class=\"kwrd\">bool</span> _loading = <span class=\"kwrd\">false</span>;</span>\n<pre><code>    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; BeforeAndAfterTest()\n    {\n        InitializeComponent();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; OnLoad(EventArgs e)\n    {\n        &lt;span class=&quot;highlight&quot;&gt;_loading = &lt;span class=&quot;kwrd&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;\n\n        LoadComboBoxData();\n\n        &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;.OnLoad(e);\n\n        &lt;span class=&quot;highlight&quot;&gt;_loading = &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; LoadComboBoxData()\n    {\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 1&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 2&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 3&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 4&quot;&lt;/span&gt;);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; comboBox_SelectedIndexChanged(\n        &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e)\n    {\n        &lt;span class=&quot;highlight&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (_loading)&lt;/span&gt;\n            &lt;span class=&quot;highlight&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;\n\n        PerformExpensiveOperation();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; PerformExpensiveOperation()\n    {\n        &lt;span class=&quot;rem&quot;&gt;// Imagine that this method performs an expensive operation&lt;/span&gt;\n        &lt;span class=&quot;rem&quot;&gt;// that doesn't need to execute when the form loads.&lt;/span&gt;\n        MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&quot;Expensive operation.&quot;&lt;/span&gt;);\n    }\n}&lt;/pre&gt;\n</code></pre>\n<p>This type of coding makes me nervous because a programmer could forget to wrap the updates to the boolean flag in a <em>try {} finally {}</em> block as in the previous example.&nbsp; In the case that an exception is thrown, the flag will not be reset resulting in incorrect behavior.</p>\n<p>A nice solution is to use a class that implements <em>IDisposable</em> to update the flag before and after the block of code is run.</p><pre class=\"csharpcode\">    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> BeforeAndAfterBlock : IDisposable\n    {\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Action _before;\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Action _after;\n<pre><code>    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; BeforeAndAfterBlock(Action before, Action after)\n    {\n        _before = before ?? &lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt; { };\n        _after = after ?? &lt;span class=&quot;kwrd&quot;&gt;delegate&lt;/span&gt; { };\n\n        _before();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Dispose()\n    {\n        _after();\n    }\n}&lt;/pre&gt;\n</code></pre>\n<p>The constructor takes two actions to execute.&nbsp; One is executed immediately, and the other is executed in the <em>Dispose()</em> method.&nbsp; With the C# using statement, the code becomes clear, concise, and most importantly, safer.</p><pre class=\"csharpcode\">    <span class=\"kwrd\">public</span> <span class=\"kwrd\">partial</span> <span class=\"kwrd\">class</span> BeforeAndAfterTest : Form\n    {\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">bool</span> _loading = <span class=\"kwrd\">false</span>;\n<pre><code>    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; BeforeAndAfterTest()\n    {\n        InitializeComponent();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; OnLoad(EventArgs e)\n    {\n        &lt;div class=&quot;highlight&quot;&gt;            &lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; BeforeAndAfterBlock(\n            () =&amp;gt; _loading = &lt;span class=&quot;kwrd&quot;&gt;true&lt;/span&gt;, () =&amp;gt; _loading = &lt;span class=&quot;kwrd&quot;&gt;false&lt;/span&gt;))&lt;/div&gt;\n        {\n            LoadComboBoxData();\n\n            &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;.OnLoad(e);\n        }\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; LoadComboBoxData()\n    {\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 1&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 2&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 3&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 4&quot;&lt;/span&gt;);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; comboBox_SelectedIndexChanged(\n        &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e)\n    {\n        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (_loading)\n            &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt;;\n\n        PerformExpensiveOperation();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; PerformExpensiveOperation()\n    {\n        &lt;span class=&quot;rem&quot;&gt;// Imagine that this method performs an expensive operation&lt;/span&gt;\n        &lt;span class=&quot;rem&quot;&gt;// that doesn't need to execute when the form loads.&lt;/span&gt;\n        MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&quot;Expensive operation.&quot;&lt;/span&gt;);\n    }\n}&lt;/pre&gt;\n</code></pre>\n<p>For further refinement, <em>BeforeAndAfterBlock</em> could be subclassed to simplify its construction and make it easier to use in multiple locations.&nbsp; Also, instead of using a flag, the event handler could be detached from the event for the duration of the block and then re-attached.</p><pre class=\"csharpcode\">    <span class=\"kwrd\">public</span> <span class=\"kwrd\">partial</span> <span class=\"kwrd\">class</span> BeforeAndAfterTest : Form\n    {\n        <span class=\"kwrd\">public</span> BeforeAndAfterTest()\n        {\n            InitializeComponent();\n        }\n<pre><code>    &lt;span class=&quot;kwrd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; OnLoad(EventArgs e)\n    {\n        &lt;span class=&quot;highlight&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; LoadingBlock(&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;))&lt;/span&gt;\n        {\n            LoadComboBoxData();\n\n            &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;.OnLoad(e);\n        }\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; LoadComboBoxData()\n    {\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 1&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 2&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 3&quot;&lt;/span&gt;);\n        comboBox.Items.Add(&lt;span class=&quot;str&quot;&gt;&quot;Item 4&quot;&lt;/span&gt;);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; comboBox_SelectedIndexChanged(\n        &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e)\n    {\n        PerformExpensiveOperation();\n    }\n\n    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; PerformExpensiveOperation()\n    {\n        &lt;span class=&quot;rem&quot;&gt;// Imagine that this method performs an expensive operation&lt;/span&gt;\n        &lt;span class=&quot;rem&quot;&gt;// that doesn't need to execute when the form loads.&lt;/span&gt;\n        MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&quot;Expensive operation.&quot;&lt;/span&gt;);\n    }\n\n    &lt;div class=&quot;highlight&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; LoadingBlock : BeforeAndAfterBlock\n    {\n        &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; LoadingBlock(BeforeAndAfterTest form)\n            : &lt;span class=&quot;kwrd&quot;&gt;base&lt;/span&gt;(() =&amp;gt; DetachEvents(form), () =&amp;gt; AttachEvents(form))\n        {\n        }\n\n        &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; DetachEvents(BeforeAndAfterTest form)\n        {\n            form.comboBox.SelectedIndexChanged -=\n                form.comboBox_SelectedIndexChanged;\n        }\n\n        &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; AttachEvents(BeforeAndAfterTest form)\n        {\n            &lt;span class=&quot;rem&quot;&gt;// Detach first to prevent accidental double subscription.&lt;/span&gt;\n            form.comboBox.SelectedIndexChanged -=\n                form.comboBox_SelectedIndexChanged;\n            form.comboBox.SelectedIndexChanged +=\n                form.comboBox_SelectedIndexChanged;\n        }\n    }&lt;/div&gt;\n}&lt;/pre&gt;\n</code></pre>\n<p>Finally, I don't want to leave out my new favorite language.&nbsp; Below is an implementation of the <em>BeforeAndAfterBlock</em> class in F# along with a simple test in the console.&nbsp; Not so functional, but it works.&nbsp; Perhaps there is a way to do this with computation expressions?</p><pre class=\"code\"><span style=\"color: blue\">open </span>System\n<p><span style=\"color: blue\">type </span>BeforeAndAfterBlock(fBefore, fAfter) =<br>\n<span style=\"color: blue\">do </span>fBefore()</p>\n<p><span style=\"color: blue\">interface </span>IDisposable <span style=\"color: blue\">with<br>\nmember </span>x.Dispose() = fAfter()</p>\n<p><span style=\"color: blue\">let </span>fBefore = <span style=\"color: blue\">fun</span>() <span style=\"color: blue\">-&gt; </span>printfn <span style=\"color: maroon\">&quot;Before&quot;<br>\n</span><span style=\"color: blue\">let </span>fAfter = <span style=\"color: blue\">fun</span>() <span style=\"color: blue\">-&gt; </span>printfn <span style=\"color: maroon\">&quot;And After&quot;</p>\n<p></span><span style=\"color: blue\">let </span>testBlockWithType() =<br>\n<span style=\"color: blue\">use </span>printMessageBlock = <span style=\"color: blue\">new </span>BeforeAndAfterBlock(fBefore, fAfter)<br>\nprintfn <span style=\"color: maroon\">&quot;Middle&quot;</p>\n<p></span>testBlockWithType()</p>\n<p>ignore(Console.ReadLine())</pre></p>\n<p>So that's it.&nbsp; A pretty cool and non-standard way of using <em>IDisposable</em> and the using statement.</p></div>","amp":"16","plaintext":"I ran into a scenario this week where a boolean field was being flipped\ntemporarily to modify behavior elsewhere while a block of code was executing.  I\nhave seen this pattern mainly in WinForms applications where data are being\nloaded into controls, but their events need to be suppressed during the load. \nAfterward, the events should fire normally.\n\nBelow is an example of this scenario.  It is a Windows form with a single\ncombobox.  Whenever the selected value of the combobox changes, an expensive\naction is executed such as a database or service call.  During the loading of\nthe form data, the possible values of the combobox are added, and the first item\nis selected.  This causes the expensive operation to execute unnecessarily.\n\n    public partial class BeforeAndAfterTest : Form\n    {\n        public BeforeAndAfterTest()\n        {\n            InitializeComponent();\n        }\n    <span class=\"kwrd\">protected</span> <span class=\"kwrd\">override</span> <span class=\"kwrd\">void</span> OnLoad(EventArgs e)\n    {\n        LoadComboBoxData();\n\n        <span class=\"kwrd\">base</span>.OnLoad(e);\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> LoadComboBoxData()\n    {\n        comboBox.Items.Add(<span class=\"str\">\"Item 1\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 2\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 3\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 4\"</span>);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> comboBox_SelectedIndexChanged(\n        <span class=\"kwrd\">object</span> sender, EventArgs e)\n    {\n        PerformExpensiveOperation();\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> PerformExpensiveOperation()\n    {\n        <span class=\"rem\">// Imagine that this method performs an expensive operation</span>\n        <span class=\"rem\">// that doesn't need to execute when the form loads.</span>\n        MessageBox.Show(<span class=\"str\">\"Expensive operation.\"</span>);\n    }\n}</pre>\n\n\n\nA common fix for this issue is to add a boolean flag to indicate that the event action does not need to execute.\n\n    public partial class BeforeAndAfterTest : Form\n    {\n        private bool _loading = false;\n    <span class=\"kwrd\">public</span> BeforeAndAfterTest()\n    {\n        InitializeComponent();\n    }\n\n    <span class=\"kwrd\">protected</span> <span class=\"kwrd\">override</span> <span class=\"kwrd\">void</span> OnLoad(EventArgs e)\n    {\n        <span class=\"highlight\">_loading = <span class=\"kwrd\">true</span>;</span>\n\n        LoadComboBoxData();\n\n        <span class=\"kwrd\">base</span>.OnLoad(e);\n\n        <span class=\"highlight\">_loading = <span class=\"kwrd\">false</span>;</span>\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> LoadComboBoxData()\n    {\n        comboBox.Items.Add(<span class=\"str\">\"Item 1\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 2\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 3\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 4\"</span>);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> comboBox_SelectedIndexChanged(\n        <span class=\"kwrd\">object</span> sender, EventArgs e)\n    {\n        <span class=\"highlight\"><span class=\"kwrd\">if</span> (_loading)</span>\n            <span class=\"highlight\"><span class=\"kwrd\">return</span>;</span>\n\n        PerformExpensiveOperation();\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> PerformExpensiveOperation()\n    {\n        <span class=\"rem\">// Imagine that this method performs an expensive operation</span>\n        <span class=\"rem\">// that doesn't need to execute when the form loads.</span>\n        MessageBox.Show(<span class=\"str\">\"Expensive operation.\"</span>);\n    }\n}</pre>\n\n\n\nThis type of coding makes me nervous because a programmer could forget to wrap the updates to the boolean flag in a try {} finally {} block as in the previous example.  In the case that an exception is thrown, the flag will not be reset resulting in incorrect behavior.\n\n\nA nice solution is to use a class that implements IDisposable to update the flag before and after the block of code is run.\n\n    public class BeforeAndAfterBlock : IDisposable\n    {\n        private readonly Action _before;\n        private readonly Action _after;\n    <span class=\"kwrd\">public</span> BeforeAndAfterBlock(Action before, Action after)\n    {\n        _before = before ?? <span class=\"kwrd\">delegate</span> { };\n        _after = after ?? <span class=\"kwrd\">delegate</span> { };\n\n        _before();\n    }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Dispose()\n    {\n        _after();\n    }\n}</pre>\n\n\n\nThe constructor takes two actions to execute.  One is executed immediately, and the other is executed in the Dispose() method.  With the C# using statement, the code becomes clear, concise, and most importantly, safer.\n\n    public partial class BeforeAndAfterTest : Form\n    {\n        private bool _loading = false;\n    <span class=\"kwrd\">public</span> BeforeAndAfterTest()\n    {\n        InitializeComponent();\n    }\n\n    <span class=\"kwrd\">protected</span> <span class=\"kwrd\">override</span> <span class=\"kwrd\">void</span> OnLoad(EventArgs e)\n    {\n        <div class=\"highlight\">            <span class=\"kwrd\">using</span> (<span class=\"kwrd\">new</span> BeforeAndAfterBlock(\n            () =&gt; _loading = <span class=\"kwrd\">true</span>, () =&gt; _loading = <span class=\"kwrd\">false</span>))</div>\n        {\n            LoadComboBoxData();\n\n            <span class=\"kwrd\">base</span>.OnLoad(e);\n        }\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> LoadComboBoxData()\n    {\n        comboBox.Items.Add(<span class=\"str\">\"Item 1\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 2\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 3\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 4\"</span>);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> comboBox_SelectedIndexChanged(\n        <span class=\"kwrd\">object</span> sender, EventArgs e)\n    {\n        <span class=\"kwrd\">if</span> (_loading)\n            <span class=\"kwrd\">return</span>;\n\n        PerformExpensiveOperation();\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> PerformExpensiveOperation()\n    {\n        <span class=\"rem\">// Imagine that this method performs an expensive operation</span>\n        <span class=\"rem\">// that doesn't need to execute when the form loads.</span>\n        MessageBox.Show(<span class=\"str\">\"Expensive operation.\"</span>);\n    }\n}</pre>\n\n\n\nFor further refinement, BeforeAndAfterBlock could be subclassed to simplify its construction and make it easier to use in multiple locations.  Also, instead of using a flag, the event handler could be detached from the event for the duration of the block and then re-attached.\n\n    public partial class BeforeAndAfterTest : Form\n    {\n        public BeforeAndAfterTest()\n        {\n            InitializeComponent();\n        }\n    <span class=\"kwrd\">protected</span> <span class=\"kwrd\">override</span> <span class=\"kwrd\">void</span> OnLoad(EventArgs e)\n    {\n        <span class=\"highlight\"><span class=\"kwrd\">using</span> (<span class=\"kwrd\">new</span> LoadingBlock(<span class=\"kwrd\">this</span>))</span>\n        {\n            LoadComboBoxData();\n\n            <span class=\"kwrd\">base</span>.OnLoad(e);\n        }\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> LoadComboBoxData()\n    {\n        comboBox.Items.Add(<span class=\"str\">\"Item 1\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 2\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 3\"</span>);\n        comboBox.Items.Add(<span class=\"str\">\"Item 4\"</span>);\n\n        comboBox.SelectedIndex = 0;\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> comboBox_SelectedIndexChanged(\n        <span class=\"kwrd\">object</span> sender, EventArgs e)\n    {\n        PerformExpensiveOperation();\n    }\n\n    <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> PerformExpensiveOperation()\n    {\n        <span class=\"rem\">// Imagine that this method performs an expensive operation</span>\n        <span class=\"rem\">// that doesn't need to execute when the form loads.</span>\n        MessageBox.Show(<span class=\"str\">\"Expensive operation.\"</span>);\n    }\n\n    <div class=\"highlight\">        <span class=\"kwrd\">private</span> <span class=\"kwrd\">class</span> LoadingBlock : BeforeAndAfterBlock\n    {\n        <span class=\"kwrd\">public</span> LoadingBlock(BeforeAndAfterTest form)\n            : <span class=\"kwrd\">base</span>(() =&gt; DetachEvents(form), () =&gt; AttachEvents(form))\n        {\n        }\n\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">void</span> DetachEvents(BeforeAndAfterTest form)\n        {\n            form.comboBox.SelectedIndexChanged -=\n                form.comboBox_SelectedIndexChanged;\n        }\n\n        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">void</span> AttachEvents(BeforeAndAfterTest form)\n        {\n            <span class=\"rem\">// Detach first to prevent accidental double subscription.</span>\n            form.comboBox.SelectedIndexChanged -=\n                form.comboBox_SelectedIndexChanged;\n            form.comboBox.SelectedIndexChanged +=\n                form.comboBox_SelectedIndexChanged;\n        }\n    }</div>\n}</pre>\n\n\n\nFinally, I don't want to leave out my new favorite language.  Below is an implementation of the BeforeAndAfterBlock class in F# along with a simple test in the console.  Not so functional, but it works.  Perhaps there is a way to do this with computation expressions?\n\nopen System\ntype BeforeAndAfterBlock(fBefore, fAfter) =\n\ndo fBefore()\n\n\ninterface IDisposable with\n\nmember x.Dispose() = fAfter()\n\n\nlet fBefore = fun() -> printfn \"Before\"\n\nlet fAfter = fun() -> printfn \"And After\"\n\n\nlet testBlockWithType() =\n\nuse printMessageBlock = new BeforeAndAfterBlock(fBefore, fAfter)\n\nprintfn \"Middle\"\n\n\ntestBlockWithType()\n\n\nignore(Console.ReadLine())\n\n\n\n\n\n\nSo that's it.  A pretty cool and non-standard way of using IDisposable and the using statement.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2012-02-14T21:06:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b48b","uuid":"0db5dd9c-b2eb-4d79-aa66-673bc9fd1d6c","title":"Lessons from the Past Year","slug":"lessons-from-the-past-year","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"As 2012 comes to a close, it's time to look back on some of the things I've learned. During the past year, my focus has been on enterprise service development, and thanks to a talented software architect and co-worker <a href=\\\"http://blog.kellybrownsberger.com/\\\" target=\\\"_blank\\\">Kelly Brownsberger</a>, I feel much more confident with my development skills. Together we focused on re-architecting and refactoring large portions of an ordering service. Now, looking back, three lessons in particular have stuck with me and changed the way I develop software.\\r\\n\\r\\nThey are 1) encapsulate operations vertically not horizontally, 2) everything's a service, and 3) separate contract classes from business logic classes. In the remainder of this blog post I expand on these ideas and try to explain why they have made such an impression.\\r\\n<h3>Encapsulate Operations Vertically Not Horizontally</h3>\\r\\nFor web service implementations, encapsulation at the operation level (vertically) rather than at the service level (horizontally) seems to work better over the long run. Having an implementation class per operation makes refactoring, unit testing, and reuse much easier.\\r\\n\\r\\nFor example, let's say a hypothetical product ordering service implemented with WCF has a contract IOrderService with several operations and an implementing class OrderService. Most developers would immediately start implementing the service in the OrderService class. Over time OrderService would continue to accumulate implementing code with common code among the operations separated out into private methods or separate classes. Eventually it evolves into a bulky god class. The operations become hard to unit test because it's difficult to know which methods, fields, or private members a particular operation needs. I've seen this happen several times where I work.\\r\\n<pre class=\\\"csharpcode\\\">[ServiceContract]\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">interface</span> IOrderService\\r\\n{\\r\\n    [OperationContract]\\r\\n    InitiateOrderResponse InitiateOrder(\\r\\n        InitiateOrderRequest request);\\r\\n\\r\\n    [OperationContract]\\r\\n    CommitOrderResponse CommitOrder(\\r\\n        CommitOrderRequest request);\\r\\n\\r\\n    [OperationContract]\\r\\n    AddProductToOrderResponse AddProductToOrder(\\r\\n        AddProductToOrderRequest request);\\r\\n\\r\\n    [OperationContract]\\r\\n    RemoveProductFromOrderResponse RemoveProductFromOrder(\\r\\n        RemoveProductFromOrderRequest request);\\r\\n}\\r\\n\\r\\n[ServiceBehavior]\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> OrderService : IOrderService\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> InitiateOrderResponse InitiateOrder(\\r\\n        InitiateOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Lots of implementing code here.</span>\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> CommitOrderResponse CommitOrder(\\r\\n        CommitOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Lots of implementing code here.</span>\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> AddProductToOrderResponse AddProductToOrder(\\r\\n        AddProductToOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Lots of implementing code here.</span>\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> RemoveProductFromOrderResponse RemoveProductFromOrder(\\r\\n        RemoveProductFromOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Lots of implementing code here.</span>\\r\\n    }\\r\\n}</pre>\\r\\nAs an alternative, this service could be implemented with a class per operation. Each method simply creates an instance of the operation (or retrieves it from a container like Windsor) and executes it. Any common code between the operations can be pulled out into a separate class. For example, they all may return a shopping cart with the latest view of the order. The cart generation code can be encapsulated into the GetShoppingCartTask class and shared among the operations.\\r\\n\\r\\nThis setup is much easier to follow and unit test. Each operation contains just the code it needs to do its job (<a href=\\\"http://en.wikipedia.org/wiki/Single_responsibility_principle\\\" target=\\\"_blank\\\">Single Responsibility Principle</a>).\\r\\n\\r\\nAlso, the operations are also easier to compose. The InitiateOrder operation may take one or more initial products and can simply invoke the AddProductToOrderOperation class to add them to the order.\\r\\n<pre class=\\\"csharpcode\\\">[ServiceContract]\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">interface</span> IOrderService\\r\\n{\\r\\n    [OperationContract]\\r\\n    InitiateOrderResponse InitiateOrder(\\r\\n        InitiateOrderRequest request);\\r\\n\\r\\n    [OperationContract]\\r\\n    CommitOrderResponse CommitOrder(\\r\\n        CommitOrderRequest request);\\r\\n\\r\\n    [OperationContract]\\r\\n    AddProductToOrderResponse AddProductToOrder(\\r\\n        AddProductToOrderRequest request);\\r\\n\\r\\n    [OperationContract]\\r\\n    RemoveProductFromOrderResponse RemoveProductFromOrder(\\r\\n        RemoveProductFromOrderRequest request);\\r\\n}\\r\\n\\r\\n[ServiceBehavior]\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> OrderService : IOrderService\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> InitiateOrderResponse InitiateOrder(\\r\\n        InitiateOrderRequest request)\\r\\n    {\\r\\n        var operation = <span class=\\\"kwrd\\\">new</span> InitiateOrderOperation();\\r\\n        <span class=\\\"kwrd\\\">return</span> operation.Execute(request);\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> CommitOrderResponse CommitOrder(\\r\\n        CommitOrderRequest request)\\r\\n    {\\r\\n        var operation = <span class=\\\"kwrd\\\">new</span> CommitOrderOperation();\\r\\n        <span class=\\\"kwrd\\\">return</span> operation.Execute(request);\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> AddProductToOrderResponse AddProductToOrder(\\r\\n        AddProductToOrderRequest request)\\r\\n    {\\r\\n        var operation = <span class=\\\"kwrd\\\">new</span> AddProductToOrderOperation();\\r\\n        <span class=\\\"kwrd\\\">return</span> operation.Execute(request);\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> RemoveProductFromOrderResponse RemoveProductFromOrder(\\r\\n        RemoveProductFromOrderRequest request)\\r\\n    {\\r\\n        var operation = <span class=\\\"kwrd\\\">new</span> RemoveProductFromOrderOperation();\\r\\n        <span class=\\\"kwrd\\\">return</span> operation.Execute(request);\\r\\n    }\\r\\n}\\r\\n\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> RemoveProductFromOrderOperation\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> RemoveProductFromOrderResponse Execute(\\r\\n        RemoveProductFromOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Implementation here.</span>\\r\\n    }\\r\\n}\\r\\n\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> AddProductToOrderOperation\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> AddProductToOrderResponse Execute(\\r\\n        AddProductToOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Implementation here.</span>\\r\\n    }\\r\\n}\\r\\n\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> CommitOrderOperation\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> CommitOrderResponse Execute(\\r\\n        CommitOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Implementation here.</span>\\r\\n    }\\r\\n}\\r\\n\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> InitiateOrderOperation\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> InitiateOrderResponse Execute(\\r\\n        InitiateOrderRequest request)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Implementation here.</span>\\r\\n    }\\r\\n}</pre>\\r\\n<h3>Everything's a Service</h3>\\r\\nMost web services I've seen implement a standard <a href=\\\"http://en.wikipedia.org/wiki/Data_transfer_object\\\" target=\\\"_blank\\\">Data Transfer Object (DTO)</a> pattern for their operations utilizing request and response DTOs or messages. The request message contains all of the information necessary for the operation to do its job, and the response message contains all of the operation's output. The behavior of a message class is limited to retrieving and saving its own data.\\r\\n\\r\\nDTOs make unit testing much easier by increasing the visibility into what the operation does. Everything it needs to execute comes in the request, and the data the test needs to verify is returned in the response.\\r\\n\\r\\nThis works well for operations, so I thought why not use this pattern for business objects as well? Essentially each class can be treated like a service with its own well-defined contract and messages. Taking this idea even further, each public method could become stateless as private data members are moved to the request/response classes.\\r\\n\\r\\nAbout two years ago I started converting business objects over to this pattern in one of my company's large web services. I even updated private methods to remove dependencies on class fields. Instead each method received these values as arguments. This year I continued this process, and it has worked very well. The guts of the service are now more unit testable and composable.\\r\\n<h3>Separate Contract Classes from Business Logic Classes</h3>\\r\\nI like to create a strict separation between service contract classes and implementation classes, and I'm accustomed to putting contract classes into their own assembly. Occasionally, I'll notice an implementation specific detail in the contract.  Sometimes it's a simple field to hold some temporary data.  Other times it's one or more methods with internal state. This drives me crazy because it becomes difficult to determine which data consuming clients are dependent on.\\r\\n\\r\\nBelow is an example of what I mean. It is based on something I came across recently. ShoppingCartItem is a contract class for a WCF service. It exposes Name and Price as data members. Two additional properties IsDiscountIncludedInPrice and IsPenaltyIncludedInPrice are ignored by the data contract serializer as instructed by the XmlIgnore attribute.  The presence of this attribute in a contract class is a clear code smell. To make matters worse, a couple of methods have been added.\\r\\n<pre class=\\\"csharpcode\\\">[DataContract]\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> ShoppingCartItem\\r\\n{\\r\\n    [DataMember]\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> Name { get; set; }\\r\\n\\r\\n    [DataMember]\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> Price { get; set; }\\r\\n\\r\\n    [XmlIgnore]\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> IsDiscountIncludedInPrice { get; set; }\\r\\n\\r\\n    [XmlIgnore]\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> IsPenaltyIncludedInPrice { get; set; }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">void</span> AddDiscount(Disount discount)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Logic to update the price with a discount.</span>\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">void</span> AddPenalty(Penalty penalty)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Logic to update the price with a monetary penalty.</span>\\r\\n    }\\r\\n}</pre>\\r\\nTo fix this, I did three things. First, I created a class called ShoppingCartItemImp (a terrible name I know) with all of ShoppingCartItem's members. Next, I removed the members in ShoppingCartItem that are not a part of the contract. Finally, I added a method to ShoppingCartItemImp that returns an instance of ShoppingCartItem.\\r\\n\\r\\nThe result is a new class whose implementation can change as the service logic evolves and a contract class free of implementation details.\\r\\n<pre class=\\\"csharpcode\\\">[DataContract]\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> ShoppingCartItem\\r\\n{\\r\\n    [DataMember]\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> Name { get; set; }\\r\\n\\r\\n    [DataMember]\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> Price { get; set; }\\r\\n}\\r\\n\\r\\n<span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">class</span> ShoppingCartItemImp\\r\\n{\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> Name { get; set; }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">string</span> Price { get; set; }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> IsDiscountIncludedInPrice { get; set; }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">bool</span> IsPenaltyIncludedInPrice { get; set; }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> ShoppingCartItem ToShoppingCartItem()\\r\\n    {\\r\\n        <span class=\\\"kwrd\\\">return</span> <span class=\\\"kwrd\\\">new</span> ShoppingCartItem()\\r\\n            {\\r\\n                Name = <span class=\\\"kwrd\\\">this</span>.Name,\\r\\n                Price = <span class=\\\"kwrd\\\">this</span>.Price\\r\\n            };\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">void</span> AddDiscount(\\r\\n        ShoppingCartItemImp shoppingCartItemImp,\\r\\n        Disount discount)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Logic to update the price with a discount.</span>\\r\\n    }\\r\\n\\r\\n    <span class=\\\"kwrd\\\">public</span> <span class=\\\"kwrd\\\">void</span> AddPenalty(\\r\\n        ShoppingCartItemImp shoppingCartItemImp,\\r\\n        Penalty penalty)\\r\\n    {\\r\\n        <span class=\\\"rem\\\">// Logic to update the price with a monetary penalty.</span>\\r\\n    }\\r\\n}</pre>\\r\\n<h3>Onward to 2013...</h3>\\r\\nThese are not the only lessons I've learned but the ones that have made the biggest impression. Others include decoupling logic with an event bus, finally getting comfortable with containers, and favoring automated tests over a UI for testing.\\r\\n\\r\\nHere's hoping to an equally productive 2013.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>As 2012 comes to a close, it's time to look back on some of the things I've learned. During the past year, my focus has been on enterprise service development, and thanks to a talented software architect and co-worker <a href=\"http://blog.kellybrownsberger.com/\" target=\"_blank\">Kelly Brownsberger</a>, I feel much more confident with my development skills. Together we focused on re-architecting and refactoring large portions of an ordering service. Now, looking back, three lessons in particular have stuck with me and changed the way I develop software.</p>\n<p>They are 1) encapsulate operations vertically not horizontally, 2) everything's a service, and 3) separate contract classes from business logic classes. In the remainder of this blog post I expand on these ideas and try to explain why they have made such an impression.</p>\n<h3>Encapsulate Operations Vertically Not Horizontally</h3>\nFor web service implementations, encapsulation at the operation level (vertically) rather than at the service level (horizontally) seems to work better over the long run. Having an implementation class per operation makes refactoring, unit testing, and reuse much easier.\n<p>For example, let's say a hypothetical product ordering service implemented with WCF has a contract IOrderService with several operations and an implementing class OrderService. Most developers would immediately start implementing the service in the OrderService class. Over time OrderService would continue to accumulate implementing code with common code among the operations separated out into private methods or separate classes. Eventually it evolves into a bulky god class. The operations become hard to unit test because it's difficult to know which methods, fields, or private members a particular operation needs. I've seen this happen several times where I work.</p>\n<pre class=\"csharpcode\">[ServiceContract]\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> IOrderService\n{\n    [OperationContract]\n    InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request);\n\n    [OperationContract]\n    CommitOrderResponse CommitOrder(\n        CommitOrderRequest request);\n\n    [OperationContract]\n    AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request);\n\n    [OperationContract]\n    RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request);\n}\n\n[ServiceBehavior]\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> OrderService : IOrderService\n{\n    <span class=\"kwrd\">public</span> InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request)\n    {\n        <span class=\"rem\">// Lots of implementing code here.</span>\n    }\n\n    <span class=\"kwrd\">public</span> CommitOrderResponse CommitOrder(\n        CommitOrderRequest request)\n    {\n        <span class=\"rem\">// Lots of implementing code here.</span>\n    }\n\n    <span class=\"kwrd\">public</span> AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request)\n    {\n        <span class=\"rem\">// Lots of implementing code here.</span>\n    }\n\n    <span class=\"kwrd\">public</span> RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request)\n    {\n        <span class=\"rem\">// Lots of implementing code here.</span>\n    }\n}</pre>\n<p>As an alternative, this service could be implemented with a class per operation. Each method simply creates an instance of the operation (or retrieves it from a container like Windsor) and executes it. Any common code between the operations can be pulled out into a separate class. For example, they all may return a shopping cart with the latest view of the order. The cart generation code can be encapsulated into the GetShoppingCartTask class and shared among the operations.</p>\n<p>This setup is much easier to follow and unit test. Each operation contains just the code it needs to do its job (<a href=\"http://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\">Single Responsibility Principle</a>).</p>\n<p>Also, the operations are also easier to compose. The InitiateOrder operation may take one or more initial products and can simply invoke the AddProductToOrderOperation class to add them to the order.</p>\n<pre class=\"csharpcode\">[ServiceContract]\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">interface</span> IOrderService\n{\n    [OperationContract]\n    InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request);\n\n    [OperationContract]\n    CommitOrderResponse CommitOrder(\n        CommitOrderRequest request);\n\n    [OperationContract]\n    AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request);\n\n    [OperationContract]\n    RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request);\n}\n\n[ServiceBehavior]\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> OrderService : IOrderService\n{\n    <span class=\"kwrd\">public</span> InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request)\n    {\n        var operation = <span class=\"kwrd\">new</span> InitiateOrderOperation();\n        <span class=\"kwrd\">return</span> operation.Execute(request);\n    }\n\n    <span class=\"kwrd\">public</span> CommitOrderResponse CommitOrder(\n        CommitOrderRequest request)\n    {\n        var operation = <span class=\"kwrd\">new</span> CommitOrderOperation();\n        <span class=\"kwrd\">return</span> operation.Execute(request);\n    }\n\n    <span class=\"kwrd\">public</span> AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request)\n    {\n        var operation = <span class=\"kwrd\">new</span> AddProductToOrderOperation();\n        <span class=\"kwrd\">return</span> operation.Execute(request);\n    }\n\n    <span class=\"kwrd\">public</span> RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request)\n    {\n        var operation = <span class=\"kwrd\">new</span> RemoveProductFromOrderOperation();\n        <span class=\"kwrd\">return</span> operation.Execute(request);\n    }\n}\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> RemoveProductFromOrderOperation\n{\n    <span class=\"kwrd\">public</span> RemoveProductFromOrderResponse Execute(\n        RemoveProductFromOrderRequest request)\n    {\n        <span class=\"rem\">// Implementation here.</span>\n    }\n}\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> AddProductToOrderOperation\n{\n    <span class=\"kwrd\">public</span> AddProductToOrderResponse Execute(\n        AddProductToOrderRequest request)\n    {\n        <span class=\"rem\">// Implementation here.</span>\n    }\n}\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> CommitOrderOperation\n{\n    <span class=\"kwrd\">public</span> CommitOrderResponse Execute(\n        CommitOrderRequest request)\n    {\n        <span class=\"rem\">// Implementation here.</span>\n    }\n}\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> InitiateOrderOperation\n{\n    <span class=\"kwrd\">public</span> InitiateOrderResponse Execute(\n        InitiateOrderRequest request)\n    {\n        <span class=\"rem\">// Implementation here.</span>\n    }\n}</pre>\n<h3>Everything's a Service</h3>\nMost web services I've seen implement a standard <a href=\"http://en.wikipedia.org/wiki/Data_transfer_object\" target=\"_blank\">Data Transfer Object (DTO)</a> pattern for their operations utilizing request and response DTOs or messages. The request message contains all of the information necessary for the operation to do its job, and the response message contains all of the operation's output. The behavior of a message class is limited to retrieving and saving its own data.\n<p>DTOs make unit testing much easier by increasing the visibility into what the operation does. Everything it needs to execute comes in the request, and the data the test needs to verify is returned in the response.</p>\n<p>This works well for operations, so I thought why not use this pattern for business objects as well? Essentially each class can be treated like a service with its own well-defined contract and messages. Taking this idea even further, each public method could become stateless as private data members are moved to the request/response classes.</p>\n<p>About two years ago I started converting business objects over to this pattern in one of my company's large web services. I even updated private methods to remove dependencies on class fields. Instead each method received these values as arguments. This year I continued this process, and it has worked very well. The guts of the service are now more unit testable and composable.</p>\n<h3>Separate Contract Classes from Business Logic Classes</h3>\nI like to create a strict separation between service contract classes and implementation classes, and I'm accustomed to putting contract classes into their own assembly. Occasionally, I'll notice an implementation specific detail in the contract.  Sometimes it's a simple field to hold some temporary data.  Other times it's one or more methods with internal state. This drives me crazy because it becomes difficult to determine which data consuming clients are dependent on.\n<p>Below is an example of what I mean. It is based on something I came across recently. ShoppingCartItem is a contract class for a WCF service. It exposes Name and Price as data members. Two additional properties IsDiscountIncludedInPrice and IsPenaltyIncludedInPrice are ignored by the data contract serializer as instructed by the XmlIgnore attribute.  The presence of this attribute in a contract class is a clear code smell. To make matters worse, a couple of methods have been added.</p>\n<pre class=\"csharpcode\">[DataContract]\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> ShoppingCartItem\n{\n    [DataMember]\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Name { get; set; }\n\n    [DataMember]\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Price { get; set; }\n\n    [XmlIgnore]\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> IsDiscountIncludedInPrice { get; set; }\n\n    [XmlIgnore]\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> IsPenaltyIncludedInPrice { get; set; }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> AddDiscount(Disount discount)\n    {\n        <span class=\"rem\">// Logic to update the price with a discount.</span>\n    }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> AddPenalty(Penalty penalty)\n    {\n        <span class=\"rem\">// Logic to update the price with a monetary penalty.</span>\n    }\n}</pre>\n<p>To fix this, I did three things. First, I created a class called ShoppingCartItemImp (a terrible name I know) with all of ShoppingCartItem's members. Next, I removed the members in ShoppingCartItem that are not a part of the contract. Finally, I added a method to ShoppingCartItemImp that returns an instance of ShoppingCartItem.</p>\n<p>The result is a new class whose implementation can change as the service logic evolves and a contract class free of implementation details.</p>\n<pre class=\"csharpcode\">[DataContract]\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> ShoppingCartItem\n{\n    [DataMember]\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Name { get; set; }\n\n    [DataMember]\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Price { get; set; }\n}\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> ShoppingCartItemImp\n{\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Name { get; set; }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Price { get; set; }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> IsDiscountIncludedInPrice { get; set; }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> IsPenaltyIncludedInPrice { get; set; }\n\n    <span class=\"kwrd\">public</span> ShoppingCartItem ToShoppingCartItem()\n    {\n        <span class=\"kwrd\">return</span> <span class=\"kwrd\">new</span> ShoppingCartItem()\n            {\n                Name = <span class=\"kwrd\">this</span>.Name,\n                Price = <span class=\"kwrd\">this</span>.Price\n            };\n    }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> AddDiscount(\n        ShoppingCartItemImp shoppingCartItemImp,\n        Disount discount)\n    {\n        <span class=\"rem\">// Logic to update the price with a discount.</span>\n    }\n\n    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> AddPenalty(\n        ShoppingCartItemImp shoppingCartItemImp,\n        Penalty penalty)\n    {\n        <span class=\"rem\">// Logic to update the price with a monetary penalty.</span>\n    }\n}</pre>\n<h3>Onward to 2013...</h3>\nThese are not the only lessons I've learned but the ones that have made the biggest impression. Others include decoupling logic with an event bus, finally getting comfortable with containers, and favoring automated tests over a UI for testing.\n<p>Here's hoping to an equally productive 2013.</p>\n</div>","amp":"17","plaintext":"As 2012 comes to a close, it's time to look back on some of the things I've\nlearned. During the past year, my focus has been on enterprise service\ndevelopment, and thanks to a talented software architect and co-worker Kelly\nBrownsberger [http://blog.kellybrownsberger.com/], I feel much more confident\nwith my development skills. Together we focused on re-architecting and\nrefactoring large portions of an ordering service. Now, looking back, three\nlessons in particular have stuck with me and changed the way I develop software.\n\nThey are 1) encapsulate operations vertically not horizontally, 2) everything's\na service, and 3) separate contract classes from business logic classes. In the\nremainder of this blog post I expand on these ideas and try to explain why they\nhave made such an impression.\n\nEncapsulate Operations Vertically Not Horizontally\nFor web service implementations, encapsulation at the operation level\n(vertically) rather than at the service level (horizontally) seems to work\nbetter over the long run. Having an implementation class per operation makes\nrefactoring, unit testing, and reuse much easier.For example, let's say a\nhypothetical product ordering service implemented with WCF has a contract\nIOrderService with several operations and an implementing class OrderService.\nMost developers would immediately start implementing the service in the\nOrderService class. Over time OrderService would continue to accumulate\nimplementing code with common code among the operations separated out into\nprivate methods or separate classes. Eventually it evolves into a bulky god\nclass. The operations become hard to unit test because it's difficult to know\nwhich methods, fields, or private members a particular operation needs. I've\nseen this happen several times where I work.\n\n[ServiceContract]\npublic interface IOrderService\n{\n    [OperationContract]\n    InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request);\n\n    [OperationContract]\n    CommitOrderResponse CommitOrder(\n        CommitOrderRequest request);\n\n    [OperationContract]\n    AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request);\n\n    [OperationContract]\n    RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request);\n}\n\n[ServiceBehavior]\npublic class OrderService : IOrderService\n{\n    public InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request)\n    {\n        // Lots of implementing code here.\n    }\n\n    public CommitOrderResponse CommitOrder(\n        CommitOrderRequest request)\n    {\n        // Lots of implementing code here.\n    }\n\n    public AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request)\n    {\n        // Lots of implementing code here.\n    }\n\n    public RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request)\n    {\n        // Lots of implementing code here.\n    }\n}\n\nAs an alternative, this service could be implemented with a class per operation.\nEach method simply creates an instance of the operation (or retrieves it from a\ncontainer like Windsor) and executes it. Any common code between the operations\ncan be pulled out into a separate class. For example, they all may return a\nshopping cart with the latest view of the order. The cart generation code can be\nencapsulated into the GetShoppingCartTask class and shared among the operations.\n\nThis setup is much easier to follow and unit test. Each operation contains just\nthe code it needs to do its job (Single Responsibility Principle\n[http://en.wikipedia.org/wiki/Single_responsibility_principle]).\n\nAlso, the operations are also easier to compose. The InitiateOrder operation may\ntake one or more initial products and can simply invoke the\nAddProductToOrderOperation class to add them to the order.\n\n[ServiceContract]\npublic interface IOrderService\n{\n    [OperationContract]\n    InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request);\n\n    [OperationContract]\n    CommitOrderResponse CommitOrder(\n        CommitOrderRequest request);\n\n    [OperationContract]\n    AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request);\n\n    [OperationContract]\n    RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request);\n}\n\n[ServiceBehavior]\npublic class OrderService : IOrderService\n{\n    public InitiateOrderResponse InitiateOrder(\n        InitiateOrderRequest request)\n    {\n        var operation = new InitiateOrderOperation();\n        return operation.Execute(request);\n    }\n\n    public CommitOrderResponse CommitOrder(\n        CommitOrderRequest request)\n    {\n        var operation = new CommitOrderOperation();\n        return operation.Execute(request);\n    }\n\n    public AddProductToOrderResponse AddProductToOrder(\n        AddProductToOrderRequest request)\n    {\n        var operation = new AddProductToOrderOperation();\n        return operation.Execute(request);\n    }\n\n    public RemoveProductFromOrderResponse RemoveProductFromOrder(\n        RemoveProductFromOrderRequest request)\n    {\n        var operation = new RemoveProductFromOrderOperation();\n        return operation.Execute(request);\n    }\n}\n\npublic class RemoveProductFromOrderOperation\n{\n    public RemoveProductFromOrderResponse Execute(\n        RemoveProductFromOrderRequest request)\n    {\n        // Implementation here.\n    }\n}\n\npublic class AddProductToOrderOperation\n{\n    public AddProductToOrderResponse Execute(\n        AddProductToOrderRequest request)\n    {\n        // Implementation here.\n    }\n}\n\npublic class CommitOrderOperation\n{\n    public CommitOrderResponse Execute(\n        CommitOrderRequest request)\n    {\n        // Implementation here.\n    }\n}\n\npublic class InitiateOrderOperation\n{\n    public InitiateOrderResponse Execute(\n        InitiateOrderRequest request)\n    {\n        // Implementation here.\n    }\n}\n\nEverything's a Service\nMost web services I've seen implement a standard Data Transfer Object (DTO)\n[http://en.wikipedia.org/wiki/Data_transfer_object]  pattern for their\noperations utilizing request and response DTOs or messages. The request message\ncontains all of the information necessary for the operation to do its job, and\nthe response message contains all of the operation's output. The behavior of a\nmessage class is limited to retrieving and saving its own data.DTOs make unit\ntesting much easier by increasing the visibility into what the operation does.\nEverything it needs to execute comes in the request, and the data the test needs\nto verify is returned in the response.\n\nThis works well for operations, so I thought why not use this pattern for\nbusiness objects as well? Essentially each class can be treated like a service\nwith its own well-defined contract and messages. Taking this idea even further,\neach public method could become stateless as private data members are moved to\nthe request/response classes.\n\nAbout two years ago I started converting business objects over to this pattern\nin one of my company's large web services. I even updated private methods to\nremove dependencies on class fields. Instead each method received these values\nas arguments. This year I continued this process, and it has worked very well.\nThe guts of the service are now more unit testable and composable.\n\nSeparate Contract Classes from Business Logic Classes\nI like to create a strict separation between service contract classes and\nimplementation classes, and I'm accustomed to putting contract classes into\ntheir own assembly. Occasionally, I'll notice an implementation specific detail\nin the contract.  Sometimes it's a simple field to hold some temporary data. \nOther times it's one or more methods with internal state. This drives me crazy\nbecause it becomes difficult to determine which data consuming clients are\ndependent on.Below is an example of what I mean. It is based on something I came\nacross recently. ShoppingCartItem is a contract class for a WCF service. It\nexposes Name and Price as data members. Two additional properties\nIsDiscountIncludedInPrice and IsPenaltyIncludedInPrice are ignored by the data\ncontract serializer as instructed by the XmlIgnore attribute.  The presence of\nthis attribute in a contract class is a clear code smell. To make matters worse,\na couple of methods have been added.\n\n[DataContract]\npublic class ShoppingCartItem\n{\n    [DataMember]\n    public string Name { get; set; }\n\n    [DataMember]\n    public string Price { get; set; }\n\n    [XmlIgnore]\n    public bool IsDiscountIncludedInPrice { get; set; }\n\n    [XmlIgnore]\n    public bool IsPenaltyIncludedInPrice { get; set; }\n\n    public void AddDiscount(Disount discount)\n    {\n        // Logic to update the price with a discount.\n    }\n\n    public void AddPenalty(Penalty penalty)\n    {\n        // Logic to update the price with a monetary penalty.\n    }\n}\n\nTo fix this, I did three things. First, I created a class called\nShoppingCartItemImp (a terrible name I know) with all of ShoppingCartItem's\nmembers. Next, I removed the members in ShoppingCartItem that are not a part of\nthe contract. Finally, I added a method to ShoppingCartItemImp that returns an\ninstance of ShoppingCartItem.\n\nThe result is a new class whose implementation can change as the service logic\nevolves and a contract class free of implementation details.\n\n[DataContract]\npublic class ShoppingCartItem\n{\n    [DataMember]\n    public string Name { get; set; }\n\n    [DataMember]\n    public string Price { get; set; }\n}\n\npublic class ShoppingCartItemImp\n{\n    public string Name { get; set; }\n\n    public string Price { get; set; }\n\n    public bool IsDiscountIncludedInPrice { get; set; }\n\n    public bool IsPenaltyIncludedInPrice { get; set; }\n\n    public ShoppingCartItem ToShoppingCartItem()\n    {\n        return new ShoppingCartItem()\n            {\n                Name = this.Name,\n                Price = this.Price\n            };\n    }\n\n    public void AddDiscount(\n        ShoppingCartItemImp shoppingCartItemImp,\n        Disount discount)\n    {\n        // Logic to update the price with a discount.\n    }\n\n    public void AddPenalty(\n        ShoppingCartItemImp shoppingCartItemImp,\n        Penalty penalty)\n    {\n        // Logic to update the price with a monetary penalty.\n    }\n}\n\nOnward to 2013...\nThese are not the only lessons I've learned but the ones that have made the\nbiggest impression. Others include decoupling logic with an event bus, finally\ngetting comfortable with containers, and favoring automated tests over a UI for\ntesting.Here's hoping to an equally productive 2013.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1","published_at":"2012-12-31T14:54:43.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b48c","uuid":"8bc33278-5588-458d-904c-ad8259366aca","title":"Some SpecFlow Tips","slug":"some-specflow-tips","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"UPDATE (11/18/2016):\\n\\n>I've written a number of posts since this one was published that cover advanced SpecFlow topics like [composable steps](http://joebuschmann.com/refactoring-to-composable-specflow-steps/), [tags done right](http://joebuschmann.com/specflow-tags-done-right/), [managing state](http://joebuschmann.com/strategies-for-managing-state-in-specflow/), [useful regex](http://joebuschmann.com/useful-regex-for-specflow-bindings/), etc. For a list of all my SpecFlow writing, you can click on the SpecFlow tag or go here: http://joebuschmann.com/tag/specflow. SpecFlow is a fantastic tool that's changed the way I develop software, and I hope it does the same for you. Happy testing!\\n\\n<hr />\\n\\nLate last year a co-worker <a href=\\\"https://twitter.com/jaybrummels\\\" target=\\\"_blank\\\">Jay Brummels</a> introduced our development group to <a href=\\\"http://www.specflow.org/\\\" target=\\\"_blank\\\">SpecFlow</a> a .NET tool that enables behavior specifications from a domain expert or product owner to be bound to runnable test code. It has been a huge success, and we're quickly building up a suite of system tests and unit tests fronted by SpecFlow.\\n\\nAlthough we're relatively new to SpecFlow, my group has identified some patterns or best practices to follow when building out tests.\\n\\n<h3>Use Extension Methods to Manipulate ScenarioContext.Current</h3>\\n\\nUPDATE (10/21/2017):\\n\\n>Using ScenarioContext to store state is no longer recommended. Instead use dependency injection to share state between steps and bindings. For more information, see my post on [strategies for managing state](http://joebuschmann.com/strategies-for-managing-state-in-specflow/).\\n\\n<em>ScenarioContext.Current</em> is a singleton that provides contextual information about the test and executing scenario block as well as a dictionary data structure for storing test data between scenario blocks. Below is an example of retrieving an object, manipulating it, and stashing it back in ScenarioContext dictionary.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/5984a69af58ddd81bc429eaad558480f.js\\\"></script>\\n\\nUsing the dictionary directly from step code has some disadvantages. First access to the data requires passing a string key which is not discoverable via Intellisense. Second creating an object may require multiple dictionary items to build it out. Having that logic in multiple places is prone to error.\\n\\nTo solve these issues, extension methods can be used to store and retrieve test data.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a5ef6563d44675d175982d6f10f58b88.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9e37a43decb505ccad14a0bd3ee18df4.js\\\"></script>\\n\\nAnd to take things one step further, the creation of a complex object using multiple entries in the dictionary can be hidden behind an extension method.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/917023f3f686c9dbd5fc270eb79bfa49.js\\\"></script>\\n\\n<h3>Bind Multiple Specification Attributes</h3>\\nAfter writing out a step specification, step definitions need to be generated and filled in with the implementation code. Whenever I notice the same step definition being used from different scenario blocks, I like to consolidate them into one method and add multiple step definition attributes. Also, I like to rename the method to something more concise. By default SpecFlow generates method names that match the step specification text, and they tend to be long and wordy.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d09cf0e7d01ccbe40b02548a3fb9f388.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/8399d007404790a8e61843217367fb85.js\\\"></script>\\n\\n<h3>Use Hooks to Execute Setup or Teardown Code</h3>\\nAs with any other testing framework, SpecFlow provides a way of executing setup or teardown code for features, scenarios, steps, and test runs via <em>hook</em> classes. Hooks are associated to tests using tags which are keywords preceded by an <em>@</em> symbol.\\n\\nAt work my development group has created a series of system tests for an ordering system. Each test places an actual order in an integrated testing environment. After a test run, dozens of orders remain in the system taking up valuable space and resources. To solve this problem, a hook runs after each ordering scenario to cancel the order and remove it from the system.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9f3c4427c2bf7fe0a31dc7f3c0a32574.js\\\"></script>\\n\\nTests scenarios that create orders can use the <em>@CancelOrder</em> tag to run the hook after the scenario completes.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a35da70cc254c885ba2aeed62bfd8a4d.js\\\"></script>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>UPDATE (11/18/2016):</p>\n<blockquote>\n<p>I've written a number of posts since this one was published that cover advanced SpecFlow topics like <a href=\"http://joebuschmann.com/refactoring-to-composable-specflow-steps/\">composable steps</a>, <a href=\"http://joebuschmann.com/specflow-tags-done-right/\">tags done right</a>, <a href=\"http://joebuschmann.com/strategies-for-managing-state-in-specflow/\">managing state</a>, <a href=\"http://joebuschmann.com/useful-regex-for-specflow-bindings/\">useful regex</a>, etc. For a list of all my SpecFlow writing, you can click on the SpecFlow tag or go here: <a href=\"http://joebuschmann.com/tag/specflow\">http://joebuschmann.com/tag/specflow</a>. SpecFlow is a fantastic tool that's changed the way I develop software, and I hope it does the same for you. Happy testing!</p>\n</blockquote>\n<hr />\n<p>Late last year a co-worker <a href=\"https://twitter.com/jaybrummels\" target=\"_blank\">Jay Brummels</a> introduced our development group to <a href=\"http://www.specflow.org/\" target=\"_blank\">SpecFlow</a> a .NET tool that enables behavior specifications from a domain expert or product owner to be bound to runnable test code. It has been a huge success, and we're quickly building up a suite of system tests and unit tests fronted by SpecFlow.</p>\n<p>Although we're relatively new to SpecFlow, my group has identified some patterns or best practices to follow when building out tests.</p>\n<h3>Use Extension Methods to Manipulate ScenarioContext.Current</h3>\n<p>UPDATE (10/21/2017):</p>\n<blockquote>\n<p>Using ScenarioContext to store state is no longer recommended. Instead use dependency injection to share state between steps and bindings. For more information, see my post on <a href=\"http://joebuschmann.com/strategies-for-managing-state-in-specflow/\">strategies for managing state</a>.</p>\n</blockquote>\n<p><em>ScenarioContext.Current</em> is a singleton that provides contextual information about the test and executing scenario block as well as a dictionary data structure for storing test data between scenario blocks. Below is an example of retrieving an object, manipulating it, and stashing it back in ScenarioContext dictionary.</p>\n<script src=\"https://gist.github.com/joebuschmann/5984a69af58ddd81bc429eaad558480f.js\"></script>\n<p>Using the dictionary directly from step code has some disadvantages. First access to the data requires passing a string key which is not discoverable via Intellisense. Second creating an object may require multiple dictionary items to build it out. Having that logic in multiple places is prone to error.</p>\n<p>To solve these issues, extension methods can be used to store and retrieve test data.</p>\n<script src=\"https://gist.github.com/joebuschmann/a5ef6563d44675d175982d6f10f58b88.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/9e37a43decb505ccad14a0bd3ee18df4.js\"></script>\n<p>And to take things one step further, the creation of a complex object using multiple entries in the dictionary can be hidden behind an extension method.</p>\n<script src=\"https://gist.github.com/joebuschmann/917023f3f686c9dbd5fc270eb79bfa49.js\"></script>\n<h3>Bind Multiple Specification Attributes</h3>\nAfter writing out a step specification, step definitions need to be generated and filled in with the implementation code. Whenever I notice the same step definition being used from different scenario blocks, I like to consolidate them into one method and add multiple step definition attributes. Also, I like to rename the method to something more concise. By default SpecFlow generates method names that match the step specification text, and they tend to be long and wordy.\n<script src=\"https://gist.github.com/joebuschmann/d09cf0e7d01ccbe40b02548a3fb9f388.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/8399d007404790a8e61843217367fb85.js\"></script>\n<h3>Use Hooks to Execute Setup or Teardown Code</h3>\nAs with any other testing framework, SpecFlow provides a way of executing setup or teardown code for features, scenarios, steps, and test runs via <em>hook</em> classes. Hooks are associated to tests using tags which are keywords preceded by an <em>@</em> symbol.\n<p>At work my development group has created a series of system tests for an ordering system. Each test places an actual order in an integrated testing environment. After a test run, dozens of orders remain in the system taking up valuable space and resources. To solve this problem, a hook runs after each ordering scenario to cancel the order and remove it from the system.</p>\n<script src=\"https://gist.github.com/joebuschmann/9f3c4427c2bf7fe0a31dc7f3c0a32574.js\"></script>\n<p>Tests scenarios that create orders can use the <em>@CancelOrder</em> tag to run the hook after the scenario completes.</p>\n<script src=\"https://gist.github.com/joebuschmann/a35da70cc254c885ba2aeed62bfd8a4d.js\"></script></div>","amp":"18","plaintext":"UPDATE (11/18/2016):\n\nI've written a number of posts since this one was published that cover advanced\nSpecFlow topics like composable steps\n[http://joebuschmann.com/refactoring-to-composable-specflow-steps/], tags done\nright [http://joebuschmann.com/specflow-tags-done-right/], managing state\n[http://joebuschmann.com/strategies-for-managing-state-in-specflow/], useful\nregex [http://joebuschmann.com/useful-regex-for-specflow-bindings/], etc. For a\nlist of all my SpecFlow writing, you can click on the SpecFlow tag or go here: \nhttp://joebuschmann.com/tag/specflow. SpecFlow is a fantastic tool that's\nchanged the way I develop software, and I hope it does the same for you. Happy\ntesting!\n\n\n--------------------------------------------------------------------------------\n\nLate last year a co-worker Jay Brummels [https://twitter.com/jaybrummels] \nintroduced our development group to SpecFlow [http://www.specflow.org/]  a .NET\ntool that enables behavior specifications from a domain expert or product owner\nto be bound to runnable test code. It has been a huge success, and we're quickly\nbuilding up a suite of system tests and unit tests fronted by SpecFlow.\n\nAlthough we're relatively new to SpecFlow, my group has identified some patterns\nor best practices to follow when building out tests.\n\nUse Extension Methods to Manipulate ScenarioContext.Current\nScenarioContext.Current  is a singleton that provides contextual information\nabout the test and executing scenario block as well as a dictionary data\nstructure for storing test data between scenario blocks. Below is an example of\nretrieving an object, manipulating it, and stashing it back in ScenarioContext\ndictionary.Using the dictionary directly from step code has some disadvantages.\nFirst access to the data requires passing a string key which is not discoverable\nvia Intellisense. Second creating an object may require multiple dictionary\nitems to build it out. Having that logic in multiple places is prone to error.\n\nTo solve these issues, extension methods can be used to store and retrieve test\ndata.\n\nAnd to take things one step further, the creation of a complex object using\nmultiple entries in the dictionary can be hidden behind an extension method.\n\nBind Multiple Specification Attributes\nAfter writing out a step specification, step definitions need to be generated\nand filled in with the implementation code. Whenever I notice the same step\ndefinition being used from different scenario blocks, I like to consolidate them\ninto one method and add multiple step definition attributes. Also, I like to\nrename the method to something more concise. By default SpecFlow generates\nmethod names that match the step specification text, and they tend to be long\nand wordy.Use Hooks to Execute Setup or Teardown Code\nAs with any other testing framework, SpecFlow provides a way of executing setup\nor teardown code for features, scenarios, steps, and test runs via hook \nclasses. Hooks are associated to tests using tags which are keywords preceded by\nan @  symbol.At work my development group has created a series of system tests\nfor an ordering system. Each test places an actual order in an integrated\ntesting environment. After a test run, dozens of orders remain in the system\ntaking up valuable space and resources. To solve this problem, a hook runs after\neach ordering scenario to cancel the order and remove it from the system.\n\nTests scenarios that create orders can use the @CancelOrder  tag to run the hook\nafter the scenario completes.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2017-10-22T03:21:15.000Z","updated_by":"1","published_at":"2013-02-17T11:49:51.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b48d","uuid":"ad0ad097-d970-4ca0-b50f-75cbc4086033","title":"More SpecFlow Tips","slug":"more-specflow-tips","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"UPDATE (11/18/2016):\\n\\n>I've written a number of posts since this one was published that cover advanced SpecFlow topics like [composable steps](http://joebuschmann.com/refactoring-to-composable-specflow-steps/), [tags done right](http://joebuschmann.com/specflow-tags-done-right/), [managing state](http://joebuschmann.com/strategies-for-managing-state-in-specflow/), [useful regex](http://joebuschmann.com/useful-regex-for-specflow-bindings/), etc. For a list of all my SpecFlow writing, you can click on the SpecFlow tag or go here: http://joebuschmann.com/tag/specflow. SpecFlow is a fantastic tool that's changed the way I develop software, and I hope it does the same for you. Happy testing!\\n\\n<hr />\\n\\n<p>My <a href=\\\"/some-specflow-tips\\\">last post</a> covered three tips or best practices for <a href=\\\"http://www.specflow.org/specflownew/\\\" target=\\\"_blank\\\">SpecFlow</a> that covered manipulating the current ScenarioContext with extension methods, binding multiple Given/When/Then attributes, and using hooks. In this post I’ll be covering three more tips for working with SpecFlow tables.</p> <p>SpecFlow tables provide an easy way of specifying the data for a collection or an individual object. The table in the specification step is passed into the step definition as an instance of the <em>TechTalk.SpecFlow.Table</em> class.</p> <p>When specifying a collection of data, each table row represents an item in the collection. The table headers indicate to which property the column values should be assigned. The example below defines a list of items with each item having an <em>Name</em>&nbsp; and a <em>Price</em> property.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d2bde7c2377d6317db12a4015ffa6877.js\\\"></script>\\n\\n<p>Another use for a table is to specify the values of properties for a single instance of an object. For example the FirstName, LastName, and Email properties of a customer object could be listed with a name/value pair for each property.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/83a5a9b279602d844d662f4e1f42fc14.js\\\"></script>\\n\\n<p>Generally, I’ve found defining tables in specification steps to be straightforward. The more tedious part is translating the table data in the step definitions.</p>\\n<h3>Avoid Explicitly Enumerating Table Rows</h3>\\n<p>I try to avoid enumerating table rows in code as much as possible. Fortunately, there are helper methods in the <em>TechTalk.SpecFlow.Assist.TableHelperExtensionMethods</em> class that make translating from a table instance to a collection or object much easier. I’ve found very few instances where these methods didn’t give me what I needed.</p>\\n<p>The following step definitions explicitly enumerate a table to retrieve data. The first one builds out a list of items in a shopping cart and the second, a customer instance. They correspond to the step specifications in the previous section.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/19dd4baf4d4ac3add1632faf8abdf99b.js\\\"></script>\\n\\n<p>This code cleans up nicely with calls to <em>table.CreateSet()</em> and <em>table.CreateInstance()</em>. The number of lines drops to two per step.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/efdaa71bafb903f1c61069649a19b0f7.js\\\"></script>\\n\\n<h3>Convert Table Data to Anonymous Types for Ease of Use</h3>\\n<p>The extension methods in <em>TechTalk.SpecFlow.Assist.TableHelperExtensionMethods</em> are useful for simple one-to-one mappings between table values and class properties; however they cannot be used for more complex mappings which require manual intervention. Let’s say the shopping cart in the previous examples is enhanced to include discounts as child items under the corresponding product. This makes the ShoppingCartItem class hierarchal and difficult to model in a flat table structure. A new column called ParentItem has been added to the specification to define the parent-child relationships, but it doesn’t map easily to the new list of child items in the ShoppingCartItem class. This means <em>table.CreateSet()</em> can’t be used.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/410764b3abe47d6193fbb0535a37df1b.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d808736c319331a4f7935e1bf22c8a41.js\\\"></script>\\n\\n<p>With this new requirement, the step definition becomes:</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9134f2e079f0c7e4b1b02d5cfd935519.js\\\"></script>\\n\\n<p>This step definition works, but I don’t like now the row indexer is used throughout the method. I think this makes the code less readable.</p>\\n<p>As an alternative, the table could be converted to a list of objects up front. Anonymous types let us avoid having to define a class for such a simple and transient use case, and the remaining code uses the anonymous type which keeps things neat.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/7b425ace0ff9a75f2e9c5e425108f993.js\\\"></script>\\n\\n<h3>Flatten Object Hierarchies When Doing Table Comparisons</h3>\\n<p>Now we have steps for reading in order items and saving them as a list of <em>ShoppingCartItem</em> instances in the <em>ScenarioContext</em>. Subsequent steps can manipulate the order which in turn updates the shopping cart. It needs to be validated at the end of the test to ensure correct behavior.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/412632d86f9601b026bc136e71cb7d5d.js\\\"></script>\\n\\n<p>The flat list of expected shopping cart items needs to be validated against the hierarchal shopping cart. The step definition below does just that, but it violates tip one which is to avoid explicitly enumerating table rows. It is also difficult to follow since it needs to iterate through the child shopping cart items.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1156173b7d666f3e34d081a26c6a5293.js\\\"></script>\\n\\n<p>Ideally we would like to use the helper extension methods to do the table comparison. This is possible by first flattening out the shopping cart hierarchy into a list. The <em>Flatten()</em> extension method does the trick and is invoked right before <em>table.CompareToSet()</em>. Now the step is just two lines of code. Much better.</p>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/3f8ba6fd14a1cc7f6a7815dcbe5ec21d.js\\\"></script>\\n\\n<p>That’s all I have for now. For more information on tables and the table helper methods, check out the links below.</p>\\n<p><a href=\\\"http://specflow.org/documentation/SpecFlow-Assist-Helpers/\\\">SpecFlow Assist Helpers</a></p>\\n<p><a href=\\\"http://specflow.org/documentation/\\\">Full SpecFlow Documentation</a></p>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>UPDATE (11/18/2016):</p>\n<blockquote>\n<p>I've written a number of posts since this one was published that cover advanced SpecFlow topics like <a href=\"http://joebuschmann.com/refactoring-to-composable-specflow-steps/\">composable steps</a>, <a href=\"http://joebuschmann.com/specflow-tags-done-right/\">tags done right</a>, <a href=\"http://joebuschmann.com/strategies-for-managing-state-in-specflow/\">managing state</a>, <a href=\"http://joebuschmann.com/useful-regex-for-specflow-bindings/\">useful regex</a>, etc. For a list of all my SpecFlow writing, you can click on the SpecFlow tag or go here: <a href=\"http://joebuschmann.com/tag/specflow\">http://joebuschmann.com/tag/specflow</a>. SpecFlow is a fantastic tool that's changed the way I develop software, and I hope it does the same for you. Happy testing!</p>\n</blockquote>\n<hr />\n<p>My <a href=\"/some-specflow-tips\">last post</a> covered three tips or best practices for <a href=\"http://www.specflow.org/specflownew/\" target=\"_blank\">SpecFlow</a> that covered manipulating the current ScenarioContext with extension methods, binding multiple Given/When/Then attributes, and using hooks. In this post I’ll be covering three more tips for working with SpecFlow tables.</p> <p>SpecFlow tables provide an easy way of specifying the data for a collection or an individual object. The table in the specification step is passed into the step definition as an instance of the <em>TechTalk.SpecFlow.Table</em> class.</p> <p>When specifying a collection of data, each table row represents an item in the collection. The table headers indicate to which property the column values should be assigned. The example below defines a list of items with each item having an <em>Name</em>&nbsp; and a <em>Price</em> property.</p>\n<script src=\"https://gist.github.com/joebuschmann/d2bde7c2377d6317db12a4015ffa6877.js\"></script>\n<p>Another use for a table is to specify the values of properties for a single instance of an object. For example the FirstName, LastName, and Email properties of a customer object could be listed with a name/value pair for each property.</p>\n<script src=\"https://gist.github.com/joebuschmann/83a5a9b279602d844d662f4e1f42fc14.js\"></script>\n<p>Generally, I’ve found defining tables in specification steps to be straightforward. The more tedious part is translating the table data in the step definitions.</p>\n<h3>Avoid Explicitly Enumerating Table Rows</h3>\n<p>I try to avoid enumerating table rows in code as much as possible. Fortunately, there are helper methods in the <em>TechTalk.SpecFlow.Assist.TableHelperExtensionMethods</em> class that make translating from a table instance to a collection or object much easier. I’ve found very few instances where these methods didn’t give me what I needed.</p>\n<p>The following step definitions explicitly enumerate a table to retrieve data. The first one builds out a list of items in a shopping cart and the second, a customer instance. They correspond to the step specifications in the previous section.</p>\n<script src=\"https://gist.github.com/joebuschmann/19dd4baf4d4ac3add1632faf8abdf99b.js\"></script>\n<p>This code cleans up nicely with calls to <em>table.CreateSet()</em> and <em>table.CreateInstance()</em>. The number of lines drops to two per step.</p>\n<script src=\"https://gist.github.com/joebuschmann/efdaa71bafb903f1c61069649a19b0f7.js\"></script>\n<h3>Convert Table Data to Anonymous Types for Ease of Use</h3>\n<p>The extension methods in <em>TechTalk.SpecFlow.Assist.TableHelperExtensionMethods</em> are useful for simple one-to-one mappings between table values and class properties; however they cannot be used for more complex mappings which require manual intervention. Let’s say the shopping cart in the previous examples is enhanced to include discounts as child items under the corresponding product. This makes the ShoppingCartItem class hierarchal and difficult to model in a flat table structure. A new column called ParentItem has been added to the specification to define the parent-child relationships, but it doesn’t map easily to the new list of child items in the ShoppingCartItem class. This means <em>table.CreateSet()</em> can’t be used.</p>\n<script src=\"https://gist.github.com/joebuschmann/410764b3abe47d6193fbb0535a37df1b.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/d808736c319331a4f7935e1bf22c8a41.js\"></script>\n<p>With this new requirement, the step definition becomes:</p>\n<script src=\"https://gist.github.com/joebuschmann/9134f2e079f0c7e4b1b02d5cfd935519.js\"></script>\n<p>This step definition works, but I don’t like now the row indexer is used throughout the method. I think this makes the code less readable.</p>\n<p>As an alternative, the table could be converted to a list of objects up front. Anonymous types let us avoid having to define a class for such a simple and transient use case, and the remaining code uses the anonymous type which keeps things neat.</p>\n<script src=\"https://gist.github.com/joebuschmann/7b425ace0ff9a75f2e9c5e425108f993.js\"></script>\n<h3>Flatten Object Hierarchies When Doing Table Comparisons</h3>\n<p>Now we have steps for reading in order items and saving them as a list of <em>ShoppingCartItem</em> instances in the <em>ScenarioContext</em>. Subsequent steps can manipulate the order which in turn updates the shopping cart. It needs to be validated at the end of the test to ensure correct behavior.</p>\n<script src=\"https://gist.github.com/joebuschmann/412632d86f9601b026bc136e71cb7d5d.js\"></script>\n<p>The flat list of expected shopping cart items needs to be validated against the hierarchal shopping cart. The step definition below does just that, but it violates tip one which is to avoid explicitly enumerating table rows. It is also difficult to follow since it needs to iterate through the child shopping cart items.</p>\n<script src=\"https://gist.github.com/joebuschmann/1156173b7d666f3e34d081a26c6a5293.js\"></script>\n<p>Ideally we would like to use the helper extension methods to do the table comparison. This is possible by first flattening out the shopping cart hierarchy into a list. The <em>Flatten()</em> extension method does the trick and is invoked right before <em>table.CompareToSet()</em>. Now the step is just two lines of code. Much better.</p>\n<script src=\"https://gist.github.com/joebuschmann/3f8ba6fd14a1cc7f6a7815dcbe5ec21d.js\"></script>\n<p>That’s all I have for now. For more information on tables and the table helper methods, check out the links below.</p>\n<p><a href=\"http://specflow.org/documentation/SpecFlow-Assist-Helpers/\">SpecFlow Assist Helpers</a></p>\n<p><a href=\"http://specflow.org/documentation/\">Full SpecFlow Documentation</a></p></div>","amp":"19","plaintext":"UPDATE (11/18/2016):\n\nI've written a number of posts since this one was published that cover advanced\nSpecflow topics like composable steps\n[http://joebuschmann.com/refactoring-to-composable-specflow-steps/], tags done\nright [http://joebuschmann.com/specflow-tags-done-right/], managing state\n[http://joebuschmann.com/strategies-for-managing-state-in-specflow/], useful\nregex [http://joebuschmann.com/useful-regex-for-specflow-bindings/], etc. For a\nlist of all my Specflow writing, you can click on the Specflow tag or go here: \nhttp://joebuschmann.com/tag/specflow. Specflow is a fantastic tool that's\nchanged the way I develop software, and I hope it does the same for you. Happy\ntesting!\n\n\n--------------------------------------------------------------------------------\n\nMy last post [/some-specflow-tips]  covered three tips or best practices for \nSpecflow [http://www.specflow.org/specflownew/]  that covered manipulating the\ncurrent ScenarioContext with extension methods, binding multiple Given/When/Then\nattributes, and using hooks. In this post I’ll be covering three more tips for\nworking with Specflow tables.\n\nSpecflow tables provide an easy way of specifying the data for a collection or\nan individual object. The table in the specification step is passed into the\nstep definition as an instance of the TechTalk.SpecFlow.Table  class.\n\nWhen specifying a collection of data, each table row represents an item in the\ncollection. The table headers indicate to which property the column values\nshould be assigned. The example below defines a list of items with each item\nhaving an Name  and a Price  property.\n\nGiven the user orders the following items\n    | Name                                                           | Price |\n    | The Mythical Man-Month                                         | 29.09 |\n    | The Phoenix Project                                            | 29.95 |\n    | Design Patterns: Elements of Reusable Object-Oriented Software | 39.95 |\n    | Lean In: Women, Work, and the Will to Lead                     | 11.22 |\n\nAnother use for a table is to specify the values of properties for a single\ninstance of an object. For example the FirstName, LastName, and Email properties\nof a customer object could be listed with a name/value pair for each property.\n\nGiven the following customer\n    | Name      | Value             |\n    | FirstName | Lucy              |\n    | LastName  | Buschmann         |\n    | Email     | lucy.b@canine.com |\n\nGenerally, I’ve found defining tables in specification steps to be\nstraightforward. The more tedious part is translating the table data in the step\ndefinitions.\n\nAvoid Explicitly Enumerating Table Rows\nI try to avoid enumerating table rows in code as much as possible. Fortunately,\nthere are helper methods in the \nTechTalk.SpecFlow.Assist.TableHelperExtensionMethods  class that make\ntranslating from a table instance to a collection or object much easier. I’ve\nfound very few instances where these methods didn’t give me what I needed.\n\nThe following step definitions explicitly enumerate a table to retrieve data.\nThe first one builds out a list of items in a shopping cart and the second, a\ncustomer instance. They correspond to the step specifications in the previous\nsection.\n\n[Given(@\"the user orders the following items\")]\npublic void GivenTheUserOrdersTheFollowingItems(Table table)\n{\n    var shoppingCartItems = new List<ShoppingCartItem>();\n<span class=\"kwrd\">foreach</span> (var row <span class=\"kwrd\">in</span> table.Rows)\n    shoppingCartItems.Add(<span class=\"kwrd\">new</span> ShoppingCartItem { Name = row[<span class=\"str\">\"Item\"</span>], Price = Convert.ToDecimal(row[<span class=\"str\">\"Price\"</span>]) });\n\nScenarioContext.Current.ShoppingCartItems(shoppingCartItems);\n\n\n\n}\n\n\n[Given(@\"the following customer\")]\n\npublic void GivenTheFollowingCustomer(Table table)\n\n{\n\nvar customer = new Customer\n\n{\n\nFirstName = table.Rows.First(r => r[\"Name\"] == \"FirstName\")[\"Value\"],\n\nLastName = table.Rows.First(r => r[\"Name\"] == \"LastName\")[\"Value\"],\n\nEmail = table.Rows.First(r => r[\"Name\"] == \"Email\")[\"Value\"]\n\n};\n\n\nScenarioContext.Current.Customer(customer);\n\n\n\n}\n\n\n\n\n\nThis code cleans up nicely with calls to table.CreateSet()  and \ntable.CreateInstance(). The number of lines drops to two per step.\n\n[Given(@\"the user orders the following items\")]\npublic void GivenTheUserOrdersTheFollowingItems(Table table)\n{\n    var shoppingCartItems = table.CreateSet<ShoppingCartItem>().ToList();\n    ScenarioContext.Current.ShoppingCartItems(shoppingCartItems);\n}\n[Given(@\"the following customer\")]\n\npublic void GivenTheFollowingCustomer(Table table)\n\n{\n\nvar customer = table.CreateInstance<Customer>();\n\nScenarioContext.Current.Customer(customer);\n\n}\n\n\n\n\n\nConvert Table Data to Anonymous Types for Ease of Use\nThe extension methods in TechTalk.SpecFlow.Assist.TableHelperExtensionMethods \nare useful for simple one-to-one mappings between table values and class\nproperties; however they cannot be used for more complex mappings which require\nmanual intervention. Let’s say the shopping cart in the previous examples is\nenhanced to include discounts as child items under the corresponding product.\nThis makes the ShoppingCartItem class hierarchal and difficult to model in a\nflat table structure. A new column called ParentItem has been added to the\nspecification to define the parent-child relationships, but it doesn’t map\neasily to the new list of child items in the ShoppingCartItem class. This means \ntable.CreateSet()  can’t be used.\n\npublic class ShoppingCartItem\n{\n    public ShoppingCartItem()\n    {\n        ShoppingCartItems = new List<ShoppingCartItem>();\n    }\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Name { get; set; }\n\n<span class=\"kwrd\">public</span> <span class=\"kwrd\">decimal</span> Price { get; set; }\n\n<span class=\"rem\">/// &lt;summary&gt;</span>\n<span class=\"rem\">/// A list of child shopping cart items.</span>\n<span class=\"rem\">/// &lt;/summary&gt;</span>\n<span class=\"kwrd\">public</span> List&lt;ShoppingCartItem&gt; ShoppingCartItems { get; set; }\n\n\n\n}\n\n\n\nGiven the user orders the following items\n    | Name                                                           | ParentItem          | Price  |\n    | The Mythical Man-Month                                         |                     | 29.09  |\n    | The Phoenix Project                                            |                     | 29.95  |\n    | Super Saver Discount                                           | The Phoenix Project | -10.00 |\n    | Promotional Discount                                           | The Phoenix Project | -6.00  |\n    | Design Patterns: Elements of Reusable Object-Oriented Software |                     | 39.95  |\n    | Lean In: Women, Work, and the Will to Lead                     |                     | 11.22  |\n\n\n\n\nWith this new requirement, the step definition becomes:\n\n[Given(@\"the user orders the following items\")]\npublic void GivenTheUserOrdersTheFollowingItems(Table table)\n{\n    var shoppingCartItems = new List<ShoppingCartItem>();\n<span class=\"kwrd\">foreach</span> (var row <span class=\"kwrd\">in</span> table.Rows)\n{\n    var shoppingCartItem = <span class=\"kwrd\">new</span> ShoppingCartItem { Name = row[<span class=\"str\">\"Name\"</span>], Price = Convert.ToDecimal(row[<span class=\"str\">\"Price\"</span>]) };\n\n    <span class=\"kwrd\">if</span> (<span class=\"kwrd\">string</span>.IsNullOrEmpty(row[<span class=\"str\">\"ParentItem\"</span>]))\n    {\n        shoppingCartItems.Add(shoppingCartItem);\n    }\n    <span class=\"kwrd\">else</span>\n    {\n        shoppingCartItem.Name = <span class=\"str\">\"&gt; \"</span> + shoppingCartItem.Name;\n        var parentShoppingCartItem = shoppingCartItems.First(s =&gt; s.Name == row[<span class=\"str\">\"ParentItem\"</span>]);\n        parentShoppingCartItem.ShoppingCartItems.Add(shoppingCartItem);\n    }\n}\n\nScenarioContext.Current.ShoppingCartItems(shoppingCartItems);\n\n\n\n}\n\n\n\n\n\nThis step definition works, but I don’t like now the row indexer is used\nthroughout the method. I think this makes the code less readable.\n\nAs an alternative, the table could be converted to a list of objects up front.\nAnonymous types let us avoid having to define a class for such a simple and\ntransient use case, and the remaining code uses the anonymous type which keeps\nthings neat.\n\n[Given(@\"the user orders the following items\")]\npublic void GivenTheUserOrdersTheFollowingItems(Table table)\n{\n    // Use an anonymous type up front to avoid having to use the table\n    // in the remainder of the method.\n    var items =\n        table.Rows.Select(\n            r => new {Name = r[\"Name\"], ParentItem = r[\"ParentItem\"], Price = Convert.ToDecimal(r[\"Price\"])});\n<span class=\"rem\">// The rest of the method doesn't use the table or row indexers.</span>\nvar shoppingCartItems = <span class=\"kwrd\">new</span> List&lt;ShoppingCartItem&gt;();\n\n<span class=\"kwrd\">foreach</span> (var item <span class=\"kwrd\">in</span> items)\n{\n    var shoppingCartItem = <span class=\"kwrd\">new</span> ShoppingCartItem {Name = item.Name, Price = item.Price};\n\n    <span class=\"kwrd\">if</span> (<span class=\"kwrd\">string</span>.IsNullOrEmpty(item.ParentItem))\n    {\n        shoppingCartItems.Add(shoppingCartItem);\n    }\n    <span class=\"kwrd\">else</span>\n    {\n        shoppingCartItem.Name = <span class=\"str\">\"&gt; \"</span> + shoppingCartItem.Name;\n        var parentShoppingCartItem = shoppingCartItems.First(s =&gt; s.Name == item.ParentItem);\n        parentShoppingCartItem.ShoppingCartItems.Add(shoppingCartItem);\n    }\n}\n\nScenarioContext.Current.ShoppingCartItems(shoppingCartItems);\n\n\n\n}\n\n\n\n\n\nFlatten Object Hierarchies When Doing Table Comparisons\nNow we have steps for reading in order items and saving them as a list of \nShoppingCartItem  instances in the ScenarioContext. Subsequent steps can\nmanipulate the order which in turn updates the shopping cart. It needs to be\nvalidated at the end of the test to ensure correct behavior.\n\nThen the following items should appear in the shopping cart\n    | Name                                                           | Price  |\n    | The Mythical Man-Month                                         | 29.09  |\n    | The Phoenix Project                                            | 29.95  |\n    | > Super Saver Discount                                         | -10.00 |\n    | > Promotional Discount                                         | -6.00  |\n    | Design Patterns: Elements of Reusable Object-Oriented Software | 39.95  |\n    | Lean In: Women, Work, and the Will to Lead                     | 11.22  |\n\n\nThe flat list of expected shopping cart items needs to be validated against the\nhierarchal shopping cart. The step definition below does just that, but it\nviolates tip one which is to avoid explicitly enumerating table rows. It is also\ndifficult to follow since it needs to iterate through the child shopping cart\nitems.\n\n[Then(@\"the following items should appear in the shopping cart\")]\npublic void ThenTheFollowingItemsShouldAppearInTheShoppingCart(Table table)\n{\n    var shoppingCartItems = ScenarioContext.Current.ShoppingCartItems().ToList();\n    shoppingCartItems.Reverse();\n    var stack = new Stack<ShoppingCartItem>(shoppingCartItems);\n<span class=\"kwrd\">for</span> (<span class=\"kwrd\">int</span> i = 0; i &lt; table.Rows.Count; i++ )\n{\n    var row = table.Rows[i];\n    var shoppingCartItem = stack.Pop();\n\n    Assert.That(row[<span class=\"str\">\"Name\"</span>], Is.EqualTo(shoppingCartItem.Name));\n    Assert.That(Convert.ToDecimal(row[<span class=\"str\">\"Price\"</span>]), Is.EqualTo(shoppingCartItem.Price));\n\n    var childItems = shoppingCartItem.ShoppingCartItems.ToList();\n    childItems.Reverse();\n\n    <span class=\"kwrd\">foreach</span> (var childShoppingCartItem <span class=\"kwrd\">in</span> childItems)\n        stack.Push(childShoppingCartItem);\n}\n\n\n\n}\n\n\n\n\n\nIdeally we would like to use the helper extension methods to do the table\ncomparison. This is possible by first flattening out the shopping cart hierarchy\ninto a list. The Flatten()  extension method does the trick and is invoked right\nbefore table.CompareToSet(). Now the step is just two lines of code. Much\nbetter.\n\npublic static class ShoppingCartExtensions\n{\n    /// <summary>\n    /// Returns each item in the shopping cart hierarchy in a simple list.\n    /// </summary>\n    public static List<ShoppingCartItem> Flatten(this List<ShoppingCartItem> shoppingCartItems)\n    {\n        var allItems = new List<ShoppingCartItem>();\n        shoppingCartItems.Flatten(allItems);\n        return allItems;\n    }\n<span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">void</span> Flatten(<span class=\"kwrd\">this</span> List&lt;ShoppingCartItem&gt; shoppingCartItems, List&lt;ShoppingCartItem&gt; allItems)\n{\n    shoppingCartItems.ForEach(i =&gt;\n        {\n            allItems.Add(i);\n            i.ShoppingCartItems.Flatten(allItems);\n        });\n}\n\n\n\n}\n\n\n[Then(@\"the following items should appear in the shopping cart\")]\n\npublic void ThenTheFollowingItemsShouldAppearInTheShoppingCart(Table table)\n\n{\n\nvar shoppingCartItems = ScenarioContext.Current.ShoppingCartItems().Flatten();\n\ntable.CompareToSet(shoppingCartItems);\n\n}\n\n\n\n\n\nThat’s all I have for now. For more information on tables and the table helper\nmethods, check out the links below.\n\nSpecflow Assist Helpers\n[https://github.com/techtalk/SpecFlow/wiki/SpecFlow-Assist-Helpers]\n\nFull Specflow Documentation\n[https://github.com/techtalk/SpecFlow/wiki/Documentation]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2017-10-22T02:55:32.000Z","updated_by":"1","published_at":"2013-07-20T11:21:08.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b48e","uuid":"22325ce1-970e-4844-8627-58b5cd1e5a7a","title":"Switching to Ghost","slug":"switchimg-to-ghost","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I had been blogging with Wordpress for over two years, and while Wordpress has some great features like the statistics and comments engine, the core writing experience was never completely smooth for me. The online editor has a tendency to get spacing wrong and reformat blocks of text on a whim. Editing with Windows Live Writer is a improvement, but doing simple things like adding snippets of code or XML was always more difficult than necessary. I had to install a plug-in to get the formatting right.\\n\\nWell, this week I switched Blog providers from Wordpress to Ghost. The driver behind the move was the fact that Ghost uses Markdown as its mark-up language. I have some experience using Markdown on Github and have come to love it. Delimiting code either inline or as a block is dead simple. Lists, block quotes, headers are also easy. And if Markdown doesn't give you what you want, you can fall back to inline HTML. To make writing even easier, Ghost provides a preview window next to the editor. It really is the best writing experience on the web.\\n\\nI'd been looking for a Markdown-based blog engine for a while, and after seeing Ghost in action, the decision was easy.\\n\\nThat's not to say that Ghost is perfect. It's far from perfect. It is still a new platform, having launched in September, and is missing a few features one would expect from a blog engine.\\n\\nThe first and most glaring omission is the lack of comments. If you're hosting ghost, [you can tweak it to add Disqus](http://christophvoigt.com/enable-comments-on-ghost-with-disqus/) or another third party service. If you go with the hosted solution, I'm not aware of any way of adding comments. For me, this was disappointing but something I could live with for now.\\n\\nAnother missing feature is Ghost doesn't allow uploading media like images or videos. I worked around this by using a separate server for media hosting.\\n\\nFinally, Ghost has weak support for custom domains. I was able to get joebuschmann.com pointed to my blog correctly, but because the hosted solution doesn't support A records, I had to switch DNS services from Network Solutions to CloudFlare. CloudFlare allows the configuration of CNAME records for a root domain whereas Network Solutions does not. In the end it was a good move. The CloudFlare site is less cluttered and easier to use. The Ghost team has [a good walkthrough for adding custom domains](https://ghost.org/blogs/domains/).\\n\\nDespite these limitations, I'm very excited about Ghost. The excellent Markdown editor and preview pane make the other annoyances worthwhile. Now, time to uninstall Windows Live Writer.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I had been blogging with Wordpress for over two years, and while Wordpress has some great features like the statistics and comments engine, the core writing experience was never completely smooth for me. The online editor has a tendency to get spacing wrong and reformat blocks of text on a whim. Editing with Windows Live Writer is a improvement, but doing simple things like adding snippets of code or XML was always more difficult than necessary. I had to install a plug-in to get the formatting right.</p>\n<p>Well, this week I switched Blog providers from Wordpress to Ghost. The driver behind the move was the fact that Ghost uses Markdown as its mark-up language. I have some experience using Markdown on Github and have come to love it. Delimiting code either inline or as a block is dead simple. Lists, block quotes, headers are also easy. And if Markdown doesn't give you what you want, you can fall back to inline HTML. To make writing even easier, Ghost provides a preview window next to the editor. It really is the best writing experience on the web.</p>\n<p>I'd been looking for a Markdown-based blog engine for a while, and after seeing Ghost in action, the decision was easy.</p>\n<p>That's not to say that Ghost is perfect. It's far from perfect. It is still a new platform, having launched in September, and is missing a few features one would expect from a blog engine.</p>\n<p>The first and most glaring omission is the lack of comments. If you're hosting ghost, <a href=\"http://christophvoigt.com/enable-comments-on-ghost-with-disqus/\">you can tweak it to add Disqus</a> or another third party service. If you go with the hosted solution, I'm not aware of any way of adding comments. For me, this was disappointing but something I could live with for now.</p>\n<p>Another missing feature is Ghost doesn't allow uploading media like images or videos. I worked around this by using a separate server for media hosting.</p>\n<p>Finally, Ghost has weak support for custom domains. I was able to get <a href=\"http://joebuschmann.com\">joebuschmann.com</a> pointed to my blog correctly, but because the hosted solution doesn't support A records, I had to switch DNS services from Network Solutions to CloudFlare. CloudFlare allows the configuration of CNAME records for a root domain whereas Network Solutions does not. In the end it was a good move. The CloudFlare site is less cluttered and easier to use. The Ghost team has <a href=\"https://ghost.org/blogs/domains/\">a good walkthrough for adding custom domains</a>.</p>\n<p>Despite these limitations, I'm very excited about Ghost. The excellent Markdown editor and preview pane make the other annoyances worthwhile. Now, time to uninstall Windows Live Writer.</p>\n</div>","amp":"20","plaintext":"I had been blogging with Wordpress for over two years, and while Wordpress has\nsome great features like the statistics and comments engine, the core writing\nexperience was never completely smooth for me. The online editor has a tendency\nto get spacing wrong and reformat blocks of text on a whim. Editing with Windows\nLive Writer is a improvement, but doing simple things like adding snippets of\ncode or XML was always more difficult than necessary. I had to install a plug-in\nto get the formatting right.\n\nWell, this week I switched Blog providers from Wordpress to Ghost. The driver\nbehind the move was the fact that Ghost uses Markdown as its mark-up language. I\nhave some experience using Markdown on Github and have come to love it.\nDelimiting code either inline or as a block is dead simple. Lists, block quotes,\nheaders are also easy. And if Markdown doesn't give you what you want, you can\nfall back to inline HTML. To make writing even easier, Ghost provides a preview\nwindow next to the editor. It really is the best writing experience on the web.\n\nI'd been looking for a Markdown-based blog engine for a while, and after seeing\nGhost in action, the decision was easy.\n\nThat's not to say that Ghost is perfect. It's far from perfect. It is still a\nnew platform, having launched in September, and is missing a few features one\nwould expect from a blog engine.\n\nThe first and most glaring omission is the lack of comments. If you're hosting\nghost, you can tweak it to add Disqus\n[http://christophvoigt.com/enable-comments-on-ghost-with-disqus/]  or another\nthird party service. If you go with the hosted solution, I'm not aware of any\nway of adding comments. For me, this was disappointing but something I could\nlive with for now.\n\nAnother missing feature is Ghost doesn't allow uploading media like images or\nvideos. I worked around this by using a separate server for media hosting.\n\nFinally, Ghost has weak support for custom domains. I was able to get \njoebuschmann.com [http://joebuschmann.com]  pointed to my blog correctly, but\nbecause the hosted solution doesn't support A records, I had to switch DNS\nservices from Network Solutions to CloudFlare. CloudFlare allows the\nconfiguration of CNAME records for a root domain whereas Network Solutions does\nnot. In the end it was a good move. The CloudFlare site is less cluttered and\neasier to use. The Ghost team has a good walkthrough for adding custom domains\n[https://ghost.org/blogs/domains/].\n\nDespite these limitations, I'm very excited about Ghost. The excellent Markdown\neditor and preview pane make the other annoyances worthwhile. Now, time to\nuninstall Windows Live Writer.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-29T16:17:33.000Z","created_by":"1","updated_at":"2013-12-29T22:28:49.000Z","updated_by":"1","published_at":"2013-12-29T22:01:55.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b48f","uuid":"d61e1c31-305f-4e22-ae40-5cc1b774a57a","title":"A Tribute to Two Ladies in My Life","slug":"a-tribute-to-two-ladies-in-my-life","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I'd like to take a break from my usual tech writing to bring you a very special holiday post. There are two ladies in my life that make each day better than the last, and I want to thank them for making 2013 a great year. My wife, Mary, has been with me for almost 10 years, and we're still best friends. My daughter, Emilia, just turned four. She is a little lady who turns every day into an adventure.\\n\\n<img src=\\\"http://media.joebuschmann.com/mary_and_emilia.jpg\\\" alt=\\\"Mary and Emilia\\\" width=\\\"300\\\" style=\\\"display: block; margin: 0 auto;\\\">\\n\\nPlease enjoy the slide show and have a great new year.\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"//www.youtube.com/embed/3lC3h-Uxtmo\\\" frameborder=\\\"0\\\" allowfullscreen  style=\\\"display: block; margin: 0 auto;\\\"></iframe>\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I'd like to take a break from my usual tech writing to bring you a very special holiday post. There are two ladies in my life that make each day better than the last, and I want to thank them for making 2013 a great year. My wife, Mary, has been with me for almost 10 years, and we're still best friends. My daughter, Emilia, just turned four. She is a little lady who turns every day into an adventure.</p>\n<img src=\"http://media.joebuschmann.com/mary_and_emilia.jpg\" alt=\"Mary and Emilia\" width=\"300\" style=\"display: block; margin: 0 auto;\">\n<p>Please enjoy the slide show and have a great new year.</p>\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/3lC3h-Uxtmo\" frameborder=\"0\" allowfullscreen  style=\"display: block; margin: 0 auto;\"></iframe>\n</div>","amp":"21","plaintext":"I'd like to take a break from my usual tech writing to bring you a very special\nholiday post. There are two ladies in my life that make each day better than the\nlast, and I want to thank them for making 2013 a great year. My wife, Mary, has\nbeen with me for almost 10 years, and we're still best friends. My daughter,\nEmilia, just turned four. She is a little lady who turns every day into an\nadventure.\n\nPlease enjoy the slide show and have a great new year.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2013-12-29T22:43:05.000Z","created_by":"1","updated_at":"2017-02-08T20:38:15.000Z","updated_by":"1","published_at":"2013-12-30T03:53:46.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b490","uuid":"02bf5218-4cfb-4ae0-9c2f-fb5e1e5a4ca7","title":"Microsoft to Integrate Git into Windows","slug":"microsoft-to-integrate-git-into-windows","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"It seems like every day I read about a new use for Git outside of source control. It's used by artists and authors to track changes to their work. It's used by researchers to branch experiments.\\n\\nWell, today I came across the latest and most surprising Git integration. Just out of Redmond, Microsoft has announced that Git will be integrated into the next version of Windows via extensions to NTFS and the Windows kernel.\\n\\nMicrosoft's press release details the features Git will bring. The coolest one is the ability to create machine images as branches and easily switch between images by running `git checkout [branch]`. Imagine having two Git branches or images called *web* and *database*. Turning your machine into a fully configured web server is as simple as `git checkout web`. Need a database server? Then run `git checkout database`.\\n\\nEven better you can push an image to a remote server with `git push [remote] [branch]` and checkout the branch on the remote server to deploy the image. Windows will perform either a partial reboot, full reboot, or restart selected services depending on what changed. In other words, you can tweak a server's settings on a local image, verify the changes, and then push the image to the server. All using Git.\\n\\nOther features include:\\n\\n* Tracking the history of every file to enable users to recover older versions.\\n* Enabling fine grained system restores down to single character changes to a file.\\n* A slick history view built into Windows File Explorer.\\n* Git support for Skydrive files.\\n* Simple registry restores.\\n\\nJust when I think I've seen it all, something like this comes along and blows my mind. For more details, check out the [press release](http://media.joebuschmann.com/april_fools.jpg).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>It seems like every day I read about a new use for Git outside of source control. It's used by artists and authors to track changes to their work. It's used by researchers to branch experiments.</p>\n<p>Well, today I came across the latest and most surprising Git integration. Just out of Redmond, Microsoft has announced that Git will be integrated into the next version of Windows via extensions to NTFS and the Windows kernel.</p>\n<p>Microsoft's press release details the features Git will bring. The coolest one is the ability to create machine images as branches and easily switch between images by running <code>git checkout [branch]</code>. Imagine having two Git branches or images called <em>web</em> and <em>database</em>. Turning your machine into a fully configured web server is as simple as <code>git checkout web</code>. Need a database server? Then run <code>git checkout database</code>.</p>\n<p>Even better you can push an image to a remote server with <code>git push [remote] [branch]</code> and checkout the branch on the remote server to deploy the image. Windows will perform either a partial reboot, full reboot, or restart selected services depending on what changed. In other words, you can tweak a server's settings on a local image, verify the changes, and then push the image to the server. All using Git.</p>\n<p>Other features include:</p>\n<ul>\n<li>Tracking the history of every file to enable users to recover older versions.</li>\n<li>Enabling fine grained system restores down to single character changes to a file.</li>\n<li>A slick history view built into Windows File Explorer.</li>\n<li>Git support for Skydrive files.</li>\n<li>Simple registry restores.</li>\n</ul>\n<p>Just when I think I've seen it all, something like this comes along and blows my mind. For more details, check out the <a href=\"http://media.joebuschmann.com/april_fools.jpg\">press release</a>.</p>\n</div>","amp":"22","plaintext":"It seems like every day I read about a new use for Git outside of source\ncontrol. It's used by artists and authors to track changes to their work. It's\nused by researchers to branch experiments.\n\nWell, today I came across the latest and most surprising Git integration. Just\nout of Redmond, Microsoft has announced that Git will be integrated into the\nnext version of Windows via extensions to NTFS and the Windows kernel.\n\nMicrosoft's press release details the features Git will bring. The coolest one\nis the ability to create machine images as branches and easily switch between\nimages by running git checkout [branch]. Imagine having two Git branches or\nimages called web  and database. Turning your machine into a fully configured\nweb server is as simple as git checkout web. Need a database server? Then run \ngit checkout database.\n\nEven better you can push an image to a remote server with git push [remote]\n[branch]  and checkout the branch on the remote server to deploy the image.\nWindows will perform either a partial reboot, full reboot, or restart selected\nservices depending on what changed. In other words, you can tweak a server's\nsettings on a local image, verify the changes, and then push the image to the\nserver. All using Git.\n\nOther features include:\n\n * Tracking the history of every file to enable users to recover older versions.\n * Enabling fine grained system restores down to single character changes to a\n   file.\n * A slick history view built into Windows File Explorer.\n * Git support for Skydrive files.\n * Simple registry restores.\n\nJust when I think I've seen it all, something like this comes along and blows my\nmind. For more details, check out the press release\n[http://media.joebuschmann.com/april_fools.jpg].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-01-13T22:40:41.000Z","created_by":"1","updated_at":"2017-02-08T20:39:17.000Z","updated_by":"1","published_at":"2014-04-01T12:32:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b491","uuid":"ee595444-fbd9-4577-a53e-62d5d452d7e1","title":"Fit.js Documentation","slug":"fit-js-documentation","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"While I don't use the [Fit.js](https://github.com/soulwire/fit.js) javascript library in my day-to-day work, I was struck by its simple and effective documentation. Check out the [README](https://github.com/soulwire/fit.js/blob/master/README.md) and [demo page](http://soulwire.github.io/fit.js/). In just minutes, you can read the doc and know exactly what the library is and what it can do for you. Even the tagline is cool.\\n\\n    fit( theThing, /* into */ theOtherThing );\\n\\nThis documentation style (not sure what to call it) inspired me to add a [Quick Start](https://github.com/joebuschmann/sproxy.js#quick-start) section to my own Javascript libary [SProxy](https://github.com/joebuschmann/sproxy.js) with a similar feel.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>While I don't use the <a href=\"https://github.com/soulwire/fit.js\">Fit.js</a> javascript library in my day-to-day work, I was struck by its simple and effective documentation. Check out the <a href=\"https://github.com/soulwire/fit.js/blob/master/README.md\">README</a> and <a href=\"http://soulwire.github.io/fit.js/\">demo page</a>. In just minutes, you can read the doc and know exactly what the library is and what it can do for you. Even the tagline is cool.</p>\n<pre><code>fit( theThing, /* into */ theOtherThing );\n</code></pre>\n<p>This documentation style (not sure what to call it) inspired me to add a <a href=\"https://github.com/joebuschmann/sproxy.js#quick-start\">Quick Start</a> section to my own Javascript libary <a href=\"https://github.com/joebuschmann/sproxy.js\">SProxy</a> with a similar feel.</p>\n</div>","amp":"26","plaintext":"While I don't use the Fit.js [https://github.com/soulwire/fit.js]  javascript\nlibrary in my day-to-day work, I was struck by its simple and effective\ndocumentation. Check out the README\n[https://github.com/soulwire/fit.js/blob/master/README.md]  and demo page\n[http://soulwire.github.io/fit.js/]. In just minutes, you can read the doc and\nknow exactly what the library is and what it can do for you. Even the tagline is\ncool.\n\nfit( theThing, /* into */ theOtherThing );\n\n\nThis documentation style (not sure what to call it) inspired me to add a Quick\nStart  section to my own Javascript libary SProxy\n[https://github.com/joebuschmann/sproxy.js]  with a similar feel.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-04-22T00:58:48.000Z","created_by":"1","updated_at":"2015-01-05T20:43:00.000Z","updated_by":"1","published_at":"2014-04-22T01:10:56.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b492","uuid":"cfe02e84-55c1-45a9-ae63-957dc6b19243","title":"Automating IIS Configuration Using AppCmd.exe","slug":"automating-iis-configuration-using-appcmd-exe","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"A couple weeks ago I wrote a script to completely automate the set up of IIS for some system tests at work. The tests require three IIS applications along with unique application pools, and the applications need to be segregated under a virtual directory to isolate them from other automated tests. This was done for a local set up for application developers.\\n\\nThis simple script took what could have been an error prone manual process and made it quick and mostly fool proof.\\n\\nIf you're not familiar with appcmd.exe, it is a command line utility for managing IIS 7+. Pretty much anything you can do with the IIS Manager GUI you can do with appcmd. The API is elegant and well thought out. Each invocation of appcmd requires two arguments, a command and an object type. The optional arguments include the object identifier and configuration parameters.\\n\\nSay you want to get a list of all web applications:\\n\\n```\\nC:\\\\Windows\\\\System32\\\\inetsrv>appcmd list app\\n```\\n\\nOr you want to add a web app:\\n\\n```\\nC:\\\\Windows\\\\System32\\\\inetsrv>appcmd add app /site.name:\\\"Default Web Site\\\" /path:/MyWebApp /physicalPath:C:\\\\MyWebApp\\n```\\n\\nBelow is a complete example that demonstrates the power of appcmd. It is a batch script that builds out a website, virtual directory, application, and app pool.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/2b87280535cdcc1d9b41.js\\\"></script>\\n\\nFor a list of all available object types and commands, see [Getting Started with AppCmd.exe](http://www.iis.net/learn/get-started/getting-started-with-iis/getting-started-with-appcmdexe).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>A couple weeks ago I wrote a script to completely automate the set up of IIS for some system tests at work. The tests require three IIS applications along with unique application pools, and the applications need to be segregated under a virtual directory to isolate them from other automated tests. This was done for a local set up for application developers.</p>\n<p>This simple script took what could have been an error prone manual process and made it quick and mostly fool proof.</p>\n<p>If you're not familiar with appcmd.exe, it is a command line utility for managing IIS 7+. Pretty much anything you can do with the IIS Manager GUI you can do with appcmd. The API is elegant and well thought out. Each invocation of appcmd requires two arguments, a command and an object type. The optional arguments include the object identifier and configuration parameters.</p>\n<p>Say you want to get a list of all web applications:</p>\n<pre><code>C:\\Windows\\System32\\inetsrv&gt;appcmd list app\n</code></pre>\n<p>Or you want to add a web app:</p>\n<pre><code>C:\\Windows\\System32\\inetsrv&gt;appcmd add app /site.name:&quot;Default Web Site&quot; /path:/MyWebApp /physicalPath:C:\\MyWebApp\n</code></pre>\n<p>Below is a complete example that demonstrates the power of appcmd. It is a batch script that builds out a website, virtual directory, application, and app pool.</p>\n<script src=\"https://gist.github.com/joebuschmann/2b87280535cdcc1d9b41.js\"></script>\n<p>For a list of all available object types and commands, see <a href=\"http://www.iis.net/learn/get-started/getting-started-with-iis/getting-started-with-appcmdexe\">Getting Started with AppCmd.exe</a>.</p>\n</div>","amp":"27","plaintext":"A couple weeks ago I wrote a script to completely automate the set up of IIS for\nsome system tests at work. The tests require three IIS applications along with\nunique application pools, and the applications need to be segregated under a\nvirtual directory to isolate them from other automated tests. This was done for\na local set up for application developers.\n\nThis simple script took what could have been an error prone manual process and\nmade it quick and mostly fool proof.\n\nIf you're not familiar with appcmd.exe, it is a command line utility for\nmanaging IIS 7+. Pretty much anything you can do with the IIS Manager GUI you\ncan do with appcmd. The API is elegant and well thought out. Each invocation of\nappcmd requires two arguments, a command and an object type. The optional\narguments include the object identifier and configuration parameters.\n\nSay you want to get a list of all web applications:\n\nC:\\Windows\\System32\\inetsrv>appcmd list app\n\n\nOr you want to add a web app:\n\nC:\\Windows\\System32\\inetsrv>appcmd add app /site.name:\"Default Web Site\" /path:/MyWebApp /physicalPath:C:\\MyWebApp\n\n\nBelow is a complete example that demonstrates the power of appcmd. It is a batch\nscript that builds out a website, virtual directory, application, and app pool.\n\nFor a list of all available object types and commands, see Getting Started with\nAppCmd.exe\n[http://www.iis.net/learn/get-started/getting-started-with-iis/getting-started-with-appcmdexe]\n.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-06-02T12:30:01.000Z","created_by":"1","updated_at":"2014-06-06T11:21:45.000Z","updated_by":"1","published_at":"2014-06-02T14:04:48.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b493","uuid":"82e000d2-3140-4a0f-a1fe-504465f831fb","title":"Customizing a Ghost Theme","slug":"customizing-a-ghost-theme","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Customizing a Ghost blog theme can be as easy as taking the default Casper theme and tweaking it to your taste. I finally got around to creating my own theme to correct some niggling annoyances with Casper. I could have downloaded a prebuilt theme from the [Ghost marketplace](http://marketplace.ghost.org/), but my changes were minor so I opted to create my own. I started by checking out the [themes documentation](http://docs.ghost.org/themes/).\\n\\nTo test out my new theme, I [installed the Ghost platform](http://support.ghost.org/installing-ghost-windows/). Casper is located under `/content/themes` in the install directory. You can tweak it and test it out from there.\\n\\n##### Adding comments\\n\\nBy default, Ghost doesn't come with comments but you can include a third party comment provider like [Disqus](https://disqus.com/) by adding a snippet of HTML to `post.hbs`. There are several write-ups on how to do this, but Christoph Voigt has [the best one](http://blog.christophvoigt.com/enable-comments-on-ghost-with-disqus) I've found. You can take it one step further and separate the Disqus snippet into a partial Handlebars file and include it by adding `{{> disqus-post}}` where you want your comments to go.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a03ca5a702ea0f4aa90a.js\\\"></script>\\n\\n##### Social links\\n\\nNext, I wanted to add links to Twitter, Github, and Facebook as well as to any static pages created in Ghost. An about page is a good example of a static page.\\n\\nInitially, I added simple anchor elements with the URLs hard-coded on the page; however updating them became a chore once they were on several pages. A better solution would be to mark anchor elements as social links and dynamically load the URL from a config file. Ideally this would be done on the server, but since since my blog is hosted and I don't have control over the core code, I settled on having Javascript run on the client to load the URLs. If there are better ways of doing this, please let me know.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d39967e45ed6dc12f9aa.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fe1dbe2ab3119f7c0f31.js\\\"></script>\\n\\nThe first snippet is a JSON configuration file containing key/value pairs. The key identifies the kind of link, and the value is the URL. The second snippet is Javascript that scans a page looking for anchor elements with the `social-link` attribute whose value matches a key. When one is found, it sets the URL. For example, the HTML element `<a social-link=\\\"about\\\">about me</a>` will have its href attribute set to the URL configured for the key \\\"about\\\".\\n\\nI placed the script in `default.hbs` so I could add social links to any page. If a URL changes, it only needs to be updated in the configuration file, and all pages will get the new value.\\n\\n##### Packaging shell script\\n\\nIf you're running the hosted solution (Ghost Pro) like I am, you'll need to zip up the theme files and upload them on the [Ghost blog management page](https://ghost.org/). Below is a simple shell script which creates a .zip file and renames the theme to Casper-JoeBuschmann.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0598171f19d893c66a24.js\\\"></script>\\n\\nFor more information on customizing Ghost themes, check out [How to Make Ghost Themes](http://docs.ghost.org/themes/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Customizing a Ghost blog theme can be as easy as taking the default Casper theme and tweaking it to your taste. I finally got around to creating my own theme to correct some niggling annoyances with Casper. I could have downloaded a prebuilt theme from the <a href=\"http://marketplace.ghost.org/\">Ghost marketplace</a>, but my changes were minor so I opted to create my own. I started by checking out the <a href=\"http://docs.ghost.org/themes/\">themes documentation</a>.</p>\n<p>To test out my new theme, I <a href=\"http://support.ghost.org/installing-ghost-windows/\">installed the Ghost platform</a>. Casper is located under <code>/content/themes</code> in the install directory. You can tweak it and test it out from there.</p>\n<h5 id=\"addingcomments\">Adding comments</h5>\n<p>By default, Ghost doesn't come with comments but you can include a third party comment provider like <a href=\"https://disqus.com/\">Disqus</a> by adding a snippet of HTML to <code>post.hbs</code>. There are several write-ups on how to do this, but Christoph Voigt has <a href=\"http://blog.christophvoigt.com/enable-comments-on-ghost-with-disqus\">the best one</a> I've found. You can take it one step further and separate the Disqus snippet into a partial Handlebars file and include it by adding <code>{{&gt; disqus-post}}</code> where you want your comments to go.</p>\n<script src=\"https://gist.github.com/joebuschmann/a03ca5a702ea0f4aa90a.js\"></script>\n<h5 id=\"sociallinks\">Social links</h5>\n<p>Next, I wanted to add links to Twitter, Github, and Facebook as well as to any static pages created in Ghost. An about page is a good example of a static page.</p>\n<p>Initially, I added simple anchor elements with the URLs hard-coded on the page; however updating them became a chore once they were on several pages. A better solution would be to mark anchor elements as social links and dynamically load the URL from a config file. Ideally this would be done on the server, but since since my blog is hosted and I don't have control over the core code, I settled on having Javascript run on the client to load the URLs. If there are better ways of doing this, please let me know.</p>\n<script src=\"https://gist.github.com/joebuschmann/d39967e45ed6dc12f9aa.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/fe1dbe2ab3119f7c0f31.js\"></script>\n<p>The first snippet is a JSON configuration file containing key/value pairs. The key identifies the kind of link, and the value is the URL. The second snippet is Javascript that scans a page looking for anchor elements with the <code>social-link</code> attribute whose value matches a key. When one is found, it sets the URL. For example, the HTML element <code>&lt;a social-link=&quot;about&quot;&gt;about me&lt;/a&gt;</code> will have its href attribute set to the URL configured for the key &quot;about&quot;.</p>\n<p>I placed the script in <code>default.hbs</code> so I could add social links to any page. If a URL changes, it only needs to be updated in the configuration file, and all pages will get the new value.</p>\n<h5 id=\"packagingshellscript\">Packaging shell script</h5>\n<p>If you're running the hosted solution (Ghost Pro) like I am, you'll need to zip up the theme files and upload them on the <a href=\"https://ghost.org/\">Ghost blog management page</a>. Below is a simple shell script which creates a .zip file and renames the theme to Casper-JoeBuschmann.</p>\n<script src=\"https://gist.github.com/joebuschmann/0598171f19d893c66a24.js\"></script>\n<p>For more information on customizing Ghost themes, check out <a href=\"http://docs.ghost.org/themes/\">How to Make Ghost Themes</a>.</p>\n</div>","amp":"29","plaintext":"Customizing a Ghost blog theme can be as easy as taking the default Casper theme\nand tweaking it to your taste. I finally got around to creating my own theme to\ncorrect some niggling annoyances with Casper. I could have downloaded a prebuilt\ntheme from the Ghost marketplace [http://marketplace.ghost.org/], but my changes\nwere minor so I opted to create my own. I started by checking out the themes\ndocumentation [http://docs.ghost.org/themes/].\n\nTo test out my new theme, I installed the Ghost platform\n[http://support.ghost.org/installing-ghost-windows/]. Casper is located under \n/content/themes  in the install directory. You can tweak it and test it out from\nthere.\n\nAdding comments\nBy default, Ghost doesn't come with comments but you can include a third party\ncomment provider like Disqus [https://disqus.com/]  by adding a snippet of HTML\nto post.hbs. There are several write-ups on how to do this, but Christoph Voigt\nhas the best one\n[http://blog.christophvoigt.com/enable-comments-on-ghost-with-disqus]  I've\nfound. You can take it one step further and separate the Disqus snippet into a\npartial Handlebars file and include it by adding {{> disqus-post}}  where you\nwant your comments to go.\n\nSocial links\nNext, I wanted to add links to Twitter, Github, and Facebook as well as to any\nstatic pages created in Ghost. An about page is a good example of a static page.\n\nInitially, I added simple anchor elements with the URLs hard-coded on the page;\nhowever updating them became a chore once they were on several pages. A better\nsolution would be to mark anchor elements as social links and dynamically load\nthe URL from a config file. Ideally this would be done on the server, but since\nsince my blog is hosted and I don't have control over the core code, I settled\non having Javascript run on the client to load the URLs. If there are better\nways of doing this, please let me know.\n\nThe first snippet is a JSON configuration file containing key/value pairs. The\nkey identifies the kind of link, and the value is the URL. The second snippet is\nJavascript that scans a page looking for anchor elements with the social-link \nattribute whose value matches a key. When one is found, it sets the URL. For\nexample, the HTML element <a social-link=\"about\">about me</a>  will have its\nhref attribute set to the URL configured for the key \"about\".\n\nI placed the script in default.hbs  so I could add social links to any page. If\na URL changes, it only needs to be updated in the configuration file, and all\npages will get the new value.\n\nPackaging shell script\nIf you're running the hosted solution (Ghost Pro) like I am, you'll need to zip\nup the theme files and upload them on the Ghost blog management page\n[https://ghost.org/]. Below is a simple shell script which creates a .zip file\nand renames the theme to Casper-JoeBuschmann.\n\nFor more information on customizing Ghost themes, check out How to Make Ghost\nThemes [http://docs.ghost.org/themes/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-09-25T20:30:36.000Z","created_by":"1","updated_at":"2015-01-05T20:42:00.000Z","updated_by":"1","published_at":"2014-09-26T16:26:51.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b494","uuid":"0a74ae2f-5799-4047-b016-1d7f3da11024","title":"Strategies for Managing State in SpecFlow","slug":"strategies-for-managing-state-in-specflow","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"SpecFlow is an extension for Visual Studio that binds software specifications written in the Gherkin language to executable code written in C#, VB, or some other .NET language. One of the challenges of implementing a SpecFlow scenario is how to manage test state in between steps. At first glance, state management seems like an easy problem to solve, but as your test suite grows, maintaining the implementation is as difficult as any large software project.\\n\\nFor this post, I'm going to run through the different state management mechanisms I've encountered in my SpecFlow experience and review the pros and cons of each. I'll use the default calculator feature generated by SpecFlow to illustrate the different approaches.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/37aa6215c7327899824a.js\\\"></script>\\n\\nThe service under test will be a straightforward calculator service which uses a single method `Add()` to find the sum of a list of numbers.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/e5155a5fa2cc2e3b2b7e.js\\\"></script>\\n\\n#### Scenario Context\\n\\nThe first state management mechanism uses a SpecFlow runtime construct called the scenario context. It is an object that contains a state bag which persists in memory for the lifetime of an executing scenario. It is accessible via the static `ScenarioContext.Current` property, and each test step can manipulate the scenario context state bag by adding/removing/updating members.\\n\\nBelow is a step definition file that binds to `Calculator.feature`. It uses `ScenarioContext` to store the numbers entered into the calculator as well as the result. Later it retrieves them to perform the addition logic and verify the result.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/e3167213875f7e8dbec5.js\\\"></script>\\n\\nWhile the scenario context state bag is convenient and easy to use, it forces an explicit dependency on the SpecFlow runtime. Also, maintaining the dictionary keys becomes a hassle for large codebases.\\n\\n#### Private Members\\n\\nSince the SpecFlow runtime reuses the same instance of a step definition class for a scenario, you can save state in between method invocations by writing to private member variables. This is a improvement over using `ScenarioContext` as it significanty reduces the amount of code in a step definition class. The downside is the state cannot be shared with other step definition classes.\\n\\nIn the example, two private fields `_values` and `_result` replace the usages of `ScenarioContext`. The dictionary keys and the list initialization code go away, and the step methods clean up nicely.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/76c20ca025b6f3bd469c.js\\\"></script>\\n\\n#### Context Object\\n\\nYou can get around the limitations of private member variables by grouping related state into a context object. Then you can use the SpecFlow runtime's IoC container to inject the object into whatever step needs it. The `CalculatorContext` class contains the list of integers to add and a single integer to hold the result. An instance is injected into the constructor of `CalculatorSteps` and stored as a single private field. Other step implementation classes can ask for the same type in their constructors, and they will get the same shared instance.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/91a23c5066009538135b.js\\\"></script>\\n\\n#### Domain Object\\n\\nYou can take the context object approach one step further and include the behavior that exercises `CalculatorService` in the object itself. For example, the method `CalculatorSteps.WhenIPressAdd()` can be extracted from the steps class and moved to the new `Calculator` class. The result is the state and behavior are encapsulated in one place, and an instance of `Calculator` can be injected into each step definition class via the IoC container. The step definition becomes a thin layer with two responsibilities: invoking the test code in `Calculator` and verifying the result.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/65e33aec1e0c0990ac2a.js\\\"></script>\\n\\n------------------\\n\\nOf these four state management techniques, I prefer using private member variables for small simple tests and domain objects for complex tests with multiple step definition classes. I avoid using `ScenarioContext` as it doesn't scale well for large test suites.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>SpecFlow is an extension for Visual Studio that binds software specifications written in the Gherkin language to executable code written in C#, VB, or some other .NET language. One of the challenges of implementing a SpecFlow scenario is how to manage test state in between steps. At first glance, state management seems like an easy problem to solve, but as your test suite grows, maintaining the implementation is as difficult as any large software project.</p>\n<p>For this post, I'm going to run through the different state management mechanisms I've encountered in my SpecFlow experience and review the pros and cons of each. I'll use the default calculator feature generated by SpecFlow to illustrate the different approaches.</p>\n<script src=\"https://gist.github.com/joebuschmann/37aa6215c7327899824a.js\"></script>\n<p>The service under test will be a straightforward calculator service which uses a single method <code>Add()</code> to find the sum of a list of numbers.</p>\n<script src=\"https://gist.github.com/joebuschmann/e5155a5fa2cc2e3b2b7e.js\"></script>\n<h4 id=\"scenariocontext\">Scenario Context</h4>\n<p>The first state management mechanism uses a SpecFlow runtime construct called the scenario context. It is an object that contains a state bag which persists in memory for the lifetime of an executing scenario. It is accessible via the static <code>ScenarioContext.Current</code> property, and each test step can manipulate the scenario context state bag by adding/removing/updating members.</p>\n<p>Below is a step definition file that binds to <code>Calculator.feature</code>. It uses <code>ScenarioContext</code> to store the numbers entered into the calculator as well as the result. Later it retrieves them to perform the addition logic and verify the result.</p>\n<script src=\"https://gist.github.com/joebuschmann/e3167213875f7e8dbec5.js\"></script>\n<p>While the scenario context state bag is convenient and easy to use, it forces an explicit dependency on the SpecFlow runtime. Also, maintaining the dictionary keys becomes a hassle for large codebases.</p>\n<h4 id=\"privatemembers\">Private Members</h4>\n<p>Since the SpecFlow runtime reuses the same instance of a step definition class for a scenario, you can save state in between method invocations by writing to private member variables. This is a improvement over using <code>ScenarioContext</code> as it significanty reduces the amount of code in a step definition class. The downside is the state cannot be shared with other step definition classes.</p>\n<p>In the example, two private fields <code>_values</code> and <code>_result</code> replace the usages of <code>ScenarioContext</code>. The dictionary keys and the list initialization code go away, and the step methods clean up nicely.</p>\n<script src=\"https://gist.github.com/joebuschmann/76c20ca025b6f3bd469c.js\"></script>\n<h4 id=\"contextobject\">Context Object</h4>\n<p>You can get around the limitations of private member variables by grouping related state into a context object. Then you can use the SpecFlow runtime's IoC container to inject the object into whatever step needs it. The <code>CalculatorContext</code> class contains the list of integers to add and a single integer to hold the result. An instance is injected into the constructor of <code>CalculatorSteps</code> and stored as a single private field. Other step implementation classes can ask for the same type in their constructors, and they will get the same shared instance.</p>\n<script src=\"https://gist.github.com/joebuschmann/91a23c5066009538135b.js\"></script>\n<h4 id=\"domainobject\">Domain Object</h4>\n<p>You can take the context object approach one step further and include the behavior that exercises <code>CalculatorService</code> in the object itself. For example, the method <code>CalculatorSteps.WhenIPressAdd()</code> can be extracted from the steps class and moved to the new <code>Calculator</code> class. The result is the state and behavior are encapsulated in one place, and an instance of <code>Calculator</code> can be injected into each step definition class via the IoC container. The step definition becomes a thin layer with two responsibilities: invoking the test code in <code>Calculator</code> and verifying the result.</p>\n<script src=\"https://gist.github.com/joebuschmann/65e33aec1e0c0990ac2a.js\"></script>\n<hr>\n<p>Of these four state management techniques, I prefer using private member variables for small simple tests and domain objects for complex tests with multiple step definition classes. I avoid using <code>ScenarioContext</code> as it doesn't scale well for large test suites.</p>\n</div>","amp":"30","plaintext":"SpecFlow is an extension for Visual Studio that binds software specifications\nwritten in the Gherkin language to executable code written in C#, VB, or some\nother .NET language. One of the challenges of implementing a SpecFlow scenario\nis how to manage test state in between steps. At first glance, state management\nseems like an easy problem to solve, but as your test suite grows, maintaining\nthe implementation is as difficult as any large software project.\n\nFor this post, I'm going to run through the different state management\nmechanisms I've encountered in my SpecFlow experience and review the pros and\ncons of each. I'll use the default calculator feature generated by SpecFlow to\nillustrate the different approaches.\n\nThe service under test will be a straightforward calculator service which uses a\nsingle method Add()  to find the sum of a list of numbers.\n\nScenario Context\nThe first state management mechanism uses a SpecFlow runtime construct called\nthe scenario context. It is an object that contains a state bag which persists\nin memory for the lifetime of an executing scenario. It is accessible via the\nstatic ScenarioContext.Current  property, and each test step can manipulate the\nscenario context state bag by adding/removing/updating members.\n\nBelow is a step definition file that binds to Calculator.feature. It uses \nScenarioContext  to store the numbers entered into the calculator as well as the\nresult. Later it retrieves them to perform the addition logic and verify the\nresult.\n\nWhile the scenario context state bag is convenient and easy to use, it forces an\nexplicit dependency on the SpecFlow runtime. Also, maintaining the dictionary\nkeys becomes a hassle for large codebases.\n\nPrivate Members\nSince the SpecFlow runtime reuses the same instance of a step definition class\nfor a scenario, you can save state in between method invocations by writing to\nprivate member variables. This is a improvement over using ScenarioContext  as\nit significanty reduces the amount of code in a step definition class. The\ndownside is the state cannot be shared with other step definition classes.\n\nIn the example, two private fields _values  and _result  replace the usages of \nScenarioContext. The dictionary keys and the list initialization code go away,\nand the step methods clean up nicely.\n\nContext Object\nYou can get around the limitations of private member variables by grouping\nrelated state into a context object. Then you can use the SpecFlow runtime's IoC\ncontainer to inject the object into whatever step needs it. The \nCalculatorContext  class contains the list of integers to add and a single\ninteger to hold the result. An instance is injected into the constructor of \nCalculatorSteps  and stored as a single private field. Other step implementation\nclasses can ask for the same type in their constructors, and they will get the\nsame shared instance.\n\nDomain Object\nYou can take the context object approach one step further and include the\nbehavior that exercises CalculatorService  in the object itself. For example,\nthe method CalculatorSteps.WhenIPressAdd()  can be extracted from the steps\nclass and moved to the new Calculator  class. The result is the state and\nbehavior are encapsulated in one place, and an instance of Calculator  can be\ninjected into each step definition class via the IoC container. The step\ndefinition becomes a thin layer with two responsibilities: invoking the test\ncode in Calculator  and verifying the result.\n\n\n--------------------------------------------------------------------------------\n\nOf these four state management techniques, I prefer using private member\nvariables for small simple tests and domain objects for complex tests with\nmultiple step definition classes. I avoid using ScenarioContext  as it doesn't\nscale well for large test suites.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"One of the challenges of implementing a Specflow scenario is managing test state. For this post, I'll cover the pros and cons of four state mgt strategies.","author_id":"1","created_at":"2014-09-29T20:35:40.000Z","created_by":"1","updated_at":"2017-10-22T03:02:39.000Z","updated_by":"1","published_at":"2014-09-30T18:40:52.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b495","uuid":"4fd28be8-9e0a-4c86-ab61-1406f4f7d9f0","title":"Overusing Generics in .NET","slug":"overusing-generics-in-dot-net","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Generic types were a great addition to C# 2.0, but they are occasionally overused. There are times where calling object.GetType() or passing the type as an argument are sufficient.\\n\\nA good example can be found in the Specflow source code. The `TechTalk.SpecFlow.Assist.InstanceComparisonExtensionMethods` class contains a useful extension method `CompareToInstance<T>()` which takes a table of expected property values and compares them against an object.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0efa93da64b19e6c2576.js\\\"></script>\\n\\nThe generic type is completely unnecessary in this case. `T` is used as the type of the instance argument, but it is redundant since the runtime type can be found by invoking `Object.GetType()`.\\n\\nWith this in mind, the method can be refactored to a non-generic version without sacrificing any function. The type of the instance argument changes to `object`, and `typeof(T)` on line 5 becomes `instance.GetType()`. The private generic methods in the class can be refactored similarly. The result is code that is simpler and more straightforward.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/16035ad4645574c39519.js\\\"></script>\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Generic types were a great addition to C# 2.0, but they are occasionally overused. There are times where calling object.GetType() or passing the type as an argument are sufficient.</p>\n<p>A good example can be found in the Specflow source code. The <code>TechTalk.SpecFlow.Assist.InstanceComparisonExtensionMethods</code> class contains a useful extension method <code>CompareToInstance&lt;T&gt;()</code> which takes a table of expected property values and compares them against an object.</p>\n<script src=\"https://gist.github.com/joebuschmann/0efa93da64b19e6c2576.js\"></script>\n<p>The generic type is completely unnecessary in this case. <code>T</code> is used as the type of the instance argument, but it is redundant since the runtime type can be found by invoking <code>Object.GetType()</code>.</p>\n<p>With this in mind, the method can be refactored to a non-generic version without sacrificing any function. The type of the instance argument changes to <code>object</code>, and <code>typeof(T)</code> on line 5 becomes <code>instance.GetType()</code>. The private generic methods in the class can be refactored similarly. The result is code that is simpler and more straightforward.</p>\n<script src=\"https://gist.github.com/joebuschmann/16035ad4645574c39519.js\"></script>\n</div>","amp":"31","plaintext":"Generic types were a great addition to C# 2.0, but they are occasionally\noverused. There are times where calling object.GetType() or passing the type as\nan argument are sufficient.\n\nA good example can be found in the Specflow source code. The \nTechTalk.SpecFlow.Assist.InstanceComparisonExtensionMethods  class contains a\nuseful extension method CompareToInstance<T>()  which takes a table of expected\nproperty values and compares them against an object.\n\nThe generic type is completely unnecessary in this case. T  is used as the type\nof the instance argument, but it is redundant since the runtime type can be\nfound by invoking Object.GetType().\n\nWith this in mind, the method can be refactored to a non-generic version without\nsacrificing any function. The type of the instance argument changes to object,\nand typeof(T)  on line 5 becomes instance.GetType(). The private generic methods\nin the class can be refactored similarly. The result is code that is simpler and\nmore straightforward.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Generic types in .NET are occasionally overused. There are times where calling object.GetType() or passing the type as an argument is the better option.","author_id":"1","created_at":"2014-10-03T12:20:40.000Z","created_by":"1","updated_at":"2014-12-29T17:19:00.000Z","updated_by":"1","published_at":"2014-10-10T12:31:09.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b496","uuid":"37b8a6a7-c7ea-4177-b3a3-0bdf42e55db6","title":"Useful Regex for SpecFlow Bindings","slug":"useful-regex-for-specflow-bindings","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Below is a list of useful regular expressions (regex) for annotating SpecFlow bindings. I'm treating this post as a reference and will be updating it with new items from time to time.\\n\\n#### Singular or Plural\\n\\nSupport singular or plural wording.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4b35d619738733174332.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/aaacdf141e9b764bd6c6.js\\\"></script>\\n\\n#### Filter for Enum Values\\n\\nIf your binding takes an enumeration for an argument, you can limit the inputs from the Gherkin to just the valid values. In the snippets below, the possible values for the `SortOrder` argument are limited by the regex `(ascending|descending)` thus avoiding any runtime exeptions due to a bad value.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/dff4197d91065e9008a8.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/316119805f84f5f0b97f.js\\\"></script>\\n\\n#### Step Argument Transformations\\n\\nIf the ascending/descending text feels a little awkward in the Gherkin, you can take the previous example one step further and add a step argument transformation to handle less technical wording. The regex in the step definition becomes `(.*)`, and the regex in the step argument transform becomes `from (A-Z|Z-A)`. The transform takes the more readable text \\\"from A-Z\\\" or \\\"from Z-A\\\" and converts it into a `SortOrder` value.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fedf72efd71d3b1f148d.js\\\"></script>\\n\\n#### Convert 1st, 2nd, 3rd, etc to Integer\\n\\nHave you ever come across awkward Gherkin like this?\\n```\\nWhen I remove the item at index 10\\n```\\nAs it's written, the index value 10 is easy to extract into an argument, but the wording isn't very human friendly. Instead, you can update the wording to indicate the ordinal position without sacrificing readability and use a regex to extract the integral value.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/103821c6047f7109ddc1.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a52cd96573ae4f21e240.js\\\"></script>\\n\\n#### Make \\\"I\\\" Optional\\n\\nRepeating pronouns at the beginning of each step can get tedious. The previous example can be tweaked to remove the repetative \\\"I\\\"s.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/3b802a916892d065693a.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4883317c7d53cc0e80f8.js\\\"></script>\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Below is a list of useful regular expressions (regex) for annotating SpecFlow bindings. I'm treating this post as a reference and will be updating it with new items from time to time.</p>\n<h4 id=\"singularorplural\">Singular or Plural</h4>\n<p>Support singular or plural wording.</p>\n<script src=\"https://gist.github.com/joebuschmann/4b35d619738733174332.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/aaacdf141e9b764bd6c6.js\"></script>\n<h4 id=\"filterforenumvalues\">Filter for Enum Values</h4>\n<p>If your binding takes an enumeration for an argument, you can limit the inputs from the Gherkin to just the valid values. In the snippets below, the possible values for the <code>SortOrder</code> argument are limited by the regex <code>(ascending|descending)</code> thus avoiding any runtime exeptions due to a bad value.</p>\n<script src=\"https://gist.github.com/joebuschmann/dff4197d91065e9008a8.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/316119805f84f5f0b97f.js\"></script>\n<h4 id=\"stepargumenttransformations\">Step Argument Transformations</h4>\n<p>If the ascending/descending text feels a little awkward in the Gherkin, you can take the previous example one step further and add a step argument transformation to handle less technical wording. The regex in the step definition becomes <code>(.*)</code>, and the regex in the step argument transform becomes <code>from (A-Z|Z-A)</code>. The transform takes the more readable text &quot;from A-Z&quot; or &quot;from Z-A&quot; and converts it into a <code>SortOrder</code> value.</p>\n<script src=\"https://gist.github.com/joebuschmann/fedf72efd71d3b1f148d.js\"></script>\n<h4 id=\"convert1st2nd3rdetctointeger\">Convert 1st, 2nd, 3rd, etc to Integer</h4>\n<p>Have you ever come across awkward Gherkin like this?</p>\n<pre><code>When I remove the item at index 10\n</code></pre>\n<p>As it's written, the index value 10 is easy to extract into an argument, but the wording isn't very human friendly. Instead, you can update the wording to indicate the ordinal position without sacrificing readability and use a regex to extract the integral value.</p>\n<script src=\"https://gist.github.com/joebuschmann/103821c6047f7109ddc1.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/a52cd96573ae4f21e240.js\"></script>\n<h4 id=\"makeioptional\">Make &quot;I&quot; Optional</h4>\n<p>Repeating pronouns at the beginning of each step can get tedious. The previous example can be tweaked to remove the repetative &quot;I&quot;s.</p>\n<script src=\"https://gist.github.com/joebuschmann/3b802a916892d065693a.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/4883317c7d53cc0e80f8.js\"></script>\n</div>","amp":"32","plaintext":"Below is a list of useful regular expressions (regex) for annotating SpecFlow\nbindings. I'm treating this post as a reference and will be updating it with new\nitems from time to time.\n\nSingular or Plural\nSupport singular or plural wording.\n\nFilter for Enum Values\nIf your binding takes an enumeration for an argument, you can limit the inputs\nfrom the Gherkin to just the valid values. In the snippets below, the possible\nvalues for the SortOrder  argument are limited by the regex \n(ascending|descending)  thus avoiding any runtime exeptions due to a bad value.\n\nStep Argument Transformations\nIf the ascending/descending text feels a little awkward in the Gherkin, you can\ntake the previous example one step further and add a step argument\ntransformation to handle less technical wording. The regex in the step\ndefinition becomes (.*), and the regex in the step argument transform becomes \nfrom (A-Z|Z-A). The transform takes the more readable text \"from A-Z\" or \"from\nZ-A\" and converts it into a SortOrder  value.\n\nConvert 1st, 2nd, 3rd, etc to Integer\nHave you ever come across awkward Gherkin like this?\n\nWhen I remove the item at index 10\n\n\nAs it's written, the index value 10 is easy to extract into an argument, but the\nwording isn't very human friendly. Instead, you can update the wording to\nindicate the ordinal position without sacrificing readability and use a regex to\nextract the integral value.\n\nMake \"I\" Optional\nRepeating pronouns at the beginning of each step can get tedious. The previous\nexample can be tweaked to remove the repetative \"I\"s.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2014-10-06T15:19:50.000Z","created_by":"1","updated_at":"2017-10-22T03:04:18.000Z","updated_by":"1","published_at":"2014-10-18T10:20:35.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b497","uuid":"eb547b25-e47d-490d-a99d-106c604391c5","title":"My life as narrated by Lieutenant Frank Drebin","slug":"my-life-as-narrated-by-detective-frank-drebin","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Like many others I lead an ordinary life. Up at dawn, get the kids ready, then my wife and I head to work. To spice up the story of my life, I enlisted the help of Lieutenant Frank Drebin. Follow along as the Police Squad operative narrates my life with bad puns and worse metaphors.\\n\\n![Lieutenant Frank Drebin, Police Squad!](http://media.joebuschmann.com/frank_drebin_1.jpg)\\n\\n#### Dawn\\n\\nThe day started like any other. With a clean shave and a dirty diaper. Not mine, but my son's. You see, I'm a father of two and a mother of none. Each morning I get my son ready for daycare, and like any other morning, I walked into his room and flipped on the light. He squinted at the ceiling, confused and bewildered. Like Sarah Palin in a science classroom. Or anywhere for that matter.\\n\\nAs I changed his diaper, I noticed his left testicle was still undecended. \\\"Unusual but not unheard of.\\\" At least that's what his urologist Dr. Prickman told us.\\n\\n#### The Train Station\\n\\nThe train station had a musty odor after last night's rain. The cracks in the concrete slowly leaked water down the stained walls. I made my way up the stairs like any other morning and caught sight of a grey heap lying haphazardly on the ground. I picked it up. It was a cardigan. A light weave. Made for late spring or early fall. With the scent of purfume from days long past.\\n\\nI continued up the stairs holding the knitted garment. Someone had dropped it. And I was going to find out who.\\n\\nThe station was slow for a Monday morning. People milled about staring at their smartphones. Giggling over the mundane musings of friends...and kittens. I scanned the platform looking for this mystery lady. How would I find her? No doubt that a sophisticated anaysis of security footage would reveal the owner. But I didn't have time for sophisticated. The train was quickly approaching. Soon the moment would be lost. I had to act fast.\\n\\n\\\"Anyone lose a sweater?\\\" I yelled. A bent woman slowly shuffled toward me. \\\"Thank you sir\\\" she said.\\n\\nYou're welcome lady. You're welcome.\\n\\n#### The Office\\n\\nI stepped off the elevator and stepped into a maze of cubicles. Row after row, line after line. Like a bolo tie on a fat man, I felt small and insignificant.\\n\\nWalking toward my desk, I passed the usual suspects. The guy who insisted on signing his name with the Roman numeral \\\"III\\\" at the end. Next to him was a guy who told Asian jokes and said it was okay because he's a quarter Asian. Well, the other three quarters is an asshole.\\n\\nI turned a corner and passed a software developer who said I reminded him of Steve Martin. He did the Egyptian walk whenever we passed in the hall. At the office Christmas party, he said he would buy me a ukulele. I'm still waiting.\\n\\nThen there was the young lady in the back. She was from Minnesota, and yes, she was nice.\\n\\nI sat at my desk trying to recover from the commute when I heard my boss one cube over talking on the phone in Icelandic.\\n\\n\\\"[Icelandic, Icelandic, Icelandic] reboot [Icelandic] start button.\\\"\\n\\nMust be helping his mom with her computer again.\\n\\n#### Story Time\\n\\nAs I read the author's so called account, I began to get suspicious. My daughter sat looking at the book in rapt attention, unaware of my doubts. I kept them to myself. It was better that way.\\n\\nYou see, the author's tale was full of holes. Like a giant block of swiss cheese run through by rabid mice. It claimed that Peter Piper picked a peck of pickled peppers. That's right. Pickled. Everyone knows that peppers come off the vine fresh. The pickling happens after they've been picked. But Peter Piper was picking 'em pre-pickled. And I smelled a rat.\\n\\nWhy was this author presenting a different version of the facts? Perhaps she suspected the children wouldn't wise up? Well, she didn't expect me. I pressed on page by page. I needed to find out more about this Peter fella.\\n\\n#### XBox On\\n\\nXbox on.\\nXbox on!\\n\\nIt was a typical week night in sleepy suburban town. Mary and I settled down to watch a movie. We chose an old English yarn. Full of graceful ladies with smooshed boobs enduring the trials of courtship in 18th century England.\\n\\nXbox on!\\n\\nDamn Xbox. Our entire entertainment system depended on it. TV, blu-ray, DVD, on-demand, it controlled everything. The Skynet of our house. And it was refusing to respond to voice commands.\\n\\nWhere's Siri when you need her.\\n\\n\\\"Let's use the remote.\\\"\\n\\n\\\"I can't find it. Try the game controller.\\\"\\n\\n\\\"Game controller? Can you just get up and push the button?\\\"\\n\\nI reluctantly got up and moved toward the XBox. My finger shook slightly as it pressed the button.\\n\\nDa-dink! Success!\\n\\nI settled back down with my wife, ready to relax.\\n\\nXBox play.\\nXBox play!\\nXBox play! XBox play! XBox play!\\n\\n#### Seduction\\n\\n\\\"Hello doll\\\" I said as she swept through the bedroom door riding a pair of impossibly long legs. The curve of her neck stretched toward the ceiling. Like one of those African ladies. With the metal coils.\\n\\nYou see, it had been a long time since I'd seen the inside of a pair of frilly panties. And I wanted to take complete advantage of the moment.\\n\\n\\\"I'm gonna brush my teeth and get to bed\\\" Mary said. \\\"Oh, you forgot to take out the trash. And rotate the laundry while you're down there.\\\"\\n\\nThings weren't going the way I expected. I was about to protest when I realized that, yes, I had indeed forgotten to take out the trash.\\n\\nThe trashcan scraped along the driveway as I dragged it to the curb. It was a bright night in a dark town. In the distance cicadas droned on with their shrill mating call. But it worked for them. Can't say the same for me.\\n\\n\\\"Hello doll?\\\" What was I thinking? She was a sophisticated lady immune to cheap one liners.\\n\\nI had to rethink my plan before the night got away. I turned around and looked up at the warm glow of the windows. Suddenly the lights flickered off.\\n\\nSeduction ain't easy.\\n\\n<div style=\\\"width: 100%; text-align: center;\\\">\\n\\t<img src=\\\"http://media.joebuschmann.com/frank_drebin_2.jpg\\\" alt=\\\"Det Frank Drebin, Police Squad!\\\" width=\\\"auto\\\" style=\\\"border: 2px solid #EBF2F6; border-radius: 100%; padding: 0px;\\\" />\\n</div>\\n\\n<br />\\n<br />\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Like many others I lead an ordinary life. Up at dawn, get the kids ready, then my wife and I head to work. To spice up the story of my life, I enlisted the help of Lieutenant Frank Drebin. Follow along as the Police Squad operative narrates my life with bad puns and worse metaphors.</p>\n<p><img src=\"http://media.joebuschmann.com/frank_drebin_1.jpg\" alt=\"Lieutenant Frank Drebin, Police Squad!\"></p>\n<h4 id=\"dawn\">Dawn</h4>\n<p>The day started like any other. With a clean shave and a dirty diaper. Not mine, but my son's. You see, I'm a father of two and a mother of none. Each morning I get my son ready for daycare, and like any other morning, I walked into his room and flipped on the light. He squinted at the ceiling, confused and bewildered. Like Sarah Palin in a science classroom. Or anywhere for that matter.</p>\n<p>As I changed his diaper, I noticed his left testicle was still undecended. &quot;Unusual but not unheard of.&quot; At least that's what his urologist Dr. Prickman told us.</p>\n<h4 id=\"thetrainstation\">The Train Station</h4>\n<p>The train station had a musty odor after last night's rain. The cracks in the concrete slowly leaked water down the stained walls. I made my way up the stairs like any other morning and caught sight of a grey heap lying haphazardly on the ground. I picked it up. It was a cardigan. A light weave. Made for late spring or early fall. With the scent of purfume from days long past.</p>\n<p>I continued up the stairs holding the knitted garment. Someone had dropped it. And I was going to find out who.</p>\n<p>The station was slow for a Monday morning. People milled about staring at their smartphones. Giggling over the mundane musings of friends...and kittens. I scanned the platform looking for this mystery lady. How would I find her? No doubt that a sophisticated anaysis of security footage would reveal the owner. But I didn't have time for sophisticated. The train was quickly approaching. Soon the moment would be lost. I had to act fast.</p>\n<p>&quot;Anyone lose a sweater?&quot; I yelled. A bent woman slowly shuffled toward me. &quot;Thank you sir&quot; she said.</p>\n<p>You're welcome lady. You're welcome.</p>\n<h4 id=\"theoffice\">The Office</h4>\n<p>I stepped off the elevator and stepped into a maze of cubicles. Row after row, line after line. Like a bolo tie on a fat man, I felt small and insignificant.</p>\n<p>Walking toward my desk, I passed the usual suspects. The guy who insisted on signing his name with the Roman numeral &quot;III&quot; at the end. Next to him was a guy who told Asian jokes and said it was okay because he's a quarter Asian. Well, the other three quarters is an asshole.</p>\n<p>I turned a corner and passed a software developer who said I reminded him of Steve Martin. He did the Egyptian walk whenever we passed in the hall. At the office Christmas party, he said he would buy me a ukulele. I'm still waiting.</p>\n<p>Then there was the young lady in the back. She was from Minnesota, and yes, she was nice.</p>\n<p>I sat at my desk trying to recover from the commute when I heard my boss one cube over talking on the phone in Icelandic.</p>\n<p>&quot;[Icelandic, Icelandic, Icelandic] reboot [Icelandic] start button.&quot;</p>\n<p>Must be helping his mom with her computer again.</p>\n<h4 id=\"storytime\">Story Time</h4>\n<p>As I read the author's so called account, I began to get suspicious. My daughter sat looking at the book in rapt attention, unaware of my doubts. I kept them to myself. It was better that way.</p>\n<p>You see, the author's tale was full of holes. Like a giant block of swiss cheese run through by rabid mice. It claimed that Peter Piper picked a peck of pickled peppers. That's right. Pickled. Everyone knows that peppers come off the vine fresh. The pickling happens after they've been picked. But Peter Piper was picking 'em pre-pickled. And I smelled a rat.</p>\n<p>Why was this author presenting a different version of the facts? Perhaps she suspected the children wouldn't wise up? Well, she didn't expect me. I pressed on page by page. I needed to find out more about this Peter fella.</p>\n<h4 id=\"xboxon\">XBox On</h4>\n<p>Xbox on.<br>\nXbox on!</p>\n<p>It was a typical week night in sleepy suburban town. Mary and I settled down to watch a movie. We chose an old English yarn. Full of graceful ladies with smooshed boobs enduring the trials of courtship in 18th century England.</p>\n<p>Xbox on!</p>\n<p>Damn Xbox. Our entire entertainment system depended on it. TV, blu-ray, DVD, on-demand, it controlled everything. The Skynet of our house. And it was refusing to respond to voice commands.</p>\n<p>Where's Siri when you need her.</p>\n<p>&quot;Let's use the remote.&quot;</p>\n<p>&quot;I can't find it. Try the game controller.&quot;</p>\n<p>&quot;Game controller? Can you just get up and push the button?&quot;</p>\n<p>I reluctantly got up and moved toward the XBox. My finger shook slightly as it pressed the button.</p>\n<p>Da-dink! Success!</p>\n<p>I settled back down with my wife, ready to relax.</p>\n<p>XBox play.<br>\nXBox play!<br>\nXBox play! XBox play! XBox play!</p>\n<h4 id=\"seduction\">Seduction</h4>\n<p>&quot;Hello doll&quot; I said as she swept through the bedroom door riding a pair of impossibly long legs. The curve of her neck stretched toward the ceiling. Like one of those African ladies. With the metal coils.</p>\n<p>You see, it had been a long time since I'd seen the inside of a pair of frilly panties. And I wanted to take complete advantage of the moment.</p>\n<p>&quot;I'm gonna brush my teeth and get to bed&quot; Mary said. &quot;Oh, you forgot to take out the trash. And rotate the laundry while you're down there.&quot;</p>\n<p>Things weren't going the way I expected. I was about to protest when I realized that, yes, I had indeed forgotten to take out the trash.</p>\n<p>The trashcan scraped along the driveway as I dragged it to the curb. It was a bright night in a dark town. In the distance cicadas droned on with their shrill mating call. But it worked for them. Can't say the same for me.</p>\n<p>&quot;Hello doll?&quot; What was I thinking? She was a sophisticated lady immune to cheap one liners.</p>\n<p>I had to rethink my plan before the night got away. I turned around and looked up at the warm glow of the windows. Suddenly the lights flickered off.</p>\n<p>Seduction ain't easy.</p>\n<div style=\"width: 100%; text-align: center;\">\n\t<img src=\"http://media.joebuschmann.com/frank_drebin_2.jpg\" alt=\"Det Frank Drebin, Police Squad!\" width=\"auto\" style=\"border: 2px solid #EBF2F6; border-radius: 100%; padding: 0px;\" />\n</div>\n<br />\n<br /></div>","amp":"33","plaintext":"Like many others I lead an ordinary life. Up at dawn, get the kids ready, then\nmy wife and I head to work. To spice up the story of my life, I enlisted the\nhelp of Lieutenant Frank Drebin. Follow along as the Police Squad operative\nnarrates my life with bad puns and worse metaphors.\n\n\n\nDawn\nThe day started like any other. With a clean shave and a dirty diaper. Not mine,\nbut my son's. You see, I'm a father of two and a mother of none. Each morning I\nget my son ready for daycare, and like any other morning, I walked into his room\nand flipped on the light. He squinted at the ceiling, confused and bewildered.\nLike Sarah Palin in a science classroom. Or anywhere for that matter.\n\nAs I changed his diaper, I noticed his left testicle was still undecended.\n\"Unusual but not unheard of.\" At least that's what his urologist Dr. Prickman\ntold us.\n\nThe Train Station\nThe train station had a musty odor after last night's rain. The cracks in the\nconcrete slowly leaked water down the stained walls. I made my way up the stairs\nlike any other morning and caught sight of a grey heap lying haphazardly on the\nground. I picked it up. It was a cardigan. A light weave. Made for late spring\nor early fall. With the scent of purfume from days long past.\n\nI continued up the stairs holding the knitted garment. Someone had dropped it.\nAnd I was going to find out who.\n\nThe station was slow for a Monday morning. People milled about staring at their\nsmartphones. Giggling over the mundane musings of friends...and kittens. I\nscanned the platform looking for this mystery lady. How would I find her? No\ndoubt that a sophisticated anaysis of security footage would reveal the owner.\nBut I didn't have time for sophisticated. The train was quickly approaching.\nSoon the moment would be lost. I had to act fast.\n\n\"Anyone lose a sweater?\" I yelled. A bent woman slowly shuffled toward me.\n\"Thank you sir\" she said.\n\nYou're welcome lady. You're welcome.\n\nThe Office\nI stepped off the elevator and stepped into a maze of cubicles. Row after row,\nline after line. Like a bolo tie on a fat man, I felt small and insignificant.\n\nWalking toward my desk, I passed the usual suspects. The guy who insisted on\nsigning his name with the Roman numeral \"III\" at the end. Next to him was a guy\nwho told Asian jokes and said it was okay because he's a quarter Asian. Well,\nthe other three quarters is an asshole.\n\nI turned a corner and passed a software developer who said I reminded him of\nSteve Martin. He did the Egyptian walk whenever we passed in the hall. At the\noffice Christmas party, he said he would buy me a ukulele. I'm still waiting.\n\nThen there was the young lady in the back. She was from Minnesota, and yes, she\nwas nice.\n\nI sat at my desk trying to recover from the commute when I heard my boss one\ncube over talking on the phone in Icelandic.\n\n\"[Icelandic, Icelandic, Icelandic] reboot [Icelandic] start button.\"\n\nMust be helping his mom with her computer again.\n\nStory Time\nAs I read the author's so called account, I began to get suspicious. My daughter\nsat looking at the book in rapt attention, unaware of my doubts. I kept them to\nmyself. It was better that way.\n\nYou see, the author's tale was full of holes. Like a giant block of swiss cheese\nrun through by rabid mice. It claimed that Peter Piper picked a peck of pickled\npeppers. That's right. Pickled. Everyone knows that peppers come off the vine\nfresh. The pickling happens after they've been picked. But Peter Piper was\npicking 'em pre-pickled. And I smelled a rat.\n\nWhy was this author presenting a different version of the facts? Perhaps she\nsuspected the children wouldn't wise up? Well, she didn't expect me. I pressed\non page by page. I needed to find out more about this Peter fella.\n\nXBox On\nXbox on.\nXbox on!\n\nIt was a typical week night in sleepy suburban town. Mary and I settled down to\nwatch a movie. We chose an old English yarn. Full of graceful ladies with\nsmooshed boobs enduring the trials of courtship in 18th century England.\n\nXbox on!\n\nDamn Xbox. Our entire entertainment system depended on it. TV, blu-ray, DVD,\non-demand, it controlled everything. The Skynet of our house. And it was\nrefusing to respond to voice commands.\n\nWhere's Siri when you need her.\n\n\"Let's use the remote.\"\n\n\"I can't find it. Try the game controller.\"\n\n\"Game controller? Can you just get up and push the button?\"\n\nI reluctantly got up and moved toward the XBox. My finger shook slightly as it\npressed the button.\n\nDa-dink! Success!\n\nI settled back down with my wife, ready to relax.\n\nXBox play.\nXBox play!\nXBox play! XBox play! XBox play!\n\nSeduction\n\"Hello doll\" I said as she swept through the bedroom door riding a pair of\nimpossibly long legs. The curve of her neck stretched toward the ceiling. Like\none of those African ladies. With the metal coils.\n\nYou see, it had been a long time since I'd seen the inside of a pair of frilly\npanties. And I wanted to take complete advantage of the moment.\n\n\"I'm gonna brush my teeth and get to bed\" Mary said. \"Oh, you forgot to take out\nthe trash. And rotate the laundry while you're down there.\"\n\nThings weren't going the way I expected. I was about to protest when I realized\nthat, yes, I had indeed forgotten to take out the trash.\n\nThe trashcan scraped along the driveway as I dragged it to the curb. It was a\nbright night in a dark town. In the distance cicadas droned on with their shrill\nmating call. But it worked for them. Can't say the same for me.\n\n\"Hello doll?\" What was I thinking? She was a sophisticated lady immune to cheap\none liners.\n\nI had to rethink my plan before the night got away. I turned around and looked\nup at the warm glow of the windows. Suddenly the lights flickered off.\n\nSeduction ain't easy.","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Follow along as Lieutenant Frank Drebin, Police Squad, narrates my ordinary life with bad puns and worse metaphors.","author_id":"1","created_at":"2014-10-20T12:35:08.000Z","created_by":"1","updated_at":"2017-02-08T20:37:44.000Z","updated_by":"1","published_at":"2015-01-07T16:51:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b498","uuid":"c6586ecd-3c5f-48f1-91d4-844226dfa10d","title":"Generate SQL Delete Statements That Respect FK Relationships","slug":"generate-sql-delete-statements-that-respect-fk-relationships","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Have you ever needed to delete a record from a database table only to be thwarted by one or more foreign key violations? Then when you try to delete records from the child tables you find a deep hierarchal relationship bound together by yet more foreign keys?\\n\\nI recently ran into this issue with a SQL Server database. I needed to trim data from several large tables that had deep and wide relationship hierarchies enforced by foreign keys. To solve this problem, I wrote a short C# command line program that outputs a SQL script where records from child tables are deleted before their corresponding records in the parent tables.\\n\\nFor example, given the simple table relationships below.\\n\\n![Order table diagram](http://media.joebuschmann.com/order_table_diagram.png)\\n\\nWhen I compile the program to GenerateDeleteStatements.exe and run the command:\\n\\n```\\nC:\\\\>GenerateDeleteStatements.exe \\\"DATABASE=order;SERVER=localhost;UID=sa;PWD=fakepwd\\\" \\\"order\\\" \\\"\\\" results.sql\\n```\\n\\nThen the following SQL script will be saved to results.sql. Notice how records from child tables are removed before parent tables per the foreign key relationships.\\n\\n```\\ndelete [order_item_history] from [order_item_history]\\n\\tjoin [order_item] on [order_item].[id] = [order_item_history].[order_item_id]\\n\\tjoin [order] on [order].[id] = [order_item].[order_id]\\n\\ngo\\n\\ndelete [order_item] from [order_item]\\n\\tjoin [order] on [order].[id] = [order_item].[order_id]\\n\\ngo\\n\\ndelete from [order] \\n\\ngo\\n```\\n\\nI can also provide an optional where clause to remove specific records.\\n\\n```\\nC:\\\\>GenerateDeleteStatements.exe \\\"DATABASE=order;SERVER=localhost;UID=sa;PWD=fakepwd\\\" \\\"order\\\" \\\"where [order].date_created < '1-1-2005'\\\" results.sql\\n```\\n\\n```\\ndelete [order_item_history] from [order_item_history]\\n\\tjoin [order_item] on [order_item].[id] = [order_item_history].[order_item_id]\\n\\tjoin [order] on [order].[id] = [order_item].[order_id]\\nwhere [order].date_created < '1-1-2005'\\n\\ngo\\n\\ndelete [order_item] from [order_item]\\n\\tjoin [order] on [order].[id] = [order_item].[order_id]\\nwhere [order].date_created < '1-1-2005'\\n\\ngo\\n\\ndelete from [order] where [order].date_created < '1-1-2005'\\n\\ngo\\n```\\n\\nHopefully someone else finds this useful. The full source is below.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/7c6f98c133aa15bd6fb8.js\\\"></script>\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Have you ever needed to delete a record from a database table only to be thwarted by one or more foreign key violations? Then when you try to delete records from the child tables you find a deep hierarchal relationship bound together by yet more foreign keys?</p>\n<p>I recently ran into this issue with a SQL Server database. I needed to trim data from several large tables that had deep and wide relationship hierarchies enforced by foreign keys. To solve this problem, I wrote a short C# command line program that outputs a SQL script where records from child tables are deleted before their corresponding records in the parent tables.</p>\n<p>For example, given the simple table relationships below.</p>\n<p><img src=\"http://media.joebuschmann.com/order_table_diagram.png\" alt=\"Order table diagram\"></p>\n<p>When I compile the program to GenerateDeleteStatements.exe and run the command:</p>\n<pre><code>C:\\&gt;GenerateDeleteStatements.exe &quot;DATABASE=order;SERVER=localhost;UID=sa;PWD=fakepwd&quot; &quot;order&quot; &quot;&quot; results.sql\n</code></pre>\n<p>Then the following SQL script will be saved to results.sql. Notice how records from child tables are removed before parent tables per the foreign key relationships.</p>\n<pre><code>delete [order_item_history] from [order_item_history]\n\tjoin [order_item] on [order_item].[id] = [order_item_history].[order_item_id]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\n\ngo\n\ndelete [order_item] from [order_item]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\n\ngo\n\ndelete from [order] \n\ngo\n</code></pre>\n<p>I can also provide an optional where clause to remove specific records.</p>\n<pre><code>C:\\&gt;GenerateDeleteStatements.exe &quot;DATABASE=order;SERVER=localhost;UID=sa;PWD=fakepwd&quot; &quot;order&quot; &quot;where [order].date_created &lt; '1-1-2005'&quot; results.sql\n</code></pre>\n<pre><code>delete [order_item_history] from [order_item_history]\n\tjoin [order_item] on [order_item].[id] = [order_item_history].[order_item_id]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\nwhere [order].date_created &lt; '1-1-2005'\n\ngo\n\ndelete [order_item] from [order_item]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\nwhere [order].date_created &lt; '1-1-2005'\n\ngo\n\ndelete from [order] where [order].date_created &lt; '1-1-2005'\n\ngo\n</code></pre>\n<p>Hopefully someone else finds this useful. The full source is below.</p>\n<script src=\"https://gist.github.com/joebuschmann/7c6f98c133aa15bd6fb8.js\"></script>\n</div>","amp":"35","plaintext":"Have you ever needed to delete a record from a database table only to be\nthwarted by one or more foreign key violations? Then when you try to delete\nrecords from the child tables you find a deep hierarchal relationship bound\ntogether by yet more foreign keys?\n\nI recently ran into this issue with a SQL Server database. I needed to trim data\nfrom several large tables that had deep and wide relationship hierarchies\nenforced by foreign keys. To solve this problem, I wrote a short C# command line\nprogram that outputs a SQL script where records from child tables are deleted\nbefore their corresponding records in the parent tables.\n\nFor example, given the simple table relationships below.\n\n\n\nWhen I compile the program to GenerateDeleteStatements.exe and run the command:\n\nC:\\>GenerateDeleteStatements.exe \"DATABASE=order;SERVER=localhost;UID=sa;PWD=fakepwd\" \"order\" \"\" results.sql\n\n\nThen the following SQL script will be saved to results.sql. Notice how records\nfrom child tables are removed before parent tables per the foreign key\nrelationships.\n\ndelete [order_item_history] from [order_item_history]\n\tjoin [order_item] on [order_item].[id] = [order_item_history].[order_item_id]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\n\ngo\n\ndelete [order_item] from [order_item]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\n\ngo\n\ndelete from [order] \n\ngo\n\n\nI can also provide an optional where clause to remove specific records.\n\nC:\\>GenerateDeleteStatements.exe \"DATABASE=order;SERVER=localhost;UID=sa;PWD=fakepwd\" \"order\" \"where [order].date_created < '1-1-2005'\" results.sql\n\n\ndelete [order_item_history] from [order_item_history]\n\tjoin [order_item] on [order_item].[id] = [order_item_history].[order_item_id]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\nwhere [order].date_created < '1-1-2005'\n\ngo\n\ndelete [order_item] from [order_item]\n\tjoin [order] on [order].[id] = [order_item].[order_id]\nwhere [order].date_created < '1-1-2005'\n\ngo\n\ndelete from [order] where [order].date_created < '1-1-2005'\n\ngo\n\n\nHopefully someone else finds this useful. The full source is below.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":"","meta_description":"Short C# program to generate SQL delete statements where records from child tables are deleted before records from parent tables to avoid FK violations.","author_id":"1","created_at":"2014-12-02T02:48:32.000Z","created_by":"1","updated_at":"2015-01-05T20:41:18.000Z","updated_by":"1","published_at":"2014-12-03T21:00:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b499","uuid":"e488aaf6-0215-47bb-8bbc-277075060aa3","title":"Lessons from 2014","slug":"lessons-from-2014","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"2014 has been a fantastic year for me professionally. I spent the majority of the year working on a green field project with a great group of co-workers. I was the Scrummaster for a talented team and wrote a lot of Angular.js and Javascript. Ultimately the project was cancelled, and its members were merged into another group. While disappointing, it led me to a new opportunity as a Product Owner and lead architect for a team tasked with creating a test framework built on [Specflow](http://www.specflow.org). The project is wrapping up this week and represents a foundational first step toward a new Agile development process based on acceptance tests ([Acceptance Test-Driven Development](http://en.wikipedia.org/wiki/Acceptance_test-driven_development).)\\n\\nThese were great opportunities for my personal and professional growth, and I'll always be grateful for them. They pushed my technical skills as well as my soft skills. Below are the lessons I learned and will carry with me into 2015.\\n\\n##### Automate Everything\\n\\nDevelopers are told to automate as much as possible from the moment their career begins. I had always known this but had never really internalized it. Automation was never a part of my daily coding routine. Until this year.\\n\\nInstead of automating only when I was annoyed by a repetitive task, it became a part of my work from the beginning of a user story. I automated common tasks, like developer workstation setup and IIS configuration. I created more batch files and bash scripts than ever before, and the productivity increases were staggering. It also reduced the amount of documentation I had to write. A couple of paragraphs on how to configure IIS became a single line: Run this script.\\n\\nAutomation is now ingrained in my routine, a reflex, rather than something I have to remind myself to do.\\n\\n##### Be a Multiplier\\n\\nDuring my final review, my manager spoke about being a \\\"multiplier\\\". I hadn't heard the term before so I looked it up. In short, a multiplier not only works on their own productivity but also increases the productivity of those around them. Camille Fournier, CTO of Rent the Runway, [gave a great talk](https://www.youtube.com/watch?v=jGPrU15GuSw) explaining the concept.\\n\\nIt turns out I had some habits of a multiplier without knowing it. I had increased team productivity by:\\n\\n* Automating tasks to make them easier for my teammates.\\n* Holding bi-weekly architecture reviews for the team to share knowledge.\\n* Giving team members opportunities to work on user stories where they learned something new.\\n\\nNow that I'm aware of the concept, I'm going to find more ways to become a better multiplier.\\n\\n##### Fragile Tests Kill Confidence\\n\\nDuring the green field project I mentioned earlier, I was tasked with getting continuous system tests running using [Bamboo](https://www.atlassian.com/software/bamboo/), Atlassian's continuous build server. The tests were pretty complex. They involved web services developed in North America talking to a biller maintained by a team in Australia. For about a month the tests were fragile and couldn't be counted on to run successfully more than a few times in a row. Working across several time zones delayed the fixes. It soon became apparent to other developers they couldn't rely on the tests due to the false negatives. So they were ignored. Eventually they were fixed and reliable, but by then it was too late. No one took them seriously.\\n\\nMy next project was to develop continuous system tests for a security service that another team was heavily refactoring. When the tests came online, they failed intermittently due to setup issues. I had flashbacks to my last project, so I dropped everything and spent a week with two other team members to fix the fragility problem. We worked through the issues, and today the tests are reliable and trustworthy.\\n\\nI learned the hard way: fragile tests kill confidence and are ignored. Fix them immediately or take them offline.\\n\\n##### Technical Skills\\n\\nAt the end of 2013, I made a resolution to learn Javascript and Regular Expressions. I'm embarrassed to admit I made it 14 years into my career without at least being competent with both skills. With 2014 coming to a close, I'm happy to write that these technical skills are a part of my repertoire along with some new ones.\\n\\n* Javascript\\n* Regular expressions\\n* Angular.js\\n* Batch and BASH scripting\\n* Git source control\\n\\n##### Looking Ahead to 2015\\n\\nWith 2014 almost behind me, it's time to look ahead to the coming year. I've been thinking about professional development goals for 2015, and I'd like to break away from the Windows/.NET world and try something new. The [Rust programming language](http://www.rust-lang.org/) has been getting more mentions lately. It is designed to be an alternative to C++ that maintains the speed of C++ but adds safe memory management, concurrency, and cool language features like pattern matching. By this time next year, I'd like to have at least one Rust project up on Github.\\n\\nMy second goal is more personal. My daughter turned five in October and is showing interest in reading and numbers. There are a number of resources for teaching kids to code, [Scratch](http://scratch.mit.edu/) in particular, and she seems ready to start writing some programs of her own. I'd like to help her create a Scratch game and perhaps get it out on Github. That would be a good way to start a career in programming.\\n\\nWell, that's it for now. Enjoy the holidays, and I'll see you in 2015!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>2014 has been a fantastic year for me professionally. I spent the majority of the year working on a green field project with a great group of co-workers. I was the Scrummaster for a talented team and wrote a lot of Angular.js and Javascript. Ultimately the project was cancelled, and its members were merged into another group. While disappointing, it led me to a new opportunity as a Product Owner and lead architect for a team tasked with creating a test framework built on <a href=\"http://www.specflow.org\">Specflow</a>. The project is wrapping up this week and represents a foundational first step toward a new Agile development process based on acceptance tests (<a href=\"http://en.wikipedia.org/wiki/Acceptance_test-driven_development\">Acceptance Test-Driven Development</a>.)</p>\n<p>These were great opportunities for my personal and professional growth, and I'll always be grateful for them. They pushed my technical skills as well as my soft skills. Below are the lessons I learned and will carry with me into 2015.</p>\n<h5 id=\"automateeverything\">Automate Everything</h5>\n<p>Developers are told to automate as much as possible from the moment their career begins. I had always known this but had never really internalized it. Automation was never a part of my daily coding routine. Until this year.</p>\n<p>Instead of automating only when I was annoyed by a repetitive task, it became a part of my work from the beginning of a user story. I automated common tasks, like developer workstation setup and IIS configuration. I created more batch files and bash scripts than ever before, and the productivity increases were staggering. It also reduced the amount of documentation I had to write. A couple of paragraphs on how to configure IIS became a single line: Run this script.</p>\n<p>Automation is now ingrained in my routine, a reflex, rather than something I have to remind myself to do.</p>\n<h5 id=\"beamultiplier\">Be a Multiplier</h5>\n<p>During my final review, my manager spoke about being a &quot;multiplier&quot;. I hadn't heard the term before so I looked it up. In short, a multiplier not only works on their own productivity but also increases the productivity of those around them. Camille Fournier, CTO of Rent the Runway, <a href=\"https://www.youtube.com/watch?v=jGPrU15GuSw\">gave a great talk</a> explaining the concept.</p>\n<p>It turns out I had some habits of a multiplier without knowing it. I had increased team productivity by:</p>\n<ul>\n<li>Automating tasks to make them easier for my teammates.</li>\n<li>Holding bi-weekly architecture reviews for the team to share knowledge.</li>\n<li>Giving team members opportunities to work on user stories where they learned something new.</li>\n</ul>\n<p>Now that I'm aware of the concept, I'm going to find more ways to become a better multiplier.</p>\n<h5 id=\"fragiletestskillconfidence\">Fragile Tests Kill Confidence</h5>\n<p>During the green field project I mentioned earlier, I was tasked with getting continuous system tests running using <a href=\"https://www.atlassian.com/software/bamboo/\">Bamboo</a>, Atlassian's continuous build server. The tests were pretty complex. They involved web services developed in North America talking to a biller maintained by a team in Australia. For about a month the tests were fragile and couldn't be counted on to run successfully more than a few times in a row. Working across several time zones delayed the fixes. It soon became apparent to other developers they couldn't rely on the tests due to the false negatives. So they were ignored. Eventually they were fixed and reliable, but by then it was too late. No one took them seriously.</p>\n<p>My next project was to develop continuous system tests for a security service that another team was heavily refactoring. When the tests came online, they failed intermittently due to setup issues. I had flashbacks to my last project, so I dropped everything and spent a week with two other team members to fix the fragility problem. We worked through the issues, and today the tests are reliable and trustworthy.</p>\n<p>I learned the hard way: fragile tests kill confidence and are ignored. Fix them immediately or take them offline.</p>\n<h5 id=\"technicalskills\">Technical Skills</h5>\n<p>At the end of 2013, I made a resolution to learn Javascript and Regular Expressions. I'm embarrassed to admit I made it 14 years into my career without at least being competent with both skills. With 2014 coming to a close, I'm happy to write that these technical skills are a part of my repertoire along with some new ones.</p>\n<ul>\n<li>Javascript</li>\n<li>Regular expressions</li>\n<li>Angular.js</li>\n<li>Batch and BASH scripting</li>\n<li>Git source control</li>\n</ul>\n<h5 id=\"lookingaheadto2015\">Looking Ahead to 2015</h5>\n<p>With 2014 almost behind me, it's time to look ahead to the coming year. I've been thinking about professional development goals for 2015, and I'd like to break away from the Windows/.NET world and try something new. The <a href=\"http://www.rust-lang.org/\">Rust programming language</a> has been getting more mentions lately. It is designed to be an alternative to C++ that maintains the speed of C++ but adds safe memory management, concurrency, and cool language features like pattern matching. By this time next year, I'd like to have at least one Rust project up on Github.</p>\n<p>My second goal is more personal. My daughter turned five in October and is showing interest in reading and numbers. There are a number of resources for teaching kids to code, <a href=\"http://scratch.mit.edu/\">Scratch</a> in particular, and she seems ready to start writing some programs of her own. I'd like to help her create a Scratch game and perhaps get it out on Github. That would be a good way to start a career in programming.</p>\n<p>Well, that's it for now. Enjoy the holidays, and I'll see you in 2015!</p>\n</div>","amp":"36","plaintext":"2014 has been a fantastic year for me professionally. I spent the majority of\nthe year working on a green field project with a great group of co-workers. I\nwas the Scrummaster for a talented team and wrote a lot of Angular.js and\nJavascript. Ultimately the project was cancelled, and its members were merged\ninto another group. While disappointing, it led me to a new opportunity as a\nProduct Owner and lead architect for a team tasked with creating a test\nframework built on Specflow [http://www.specflow.org]. The project is wrapping\nup this week and represents a foundational first step toward a new Agile\ndevelopment process based on acceptance tests (Acceptance Test-Driven\nDevelopment [http://en.wikipedia.org/wiki/Acceptance_test-driven_development].)\n\nThese were great opportunities for my personal and professional growth, and I'll\nalways be grateful for them. They pushed my technical skills as well as my soft\nskills. Below are the lessons I learned and will carry with me into 2015.\n\nAutomate Everything\nDevelopers are told to automate as much as possible from the moment their career\nbegins. I had always known this but had never really internalized it. Automation\nwas never a part of my daily coding routine. Until this year.\n\nInstead of automating only when I was annoyed by a repetitive task, it became a\npart of my work from the beginning of a user story. I automated common tasks,\nlike developer workstation setup and IIS configuration. I created more batch\nfiles and bash scripts than ever before, and the productivity increases were\nstaggering. It also reduced the amount of documentation I had to write. A couple\nof paragraphs on how to configure IIS became a single line: Run this script.\n\nAutomation is now ingrained in my routine, a reflex, rather than something I\nhave to remind myself to do.\n\nBe a Multiplier\nDuring my final review, my manager spoke about being a \"multiplier\". I hadn't\nheard the term before so I looked it up. In short, a multiplier not only works\non their own productivity but also increases the productivity of those around\nthem. Camille Fournier, CTO of Rent the Runway, gave a great talk\n[https://www.youtube.com/watch?v=jGPrU15GuSw]  explaining the concept.\n\nIt turns out I had some habits of a multiplier without knowing it. I had\nincreased team productivity by:\n\n * Automating tasks to make them easier for my teammates.\n * Holding bi-weekly architecture reviews for the team to share knowledge.\n * Giving team members opportunities to work on user stories where they learned\n   something new.\n\nNow that I'm aware of the concept, I'm going to find more ways to become a\nbetter multiplier.\n\nFragile Tests Kill Confidence\nDuring the green field project I mentioned earlier, I was tasked with getting\ncontinuous system tests running using Bamboo\n[https://www.atlassian.com/software/bamboo/], Atlassian's continuous build\nserver. The tests were pretty complex. They involved web services developed in\nNorth America talking to a biller maintained by a team in Australia. For about a\nmonth the tests were fragile and couldn't be counted on to run successfully more\nthan a few times in a row. Working across several time zones delayed the fixes.\nIt soon became apparent to other developers they couldn't rely on the tests due\nto the false negatives. So they were ignored. Eventually they were fixed and\nreliable, but by then it was too late. No one took them seriously.\n\nMy next project was to develop continuous system tests for a security service\nthat another team was heavily refactoring. When the tests came online, they\nfailed intermittently due to setup issues. I had flashbacks to my last project,\nso I dropped everything and spent a week with two other team members to fix the\nfragility problem. We worked through the issues, and today the tests are\nreliable and trustworthy.\n\nI learned the hard way: fragile tests kill confidence and are ignored. Fix them\nimmediately or take them offline.\n\nTechnical Skills\nAt the end of 2013, I made a resolution to learn Javascript and Regular\nExpressions. I'm embarrassed to admit I made it 14 years into my career without\nat least being competent with both skills. With 2014 coming to a close, I'm\nhappy to write that these technical skills are a part of my repertoire along\nwith some new ones.\n\n * Javascript\n * Regular expressions\n * Angular.js\n * Batch and BASH scripting\n * Git source control\n\nLooking Ahead to 2015\nWith 2014 almost behind me, it's time to look ahead to the coming year. I've\nbeen thinking about professional development goals for 2015, and I'd like to\nbreak away from the Windows/.NET world and try something new. The Rust\nprogramming language [http://www.rust-lang.org/]  has been getting more mentions\nlately. It is designed to be an alternative to C++ that maintains the speed of\nC++ but adds safe memory management, concurrency, and cool language features\nlike pattern matching. By this time next year, I'd like to have at least one\nRust project up on Github.\n\nMy second goal is more personal. My daughter turned five in October and is\nshowing interest in reading and numbers. There are a number of resources for\nteaching kids to code, Scratch [http://scratch.mit.edu/]  in particular, and she\nseems ready to start writing some programs of her own. I'd like to help her\ncreate a Scratch game and perhaps get it out on Github. That would be a good way\nto start a career in programming.\n\nWell, that's it for now. Enjoy the holidays, and I'll see you in 2015!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"What I learned in 2014, a personal year in review: automate everything, be a multiplier, and fragile tests kill confidence.","author_id":"1","created_at":"2014-12-14T16:36:05.000Z","created_by":"1","updated_at":"2014-12-21T15:18:03.000Z","updated_by":"1","published_at":"2014-12-21T15:18:03.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b49a","uuid":"0c8ac597-7bc4-4ffc-836e-125cb888e5ab","title":"Code This, Not That - SpecFlow Edition","slug":"code-this-not-that-specflow-edition","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In 2007 a different kind of diet book was published that took a concise approach to making the right food choices. Readers of the book were presented with good and bad selections at popular restaurants and told why the good options were better than the others. [Eat This, Not That!](http://www.amazon.com/This-Thousands-Simple-Swaps-Pounds/dp/B002M3SP6O) made changing your diet simple and realistic. No gimmicks like the Atkins diet or the current trend of cleansing. Just real options available in many restaurants.\\n\\nI really like this approach to presenting good and bad choices. It conveys information in short and clear bites without long-winded prose to fill the pages. For my latest post, I decided to summarize all my past writing on SpecFlow into a guide written in the style of *Eat this, Not That!*\\n\\n----\\n\\n**WHEN WORKING WITH TABLES...**\\n\\n<span style=\\\"color: #00FF00; font-weight: bold\\\">Code this</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/50e12313ef9023d16793.js\\\"></script>\\n\\n<span style=\\\"color: #FF0000; font-weight: bold\\\">Not that</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/b3ae7a70286fee811103.js\\\"></script>\\n\\n**Why?**\\n\\nThe `TechTalk.SpecFlow.Assist` namespace has a number of helper methods that make working with tables simple. You can create objects and lists with `CreateInstance<T>()` and `CreateSet<T>()` and perform comparisons with `CompareToInstance<T>` and `CompareToSet<T>`. These methods make explicitly accessing a table's rows and fields unnecessary in most cases. Your code will clean up nicely with all the boilerplate code gone.\\n\\n----\\n\\n**WHEN BUILDING COMPLEX TEST DATA...**\\n\\n<span style=\\\"color: #00FF00; font-weight: bold\\\">Code this</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/258771b995d738ce270a.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fcbe058b70b89d288292.js\\\"></script>\\n\\n<span style=\\\"color: #FF0000; font-weight: bold\\\">Not that</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/5f5eb9862b37d32f2a95.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c1d100d0f14718a10fe4.js\\\"></script>\\n\\n**Why?**\\n\\nIf you find yourself building out complex test data using tables and stuffing more than just a simple value into a field, you may want to consider adding additional steps. In this example an entire address (lines 1 & 2, city, state and zip) is placed into a single table field with the parts delimited by a semi-colon. The corresponding step binding has to parse the text to build an `Address` object.\\n\\nThe binding becomes simpler when it is broken up into two steps: one for creating the customer and a second for adding the address. The new steps are easier for the stakeholders to read, and the error-prone parsing logic in the old step binding goes away.\\n\\n----\\n\\n**WHEN SHARING STATE BETWEEN BINDINGS...**\\n\\n<span style=\\\"color: #00FF00; font-weight: bold\\\">Code this</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a238cb7fcd234eb5432b.js\\\"></script>\\n\\n<span style=\\\"color: #FF0000; font-weight: bold\\\">Not that</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a1c29ef9a418259dc1a0.js\\\"></script>\\n\\n**Why?**\\n\\nThe SpecFlow framework provides a way of saving state between binding invocations via a name/value collection in the `ScenarioContext.Current` singleton. Step bindings can add data to this collection for later steps to consume. While this approach is convenient, it can get messy for a large number of bindings. Just managing the keys can get out of hand.\\n\\nA better approach is to use SpecFlow's built in [Dependency Injection](http://en.wikipedia.org/wiki/Dependency_injection) framework. SpecFlow's runtime engine will reuse the same binding instance throughout the lifetime of a scenario. You can take advantage of this by adding private member variables to share data between steps in the same class. For sharing data among different binding classes, you can define a [Data Transfer Object](http://en.wikipedia.org/wiki/Data_transfer_object) and inject it into each binding via the constructor. The runtime will know to include it and will reuse the same instance.\\n\\n----\\n\\n**WHEN PASSING BINDING PARAMETERS (PART 1)...**\\n\\n<span style=\\\"color: #00FF00; font-weight: bold\\\">Code this</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/ade407b0ef96df81b7b7.js\\\"></script>\\n\\n<span style=\\\"color: #FF0000; font-weight: bold\\\">Not that</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d20feb832cb48ea3a6f5.js\\\"></script>\\n\\n**Why?**\\n\\nThe SpecFlow engine treats a binding attribute's text as a regular expression. You can take full advantage of regex to transform the human-friendly Gherkin text into binding parameters. The Gherkin, `When I remove the product at index 5`, doesn't read well to a non-techie, but many developers will go with it because it's easy to extract the ordinal value of 5 into a parameter.\\n\\nTo fix this, you can rewrite the binding text into something more readable and still extract the numeric parameter. The regex literal `(\\\\d+)(?:st|nd|rd|th)` converts *1st*, *2nd*, *3rd*, etc into its corresponding numeric value. The Gherkin can be rewritten to `When I remove the 5th product` which flows better.\\n\\n----\\n\\n**WHEN PASSING BINDING PARAMETERS (PART 2)...**\\n\\n<span style=\\\"color: #00FF00; font-weight: bold\\\">Code this</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c87ba3f0209567a0bf8a.js\\\"></script>\\n\\n<span style=\\\"color: #FF0000; font-weight: bold\\\">Not that</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1485015753dfa9f0df60.js\\\"></script>\\n\\n**Why?**\\n\\nLike the previous example, this binding can be rewritten with a different regular expression to make the Gherkin more readable and still extract a sensible method argument. You can take it one step further by leveraging step argument transformations to convert the text *from A-Z* into the proper enumeration value. The advantage of step argument transformations is they can be reused across bindings.\\n\\n----\\n\\n**WHEN USING NUMERIC IDENTIFIERS IN GHERKIN...**\\n\\n<span style=\\\"color: #00FF00; font-weight: bold\\\">Code this</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/23072d552bf740e5d3d2.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/97314cf578cefff7ac01.js\\\"></script>\\n\\n<span style=\\\"color: #FF0000; font-weight: bold\\\">Not that</span>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/f91fc8d18469967084b6.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0923456d6ccbd2c27edd.js\\\"></script>\\n\\n**Why?**\\n\\nI limit the use of numeric identifiers in Gherkin steps as much as possible. They aren't descriptive and are difficult to update with a different data set.\\n\\nA nice technique is to create a look-up table in the background section to map entity names to IDs. The subsequent steps can reference the entities by name, and in the step bindings, the names are used to look up the corresponding ID value. Later, if an ID value changes, only the look-up tables will need to be updated.\\n\\n----\\n\\nFor more information on SpecFlow best practices, check out [my previous posts](http://joebuschmann.com/tag/specflow/) as well as the excellent [SpecFlow documentation](http://www.specflow.org/documentation/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In 2007 a different kind of diet book was published that took a concise approach to making the right food choices. Readers of the book were presented with good and bad selections at popular restaurants and told why the good options were better than the others. <a href=\"http://www.amazon.com/This-Thousands-Simple-Swaps-Pounds/dp/B002M3SP6O\">Eat This, Not That!</a> made changing your diet simple and realistic. No gimmicks like the Atkins diet or the current trend of cleansing. Just real options available in many restaurants.</p>\n<p>I really like this approach to presenting good and bad choices. It conveys information in short and clear bites without long-winded prose to fill the pages. For my latest post, I decided to summarize all my past writing on SpecFlow into a guide written in the style of <em>Eat this, Not That!</em></p>\n<hr>\n<p><strong>WHEN WORKING WITH TABLES...</strong></p>\n<p><span style=\"color: #00FF00; font-weight: bold\">Code this</span></p>\n<script src=\"https://gist.github.com/joebuschmann/50e12313ef9023d16793.js\"></script>\n<p><span style=\"color: #FF0000; font-weight: bold\">Not that</span></p>\n<script src=\"https://gist.github.com/joebuschmann/b3ae7a70286fee811103.js\"></script>\n<p><strong>Why?</strong></p>\n<p>The <code>TechTalk.SpecFlow.Assist</code> namespace has a number of helper methods that make working with tables simple. You can create objects and lists with <code>CreateInstance&lt;T&gt;()</code> and <code>CreateSet&lt;T&gt;()</code> and perform comparisons with <code>CompareToInstance&lt;T&gt;</code> and <code>CompareToSet&lt;T&gt;</code>. These methods make explicitly accessing a table's rows and fields unnecessary in most cases. Your code will clean up nicely with all the boilerplate code gone.</p>\n<hr>\n<p><strong>WHEN BUILDING COMPLEX TEST DATA...</strong></p>\n<p><span style=\"color: #00FF00; font-weight: bold\">Code this</span></p>\n<script src=\"https://gist.github.com/joebuschmann/258771b995d738ce270a.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/fcbe058b70b89d288292.js\"></script>\n<p><span style=\"color: #FF0000; font-weight: bold\">Not that</span></p>\n<script src=\"https://gist.github.com/joebuschmann/5f5eb9862b37d32f2a95.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/c1d100d0f14718a10fe4.js\"></script>\n<p><strong>Why?</strong></p>\n<p>If you find yourself building out complex test data using tables and stuffing more than just a simple value into a field, you may want to consider adding additional steps. In this example an entire address (lines 1 &amp; 2, city, state and zip) is placed into a single table field with the parts delimited by a semi-colon. The corresponding step binding has to parse the text to build an <code>Address</code> object.</p>\n<p>The binding becomes simpler when it is broken up into two steps: one for creating the customer and a second for adding the address. The new steps are easier for the stakeholders to read, and the error-prone parsing logic in the old step binding goes away.</p>\n<hr>\n<p><strong>WHEN SHARING STATE BETWEEN BINDINGS...</strong></p>\n<p><span style=\"color: #00FF00; font-weight: bold\">Code this</span></p>\n<script src=\"https://gist.github.com/joebuschmann/a238cb7fcd234eb5432b.js\"></script>\n<p><span style=\"color: #FF0000; font-weight: bold\">Not that</span></p>\n<script src=\"https://gist.github.com/joebuschmann/a1c29ef9a418259dc1a0.js\"></script>\n<p><strong>Why?</strong></p>\n<p>The SpecFlow framework provides a way of saving state between binding invocations via a name/value collection in the <code>ScenarioContext.Current</code> singleton. Step bindings can add data to this collection for later steps to consume. While this approach is convenient, it can get messy for a large number of bindings. Just managing the keys can get out of hand.</p>\n<p>A better approach is to use SpecFlow's built in <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">Dependency Injection</a> framework. SpecFlow's runtime engine will reuse the same binding instance throughout the lifetime of a scenario. You can take advantage of this by adding private member variables to share data between steps in the same class. For sharing data among different binding classes, you can define a <a href=\"http://en.wikipedia.org/wiki/Data_transfer_object\">Data Transfer Object</a> and inject it into each binding via the constructor. The runtime will know to include it and will reuse the same instance.</p>\n<hr>\n<p><strong>WHEN PASSING BINDING PARAMETERS (PART 1)...</strong></p>\n<p><span style=\"color: #00FF00; font-weight: bold\">Code this</span></p>\n<script src=\"https://gist.github.com/joebuschmann/ade407b0ef96df81b7b7.js\"></script>\n<p><span style=\"color: #FF0000; font-weight: bold\">Not that</span></p>\n<script src=\"https://gist.github.com/joebuschmann/d20feb832cb48ea3a6f5.js\"></script>\n<p><strong>Why?</strong></p>\n<p>The SpecFlow engine treats a binding attribute's text as a regular expression. You can take full advantage of regex to transform the human-friendly Gherkin text into binding parameters. The Gherkin, <code>When I remove the product at index 5</code>, doesn't read well to a non-techie, but many developers will go with it because it's easy to extract the ordinal value of 5 into a parameter.</p>\n<p>To fix this, you can rewrite the binding text into something more readable and still extract the numeric parameter. The regex literal <code>(\\d+)(?:st|nd|rd|th)</code> converts <em>1st</em>, <em>2nd</em>, <em>3rd</em>, etc into its corresponding numeric value. The Gherkin can be rewritten to <code>When I remove the 5th product</code> which flows better.</p>\n<hr>\n<p><strong>WHEN PASSING BINDING PARAMETERS (PART 2)...</strong></p>\n<p><span style=\"color: #00FF00; font-weight: bold\">Code this</span></p>\n<script src=\"https://gist.github.com/joebuschmann/c87ba3f0209567a0bf8a.js\"></script>\n<p><span style=\"color: #FF0000; font-weight: bold\">Not that</span></p>\n<script src=\"https://gist.github.com/joebuschmann/1485015753dfa9f0df60.js\"></script>\n<p><strong>Why?</strong></p>\n<p>Like the previous example, this binding can be rewritten with a different regular expression to make the Gherkin more readable and still extract a sensible method argument. You can take it one step further by leveraging step argument transformations to convert the text <em>from A-Z</em> into the proper enumeration value. The advantage of step argument transformations is they can be reused across bindings.</p>\n<hr>\n<p><strong>WHEN USING NUMERIC IDENTIFIERS IN GHERKIN...</strong></p>\n<p><span style=\"color: #00FF00; font-weight: bold\">Code this</span></p>\n<script src=\"https://gist.github.com/joebuschmann/23072d552bf740e5d3d2.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/97314cf578cefff7ac01.js\"></script>\n<p><span style=\"color: #FF0000; font-weight: bold\">Not that</span></p>\n<script src=\"https://gist.github.com/joebuschmann/f91fc8d18469967084b6.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/0923456d6ccbd2c27edd.js\"></script>\n<p><strong>Why?</strong></p>\n<p>I limit the use of numeric identifiers in Gherkin steps as much as possible. They aren't descriptive and are difficult to update with a different data set.</p>\n<p>A nice technique is to create a look-up table in the background section to map entity names to IDs. The subsequent steps can reference the entities by name, and in the step bindings, the names are used to look up the corresponding ID value. Later, if an ID value changes, only the look-up tables will need to be updated.</p>\n<hr>\n<p>For more information on SpecFlow best practices, check out <a href=\"http://joebuschmann.com/tag/specflow/\">my previous posts</a> as well as the excellent <a href=\"http://www.specflow.org/documentation/\">SpecFlow documentation</a>.</p>\n</div>","amp":"38","plaintext":"In 2007 a different kind of diet book was published that took a concise approach\nto making the right food choices. Readers of the book were presented with good\nand bad selections at popular restaurants and told why the good options were\nbetter than the others. Eat This, Not That!\n[http://www.amazon.com/This-Thousands-Simple-Swaps-Pounds/dp/B002M3SP6O]  made\nchanging your diet simple and realistic. No gimmicks like the Atkins diet or the\ncurrent trend of cleansing. Just real options available in many restaurants.\n\nI really like this approach to presenting good and bad choices. It conveys\ninformation in short and clear bites without long-winded prose to fill the\npages. For my latest post, I decided to summarize all my past writing on\nSpecFlow into a guide written in the style of Eat this, Not That!\n\n\n--------------------------------------------------------------------------------\n\nWHEN WORKING WITH TABLES...\n\nCode this\n\nNot that\n\nWhy?\n\nThe TechTalk.SpecFlow.Assist  namespace has a number of helper methods that make\nworking with tables simple. You can create objects and lists with \nCreateInstance<T>()  and CreateSet<T>()  and perform comparisons with \nCompareToInstance<T>  and CompareToSet<T>. These methods make explicitly\naccessing a table's rows and fields unnecessary in most cases. Your code will\nclean up nicely with all the boilerplate code gone.\n\n\n--------------------------------------------------------------------------------\n\nWHEN BUILDING COMPLEX TEST DATA...\n\nCode this\n\nNot that\n\nWhy?\n\nIf you find yourself building out complex test data using tables and stuffing\nmore than just a simple value into a field, you may want to consider adding\nadditional steps. In this example an entire address (lines 1 & 2, city, state\nand zip) is placed into a single table field with the parts delimited by a\nsemi-colon. The corresponding step binding has to parse the text to build an \nAddress  object.\n\nThe binding becomes simpler when it is broken up into two steps: one for\ncreating the customer and a second for adding the address. The new steps are\neasier for the stakeholders to read, and the error-prone parsing logic in the\nold step binding goes away.\n\n\n--------------------------------------------------------------------------------\n\nWHEN SHARING STATE BETWEEN BINDINGS...\n\nCode this\n\nNot that\n\nWhy?\n\nThe SpecFlow framework provides a way of saving state between binding\ninvocations via a name/value collection in the ScenarioContext.Current \nsingleton. Step bindings can add data to this collection for later steps to\nconsume. While this approach is convenient, it can get messy for a large number\nof bindings. Just managing the keys can get out of hand.\n\nA better approach is to use SpecFlow's built in Dependency Injection\n[http://en.wikipedia.org/wiki/Dependency_injection]  framework. SpecFlow's\nruntime engine will reuse the same binding instance throughout the lifetime of a\nscenario. You can take advantage of this by adding private member variables to\nshare data between steps in the same class. For sharing data among different\nbinding classes, you can define a Data Transfer Object\n[http://en.wikipedia.org/wiki/Data_transfer_object]  and inject it into each\nbinding via the constructor. The runtime will know to include it and will reuse\nthe same instance.\n\n\n--------------------------------------------------------------------------------\n\nWHEN PASSING BINDING PARAMETERS (PART 1)...\n\nCode this\n\nNot that\n\nWhy?\n\nThe SpecFlow engine treats a binding attribute's text as a regular expression.\nYou can take full advantage of regex to transform the human-friendly Gherkin\ntext into binding parameters. The Gherkin, When I remove the product at index 5,\ndoesn't read well to a non-techie, but many developers will go with it because\nit's easy to extract the ordinal value of 5 into a parameter.\n\nTo fix this, you can rewrite the binding text into something more readable and\nstill extract the numeric parameter. The regex literal (\\d+)(?:st|nd|rd|th) \nconverts 1st, 2nd, 3rd, etc into its corresponding numeric value. The Gherkin\ncan be rewritten to When I remove the 5th product  which flows better.\n\n\n--------------------------------------------------------------------------------\n\nWHEN PASSING BINDING PARAMETERS (PART 2)...\n\nCode this\n\nNot that\n\nWhy?\n\nLike the previous example, this binding can be rewritten with a different\nregular expression to make the Gherkin more readable and still extract a\nsensible method argument. You can take it one step further by leveraging step\nargument transformations to convert the text from A-Z  into the proper\nenumeration value. The advantage of step argument transformations is they can be\nreused across bindings.\n\n\n--------------------------------------------------------------------------------\n\nWHEN USING NUMERIC IDENTIFIERS IN GHERKIN...\n\nCode this\n\nNot that\n\nWhy?\n\nI limit the use of numeric identifiers in Gherkin steps as much as possible.\nThey aren't descriptive and are difficult to update with a different data set.\n\nA nice technique is to create a look-up table in the background section to map\nentity names to IDs. The subsequent steps can reference the entities by name,\nand in the step bindings, the names are used to look up the corresponding ID\nvalue. Later, if an ID value changes, only the look-up tables will need to be\nupdated.\n\n\n--------------------------------------------------------------------------------\n\nFor more information on SpecFlow best practices, check out my previous posts\n[http://joebuschmann.com/tag/specflow/]  as well as the excellent SpecFlow\ndocumentation [http://www.specflow.org/documentation/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"A guide to writing Specflow bindings written in a short concise style inspired by the Eat This, Not That! diet book series.","author_id":"1","created_at":"2014-12-21T21:20:59.000Z","created_by":"1","updated_at":"2017-10-22T03:06:40.000Z","updated_by":"1","published_at":"2014-12-29T20:06:20.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b49b","uuid":"b4c689f3-36e0-4b02-bdc6-ee4031f14892","title":"About Me","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Hi, my name is Joe Buschmann, and I'm a software developer living and working in Chicagoland. I build enterprise services and applications using a mix of open source software and Microsoft technology. My experience ranges from front end development with **HTML+React+Node** to building services on the **.NET stack** to automating CI and deployment with **Jenkins and Bamboo**.\\n\\nYou can find me on <a href=\\\"http://www.linkedin.com/in/joebuschmann\\\">LinkedIn</a>, <a social-link=\\\"twitter\\\">twitter</a>, <a social-link=\\\"github\\\">github</a>, and <a social-link=\\\"facebook\\\">facebook</a>.\\n\\n###### I believe in...\\n\\n__Continuously adding value__ and helping my team improve.\\n\\n__Enabling software platforms__ by writing code that is loosely coupled with well defined integration points.\\n\\n__Keeping software design simple and effective__.\\n\\n__Automating tasks__ as part of my daily development habits.\\n\\n__Developing automated tests__ as part of my daily work.\\n\\n__Documenting my work__ to help others learn.\\n\\n###### Skills\\n\\n* C# Programming Language\\n* .NET Development\\n* Creating REST services with with Nancy FX and IIS\\n* BDD Testing with [Specflow](http://www.specflow.org/)\\n* JavaScript\\n* Web development with React, Bootstrap, and Node\\n* JS unit testing with Jasmaine and Jest\\n* Git\\n* CI with Jenkins and Bamboo\\n* Visual Studio 20XX\\n* Resharper\\n* SQL Server and TSQL\\n* Batch and shell scripting\\n* VB6 (how I got my start)\\n\\n###### Education\\n\\n* __BS Physics__, University of Kentucky, Lexington, KY, 1999, _Summa Cum Laude_\\n* __BS, Mathematics__, University of Kentucky, Lexington, KY, 2000, _Summa Cum Laude_\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Hi, my name is Joe Buschmann, and I'm a software developer living and working in Chicagoland. I build enterprise services and applications using a mix of open source software and Microsoft technology. My experience ranges from front end development with <strong>HTML+React+Node</strong> to building services on the <strong>.NET stack</strong> to automating CI and deployment with <strong>Jenkins and Bamboo</strong>.</p>\n<p>You can find me on <a href=\"http://www.linkedin.com/in/joebuschmann\">LinkedIn</a>, <a social-link=\"twitter\">twitter</a>, <a social-link=\"github\">github</a>, and <a social-link=\"facebook\">facebook</a>.</p>\n<h6 id=\"ibelievein\">I believe in...</h6>\n<p><strong>Continuously adding value</strong> and helping my team improve.</p>\n<p><strong>Enabling software platforms</strong> by writing code that is loosely coupled with well defined integration points.</p>\n<p><strong>Keeping software design simple and effective</strong>.</p>\n<p><strong>Automating tasks</strong> as part of my daily development habits.</p>\n<p><strong>Developing automated tests</strong> as part of my daily work.</p>\n<p><strong>Documenting my work</strong> to help others learn.</p>\n<h6 id=\"skills\">Skills</h6>\n<ul>\n<li>C# Programming Language</li>\n<li>.NET Development</li>\n<li>Creating REST services with with Nancy FX and IIS</li>\n<li>BDD Testing with <a href=\"http://www.specflow.org/\">Specflow</a></li>\n<li>JavaScript</li>\n<li>Web development with React, Bootstrap, and Node</li>\n<li>JS unit testing with Jasmaine and Jest</li>\n<li>Git</li>\n<li>CI with Jenkins and Bamboo</li>\n<li>Visual Studio 20XX</li>\n<li>Resharper</li>\n<li>SQL Server and TSQL</li>\n<li>Batch and shell scripting</li>\n<li>VB6 (how I got my start)</li>\n</ul>\n<h6 id=\"education\">Education</h6>\n<ul>\n<li><strong>BS Physics</strong>, University of Kentucky, Lexington, KY, 1999, <em>Summa Cum Laude</em></li>\n<li><strong>BS, Mathematics</strong>, University of Kentucky, Lexington, KY, 2000, <em>Summa Cum Laude</em></li>\n</ul>\n</div>","amp":"40","plaintext":"Hi, my name is Joe Buschmann, and I'm a software developer living and working in\nChicagoland. I build enterprise services and applications using a mix of open\nsource software and Microsoft technology. My experience ranges from front end\ndevelopment with HTML+React+Node  to building services on the .NET stack  to\nautomating CI and deployment with Jenkins and Bamboo.\n\nYou can find me on LinkedIn [http://www.linkedin.com/in/joebuschmann], twitter, \ngithub, and facebook.\n\nI believe in...\nContinuously adding value  and helping my team improve.\n\nEnabling software platforms  by writing code that is loosely coupled with well\ndefined integration points.\n\nKeeping software design simple and effective.\n\nAutomating tasks  as part of my daily development habits.\n\nDeveloping automated tests  as part of my daily work.\n\nDocumenting my work  to help others learn.\n\nSkills\n * C# Programming Language\n * .NET Development\n * Creating REST services with with Nancy FX and IIS\n * BDD Testing with Specflow [http://www.specflow.org/]\n * JavaScript\n * Web development with React, Bootstrap, and Node\n * JS unit testing with Jasmaine and Jest\n * Git\n * CI with Jenkins and Bamboo\n * Visual Studio 20XX\n * Resharper\n * SQL Server and TSQL\n * Batch and shell scripting\n * VB6 (how I got my start)\n\nEducation\n * BS Physics, University of Kentucky, Lexington, KY, 1999, Summa Cum Laude\n * BS, Mathematics, University of Kentucky, Lexington, KY, 2000, Summa Cum Laude","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-01-19T14:28:23.000Z","created_by":"1","updated_at":"2017-02-04T21:40:06.000Z","updated_by":"1","published_at":"2015-01-19T15:07:38.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b49c","uuid":"7021f3a4-26b2-4de1-b344-abf3759f238d","title":"A Shared Development Database is Bad...Very Bad","slug":"a-shared-development-database-is-bad-very-bad","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![Where are your DB create scripts?](http://media.joebuschmann.com/where_are_your_db_create_scripts.png)\\n\\nThe software development group at my office has a shared database that developers connect to for their daily work. In the last few months, the number of developers has doubled, and the practice of using the shared database has not scaled well. It has caused frustration as members of one team make schema changes before another team can consume them. The resulting breakages has led to lost productivity. To make matters worse, the same database serves as a reference for the daily migration process. There's always a chance that a junior developer (or anyone really) could make a mistake and kill migrations.\\n\\nThat gave me an idea for a post on why a shared database is bad. Really bad. Terribly bad. But a Google search showed others coming to the same conclusion, so instead of reiterating their points, I've included the links below.\\n\\n__In short, instead of using a shared database, put your schema and any seed data into source control.__\\n\\n[The unnecessary evil of the shared development database](http://www.troyhunt.com/2011/02/unnecessary-evil-of-shared-development.html)\\n\\n[Top 4 Reasons Why a Shared Development Database is Evil](http://www.benday.com/2011/01/25/top-4-reasons-why-a-shared-development-database-is-evil/)\\n\\n[Three Rules for Database Work](http://odetocode.com/blogs/scott/archive/2008/01/30/three-rules-for-database-work.aspx)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p><img src=\"http://media.joebuschmann.com/where_are_your_db_create_scripts.png\" alt=\"Where are your DB create scripts?\"></p>\n<p>The software development group at my office has a shared database that developers connect to for their daily work. In the last few months, the number of developers has doubled, and the practice of using the shared database has not scaled well. It has caused frustration as members of one team make schema changes before another team can consume them. The resulting breakages has led to lost productivity. To make matters worse, the same database serves as a reference for the daily migration process. There's always a chance that a junior developer (or anyone really) could make a mistake and kill migrations.</p>\n<p>That gave me an idea for a post on why a shared database is bad. Really bad. Terribly bad. But a Google search showed others coming to the same conclusion, so instead of reiterating their points, I've included the links below.</p>\n<p><strong>In short, instead of using a shared database, put your schema and any seed data into source control.</strong></p>\n<p><a href=\"http://www.troyhunt.com/2011/02/unnecessary-evil-of-shared-development.html\">The unnecessary evil of the shared development database</a></p>\n<p><a href=\"http://www.benday.com/2011/01/25/top-4-reasons-why-a-shared-development-database-is-evil/\">Top 4 Reasons Why a Shared Development Database is Evil</a></p>\n<p><a href=\"http://odetocode.com/blogs/scott/archive/2008/01/30/three-rules-for-database-work.aspx\">Three Rules for Database Work</a></p>\n</div>","amp":"42","plaintext":"The software development group at my office has a shared database that\ndevelopers connect to for their daily work. In the last few months, the number\nof developers has doubled, and the practice of using the shared database has not\nscaled well. It has caused frustration as members of one team make schema\nchanges before another team can consume them. The resulting breakages has led to\nlost productivity. To make matters worse, the same database serves as a\nreference for the daily migration process. There's always a chance that a junior\ndeveloper (or anyone really) could make a mistake and kill migrations.\n\nThat gave me an idea for a post on why a shared database is bad. Really bad.\nTerribly bad. But a Google search showed others coming to the same conclusion,\nso instead of reiterating their points, I've included the links below.\n\nIn short, instead of using a shared database, put your schema and any seed data\ninto source control.\n\nThe unnecessary evil of the shared development database\n[http://www.troyhunt.com/2011/02/unnecessary-evil-of-shared-development.html]\n\nTop 4 Reasons Why a Shared Development Database is Evil\n[http://www.benday.com/2011/01/25/top-4-reasons-why-a-shared-development-database-is-evil/]\n\nThree Rules for Database Work\n[http://odetocode.com/blogs/scott/archive/2008/01/30/three-rules-for-database-work.aspx]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-02-17T22:59:39.000Z","created_by":"1","updated_at":"2015-02-25T14:06:11.000Z","updated_by":"1","published_at":"2015-02-17T23:52:12.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b49d","uuid":"23f62a3c-bd27-42ea-9ee7-b968f91b5e28","title":"Async/Await and Recursion","slug":"asyncawait-and-recursion","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"While using the new async/await keywords in C# 5.0 for the first time, I noticed an interesting aspect to how recursive methods behave when using `await`. For one method I was working on, Resharper notified me of a possible stack overflow exception with a \\\"function is recursive on all paths\\\" warning, but it didn't fail at runtime. Instead, it continued happily calling itself with no issues.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1c45eda3f0855d0ad682.js\\\"></script>\\n\\nWhat keeps it from failing is the use of the `await` keyword when calling `DoWorkAsync()`. Awaiting a method call has the effect of splitting the calling method in two. The first part executes and returns immediately when the awaitable method is invoked. The second part runs when control returns to the calling thread. In the example above, the deepest the call stack gets is two levels.\\n\\nFirst recursive call:\\n\\n![Stack Trace After Recursive Call](http://media.joebuschmann.com/async_await_stack_trace1.png)\\n\\nAfter awaiting:\\n\\n![Stack Trace After Awaiting](http://media.joebuschmann.com/async_await_stack_trace2.png)\\n\\nIn this case, Resharper was correct to report that the method was recursive in all paths, but the use of the await keyword prevents a stack overflow exception.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>While using the new async/await keywords in C# 5.0 for the first time, I noticed an interesting aspect to how recursive methods behave when using <code>await</code>. For one method I was working on, Resharper notified me of a possible stack overflow exception with a &quot;function is recursive on all paths&quot; warning, but it didn't fail at runtime. Instead, it continued happily calling itself with no issues.</p>\n<script src=\"https://gist.github.com/joebuschmann/1c45eda3f0855d0ad682.js\"></script>\n<p>What keeps it from failing is the use of the <code>await</code> keyword when calling <code>DoWorkAsync()</code>. Awaiting a method call has the effect of splitting the calling method in two. The first part executes and returns immediately when the awaitable method is invoked. The second part runs when control returns to the calling thread. In the example above, the deepest the call stack gets is two levels.</p>\n<p>First recursive call:</p>\n<p><img src=\"http://media.joebuschmann.com/async_await_stack_trace1.png\" alt=\"Stack Trace After Recursive Call\"></p>\n<p>After awaiting:</p>\n<p><img src=\"http://media.joebuschmann.com/async_await_stack_trace2.png\" alt=\"Stack Trace After Awaiting\"></p>\n<p>In this case, Resharper was correct to report that the method was recursive in all paths, but the use of the await keyword prevents a stack overflow exception.</p>\n</div>","amp":"44","plaintext":"While using the new async/await keywords in C# 5.0 for the first time, I noticed\nan interesting aspect to how recursive methods behave when using await. For one\nmethod I was working on, Resharper notified me of a possible stack overflow\nexception with a \"function is recursive on all paths\" warning, but it didn't\nfail at runtime. Instead, it continued happily calling itself with no issues.\n\nWhat keeps it from failing is the use of the await  keyword when calling \nDoWorkAsync(). Awaiting a method call has the effect of splitting the calling\nmethod in two. The first part executes and returns immediately when the\nawaitable method is invoked. The second part runs when control returns to the\ncalling thread. In the example above, the deepest the call stack gets is two\nlevels.\n\nFirst recursive call:\n\n\n\nAfter awaiting:\n\n\n\nIn this case, Resharper was correct to report that the method was recursive in\nall paths, but the use of the await keyword prevents a stack overflow exception.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-03-20T22:20:32.000Z","created_by":"1","updated_at":"2015-03-25T18:52:22.000Z","updated_by":"1","published_at":"2015-03-25T18:52:22.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b49e","uuid":"14d7bb2a-6bb1-4768-8266-be11b2127c64","title":"Frank Drebin IT Manager:  Shake It Off","slug":"frank-drebin-it-manager-shake-it-off","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Have you ever wondered what would have happened if [Frank Drebin](https://www.google.com/search?q=frank+drebin) of Naked Gun fame had decided to pursue a career in Information Technology instead of law enforcement? Well, your wait is over. This is the first installment of the adventures of Frank Drebin, IT Manager. Enjoy!\\n\\n### Act I\\n\\n*Fade in.*\\n\\n*Frank Drebin is walking through an office crowded with cubicles. He is wearing headphones and seems oblivious to his surroundings.*\\n\\nED\\nGood morning Frank. (*Taps him on the shoulder.*) Good morning!\\n\\nFRANK\\n(*Takes off headphones which are blasting music.*) Hi Ed.\\n\\nED\\nWhat are you listening to?\\n\\nFRANK\\nTaylor Swift.\\n\\nED\\nReally?\\n\\nFRANK\\nShe's the mouthpiece to my life. The soundtrack of my happiness and sorrow.\\n\\nED\\nHaving a bad day?\\n\\nFRANK\\nJane left me. IT is a cruel mistress. It makes fools of us all.\\n\\n*Frank and Ed walk past two programmers arguing in a cubicle.*\\n\\nSPACES GUY\\nSpaces!\\n\\nTABS GUY\\nTabs!\\n\\nSPACES GUY\\nSpaces!\\n\\nTABS GUY\\nTabs!\\n\\n*They continue down a hall.*\\n\\nED\\nGod Frank, sorry to hear that.\\n\\nFRANK\\nI've made a lot of mistakes in my life. Like doubting the '85 Bears. But letting Jane walk out of my life was the worst mistake of all. Every day something reminds me of her, and the memories come flooding back. (*Thoroughbred horse walks by and shakes its mane.*) Her flowing silky hair. (*A songbird lands on Frank's shoulder and sings.*) The sweet sound of her voice.\\n\\nED\\nThat's tough.\\n\\nFRANK\\nWe shared everything Ed. Hopes, dreams, a toothbrush. I remember the first time I asked her out on a date. It was a simpler time. A happier time.\\n\\n*Fade to a flashback of Frank and Jane ten years younger.*\\n\\nFRANK\\nAre you available Friday night? There's a new Italian place in the Village.\\n\\nJANE\\nI don't know, Friday's a bad night for me.\\n\\nFRANK\\nOh, I'm sorry...I made a mistake. I thought you were interested. See you around. (*Turns to leave.*)\\n\\nJANE\\nFrank, wait! I am interested! Very much. It's just that there's a Dr Quinn Medicine Woman marathon on TBS. I can't miss it.\\n\\nFRANK\\nReally?\\n\\nJANE\\nYep.\\n\\nFRANK\\nI'll have to Tivo that.\\n\\nJANE\\nHow about Saturday night?\\n\\nFRANK\\nSaturday's bad for me. I need to water my garden.\\n\\nJANE\\nBut the forecast calls for rain.\\n\\nFRANK\\nI can't risk it. How about Sunday night?\\n\\nJANE\\nI'd love to.\\n\\nFRANK\\nGreat! I'll bring my ukulele.\\n\\nJANE\\nWhat do you mean your ukulele?\\n\\nFRANK\\nI was thinking after dinner I could serenade you with Hawaiian folk music.\\n\\nJANE\\n(*Turns away.*) I'm sorry, Frank. I'm not that kind of woman. I don't let men serenade me on the first date.\\n\\n*Awkward silence.*\\n\\nFRANK\\nI see. I didn't mean to be too forward. (*Touches her arm.*) Jane?\\n\\nJANE\\nWell...you have to promise to leave your ukulele at home...\\n\\nFRANK\\nI promise.\\n\\nJANE\\n...and settle for mind-blowing sex instead.\\n\\n*Fade back to the present.*\\n\\nED\\nHang in there Frank. There are lots of women out there.\\n\\nFRANK\\nBut none like Jane.\\n\\nED\\nI know how you feel.\\n\\nFRANK\\nDo you really Ed?\\n\\nED\\nYeah, I lost my beloved Mildred to cancer a year ago last week.\\n\\nFRANK\\nOh right. Forgot about that.\\n\\nED\\nWhere you headed?\\n\\nFRANK\\nThe server room. Looking into a production issue.\\n\\nED\\nMind if I tag along?\\n\\nFRANK\\nNot at all.\\n\\n### Scene II\\n\\nED\\nI hear the new systems admin is a piece of work.\\n\\nFRANK\\nWhat's his name?\\n\\nED\\nGanesh.\\n\\n*Enters Ganesh's office next to the server room.*\\n\\nFRANK\\nGood morning Ganesh.\\n\\nGANESH\\nGood morning.\\n\\nFRANK\\nI'm Frank. This is Ed.\\n\\nGANESH\\nNice to meet you.\\n\\nFRANK\\nWe need to get into the server room to debug a production issue.\\n\\nGANESH\\nDo you have the passcode to get in?\\n\\nFRANK\\nNo. My department isn't normally given access. Under the circumstances though, an exception can be made.\\n\\nGANESH\\nSorry, you're not authorized.\\n\\nFRANK\\nLook, I know you're new here, and you don't want to get in trouble. It's really not a big deal.\\n\\nGANESH\\nWell, if it wasn't a big deal, then you would have the passcode, wouldn't you?\\n\\n*Frank grabs Ganesh's shirt, but Ed stops him.*\\n\\nED\\nI got this Frank. (*To Ganesh*) I think we can come to an understanding about this. There must be something you want.\\n\\nGANESH\\nDon't know what you're talking about. (*Turns to type on his laptop.*)\\n\\n*Ed opens up his jacket to reveal a range of tech goodies hanging from hooks. He pulls off a card and throws it on Ganesh's desk.*\\n\\nED\\nHow about a $500 gift card to the Microsoft store?\\n\\nGANESH\\n(*Without looking up.*) Please. Microsoft hands those out like candy.\\n\\nED\\n(*Glances at Frank who nods.*) Okay. I get it. You're not gonna fall for any cheap trinket. (*Pulls another card out of his jacket.*) How about a personal Resharper 9 license...ultimate edition.\\n\\nGANESH\\n(*Stops typing.*) I'm listening.\\n\\nED\\nWe want the passcode Ganesh. And any time it changes, you let us know.\\n\\nGANESH\\nThat's a tall order. (*Starts typing again.*)\\n\\nED\\nI know you code on the side which is in violation of your employment agreement. (*Ganesh hesitates.*) And I bet you use an unlicensed copy of ReSharper too. This would put you on the up and up license-wise. And we keep our mouths shut about your business.\\n\\nGANESH\\nWho told you about my side business?\\n\\nED\\nWe hear things. So what will it be?\\n\\nGANESH\\n(*Turns toward them.*) Okay, it's a deal. (*Reaches out to take the cards, but Frank grabs his wrist.*)\\n\\nFRANK\\nWhat's the passcode?\\n\\nGANESH\\n1989\\n\\n*Frank and Ganesh glare at each other then Frank lets go.*\\n\\nED\\nNice doing business with you.\\n\\n### Almost There\\n\\n*In the server room.*\\n\\nFRANK\\nHow did you know Ganesh was slinging code on the side?\\n\\nED\\nIt was a guess. Pretty much all the engineers do it though. The money's too good.\\n\\n*Frank sees Brent, an operations engineer. He is wearing a t-shirt that reads: \\\"Send all beer to /home/brent. Send all complaints to /dev/null.\\\"*\\n\\nFRANK\\nBrent, it's never good news when you're in here this early.\\n\\nBRENT\\nJust trying to figure out this production issue.\\n\\nFRANK\\nWhat do you have?\\n\\nBRENT\\nGonorrhea. But I'm taking something for it - should clear up by the end of the week.\\n\\nFRANK\\nNo, I mean the production issue. Have you found the problem?\\n\\nBRENT\\nNot yet. Still digging in.\\n\\nFRANK\\nLet me know when you find something.\\n\\nBRENT\\nWill do.\\n\\n### The Final Chapter\\n\\n*Frank and Ed leave the server room and continue down a hall.*\\n\\nED\\nHey, what happened to Nordberg? I haven't seen him around lately.\\n\\nFRANK\\nOut sick. He was working some long days and nights. The lack of sleep and all the Mountain Dew did a number on his immune system. What should have been a simple cold turned into a week long affair.\\n\\nED\\nI'll give him a call later. See how he's doing.\\n\\nFRANK\\nHe'll appreciate that.\\n\\nED\\nSee you around.\\n\\n*Frank walks into his office past a figure in the shadows. He flips on the light.*\\n\\nGINA\\nGood morning Frank.\\n\\nFRANK\\nOh God! Gina! You startled me. (*Breathes deeply.*) I'd ask you to come in...but here you are.\\n\\nGINA\\nThat's right. Here I am. I'll get right to it. Did you approve the recent changes to the build templates?\\n\\nFRANK\\nYes, those needed to go in ASAP.\\n\\nGINA\\nWell, they didn't get approval from the Change Review and Advisory Panel.\\n\\nFRANK\\nI know. Given the nature of the updates, I just pushed them through.\\n\\nGINA\\nNothing gets into production without approval from CRAP. All department heads agreed to that. Including you.\\n\\nFRANK\\nI don't have time for any CRAP meetings. This needed to go in fast. I hope you can understand.\\n\\nGINA\\nThere are no exceptions. Even for you.\\n\\nFRANK\\nSometimes it's easier to ask for forgiveness than permission.\\n\\nGINA\\nI see how it is.\\n\\n*Gina closes the office door and walks over to Frank. She brushes some lint off his collar then punches him in the gut. He crumples to the ground. Gina squats down next to him.*\\n\\nGINA\\n(*In a low voice.*) Follow the process Frank. (*Stands up and turns to walk away.*) Oh, and sorry about that. I hope you can forgive me.\\n\\n*Gina opens the door and walks out. Franks stumbles into his desk chair and leans back with his eyes closed.*\\n\\nFRANK\\n(*Pops his headphones in and sings along.*) Cause the players gonna play, play, play, play, play / And the haters gonna hate, hate, hate, hate, hate / Baby I'm just gonna shake, shake, shake, shake, shake / I shake it off, I shake it off.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Have you ever wondered what would have happened if <a href=\"https://www.google.com/search?q=frank+drebin\">Frank Drebin</a> of Naked Gun fame had decided to pursue a career in Information Technology instead of law enforcement? Well, your wait is over. This is the first installment of the adventures of Frank Drebin, IT Manager. Enjoy!</p>\n<h3 id=\"acti\">Act I</h3>\n<p><em>Fade in.</em></p>\n<p><em>Frank Drebin is walking through an office crowded with cubicles. He is wearing headphones and seems oblivious to his surroundings.</em></p>\n<p>ED<br>\nGood morning Frank. (<em>Taps him on the shoulder.</em>) Good morning!</p>\n<p>FRANK<br>\n(<em>Takes off headphones which are blasting music.</em>) Hi Ed.</p>\n<p>ED<br>\nWhat are you listening to?</p>\n<p>FRANK<br>\nTaylor Swift.</p>\n<p>ED<br>\nReally?</p>\n<p>FRANK<br>\nShe's the mouthpiece to my life. The soundtrack of my happiness and sorrow.</p>\n<p>ED<br>\nHaving a bad day?</p>\n<p>FRANK<br>\nJane left me. IT is a cruel mistress. It makes fools of us all.</p>\n<p><em>Frank and Ed walk past two programmers arguing in a cubicle.</em></p>\n<p>SPACES GUY<br>\nSpaces!</p>\n<p>TABS GUY<br>\nTabs!</p>\n<p>SPACES GUY<br>\nSpaces!</p>\n<p>TABS GUY<br>\nTabs!</p>\n<p><em>They continue down a hall.</em></p>\n<p>ED<br>\nGod Frank, sorry to hear that.</p>\n<p>FRANK<br>\nI've made a lot of mistakes in my life. Like doubting the '85 Bears. But letting Jane walk out of my life was the worst mistake of all. Every day something reminds me of her, and the memories come flooding back. (<em>Thoroughbred horse walks by and shakes its mane.</em>) Her flowing silky hair. (<em>A songbird lands on Frank's shoulder and sings.</em>) The sweet sound of her voice.</p>\n<p>ED<br>\nThat's tough.</p>\n<p>FRANK<br>\nWe shared everything Ed. Hopes, dreams, a toothbrush. I remember the first time I asked her out on a date. It was a simpler time. A happier time.</p>\n<p><em>Fade to a flashback of Frank and Jane ten years younger.</em></p>\n<p>FRANK<br>\nAre you available Friday night? There's a new Italian place in the Village.</p>\n<p>JANE<br>\nI don't know, Friday's a bad night for me.</p>\n<p>FRANK<br>\nOh, I'm sorry...I made a mistake. I thought you were interested. See you around. (<em>Turns to leave.</em>)</p>\n<p>JANE<br>\nFrank, wait! I am interested! Very much. It's just that there's a Dr Quinn Medicine Woman marathon on TBS. I can't miss it.</p>\n<p>FRANK<br>\nReally?</p>\n<p>JANE<br>\nYep.</p>\n<p>FRANK<br>\nI'll have to Tivo that.</p>\n<p>JANE<br>\nHow about Saturday night?</p>\n<p>FRANK<br>\nSaturday's bad for me. I need to water my garden.</p>\n<p>JANE<br>\nBut the forecast calls for rain.</p>\n<p>FRANK<br>\nI can't risk it. How about Sunday night?</p>\n<p>JANE<br>\nI'd love to.</p>\n<p>FRANK<br>\nGreat! I'll bring my ukulele.</p>\n<p>JANE<br>\nWhat do you mean your ukulele?</p>\n<p>FRANK<br>\nI was thinking after dinner I could serenade you with Hawaiian folk music.</p>\n<p>JANE<br>\n(<em>Turns away.</em>) I'm sorry, Frank. I'm not that kind of woman. I don't let men serenade me on the first date.</p>\n<p><em>Awkward silence.</em></p>\n<p>FRANK<br>\nI see. I didn't mean to be too forward. (<em>Touches her arm.</em>) Jane?</p>\n<p>JANE<br>\nWell...you have to promise to leave your ukulele at home...</p>\n<p>FRANK<br>\nI promise.</p>\n<p>JANE<br>\n...and settle for mind-blowing sex instead.</p>\n<p><em>Fade back to the present.</em></p>\n<p>ED<br>\nHang in there Frank. There are lots of women out there.</p>\n<p>FRANK<br>\nBut none like Jane.</p>\n<p>ED<br>\nI know how you feel.</p>\n<p>FRANK<br>\nDo you really Ed?</p>\n<p>ED<br>\nYeah, I lost my beloved Mildred to cancer a year ago last week.</p>\n<p>FRANK<br>\nOh right. Forgot about that.</p>\n<p>ED<br>\nWhere you headed?</p>\n<p>FRANK<br>\nThe server room. Looking into a production issue.</p>\n<p>ED<br>\nMind if I tag along?</p>\n<p>FRANK<br>\nNot at all.</p>\n<h3 id=\"sceneii\">Scene II</h3>\n<p>ED<br>\nI hear the new systems admin is a piece of work.</p>\n<p>FRANK<br>\nWhat's his name?</p>\n<p>ED<br>\nGanesh.</p>\n<p><em>Enters Ganesh's office next to the server room.</em></p>\n<p>FRANK<br>\nGood morning Ganesh.</p>\n<p>GANESH<br>\nGood morning.</p>\n<p>FRANK<br>\nI'm Frank. This is Ed.</p>\n<p>GANESH<br>\nNice to meet you.</p>\n<p>FRANK<br>\nWe need to get into the server room to debug a production issue.</p>\n<p>GANESH<br>\nDo you have the passcode to get in?</p>\n<p>FRANK<br>\nNo. My department isn't normally given access. Under the circumstances though, an exception can be made.</p>\n<p>GANESH<br>\nSorry, you're not authorized.</p>\n<p>FRANK<br>\nLook, I know you're new here, and you don't want to get in trouble. It's really not a big deal.</p>\n<p>GANESH<br>\nWell, if it wasn't a big deal, then you would have the passcode, wouldn't you?</p>\n<p><em>Frank grabs Ganesh's shirt, but Ed stops him.</em></p>\n<p>ED<br>\nI got this Frank. (<em>To Ganesh</em>) I think we can come to an understanding about this. There must be something you want.</p>\n<p>GANESH<br>\nDon't know what you're talking about. (<em>Turns to type on his laptop.</em>)</p>\n<p><em>Ed opens up his jacket to reveal a range of tech goodies hanging from hooks. He pulls off a card and throws it on Ganesh's desk.</em></p>\n<p>ED<br>\nHow about a $500 gift card to the Microsoft store?</p>\n<p>GANESH<br>\n(<em>Without looking up.</em>) Please. Microsoft hands those out like candy.</p>\n<p>ED<br>\n(<em>Glances at Frank who nods.</em>) Okay. I get it. You're not gonna fall for any cheap trinket. (<em>Pulls another card out of his jacket.</em>) How about a personal Resharper 9 license...ultimate edition.</p>\n<p>GANESH<br>\n(<em>Stops typing.</em>) I'm listening.</p>\n<p>ED<br>\nWe want the passcode Ganesh. And any time it changes, you let us know.</p>\n<p>GANESH<br>\nThat's a tall order. (<em>Starts typing again.</em>)</p>\n<p>ED<br>\nI know you code on the side which is in violation of your employment agreement. (<em>Ganesh hesitates.</em>) And I bet you use an unlicensed copy of ReSharper too. This would put you on the up and up license-wise. And we keep our mouths shut about your business.</p>\n<p>GANESH<br>\nWho told you about my side business?</p>\n<p>ED<br>\nWe hear things. So what will it be?</p>\n<p>GANESH<br>\n(<em>Turns toward them.</em>) Okay, it's a deal. (<em>Reaches out to take the cards, but Frank grabs his wrist.</em>)</p>\n<p>FRANK<br>\nWhat's the passcode?</p>\n<p>GANESH<br>\n1989</p>\n<p><em>Frank and Ganesh glare at each other then Frank lets go.</em></p>\n<p>ED<br>\nNice doing business with you.</p>\n<h3 id=\"almostthere\">Almost There</h3>\n<p><em>In the server room.</em></p>\n<p>FRANK<br>\nHow did you know Ganesh was slinging code on the side?</p>\n<p>ED<br>\nIt was a guess. Pretty much all the engineers do it though. The money's too good.</p>\n<p><em>Frank sees Brent, an operations engineer. He is wearing a t-shirt that reads: &quot;Send all beer to /home/brent. Send all complaints to /dev/null.&quot;</em></p>\n<p>FRANK<br>\nBrent, it's never good news when you're in here this early.</p>\n<p>BRENT<br>\nJust trying to figure out this production issue.</p>\n<p>FRANK<br>\nWhat do you have?</p>\n<p>BRENT<br>\nGonorrhea. But I'm taking something for it - should clear up by the end of the week.</p>\n<p>FRANK<br>\nNo, I mean the production issue. Have you found the problem?</p>\n<p>BRENT<br>\nNot yet. Still digging in.</p>\n<p>FRANK<br>\nLet me know when you find something.</p>\n<p>BRENT<br>\nWill do.</p>\n<h3 id=\"thefinalchapter\">The Final Chapter</h3>\n<p><em>Frank and Ed leave the server room and continue down a hall.</em></p>\n<p>ED<br>\nHey, what happened to Nordberg? I haven't seen him around lately.</p>\n<p>FRANK<br>\nOut sick. He was working some long days and nights. The lack of sleep and all the Mountain Dew did a number on his immune system. What should have been a simple cold turned into a week long affair.</p>\n<p>ED<br>\nI'll give him a call later. See how he's doing.</p>\n<p>FRANK<br>\nHe'll appreciate that.</p>\n<p>ED<br>\nSee you around.</p>\n<p><em>Frank walks into his office past a figure in the shadows. He flips on the light.</em></p>\n<p>GINA<br>\nGood morning Frank.</p>\n<p>FRANK<br>\nOh God! Gina! You startled me. (<em>Breathes deeply.</em>) I'd ask you to come in...but here you are.</p>\n<p>GINA<br>\nThat's right. Here I am. I'll get right to it. Did you approve the recent changes to the build templates?</p>\n<p>FRANK<br>\nYes, those needed to go in ASAP.</p>\n<p>GINA<br>\nWell, they didn't get approval from the Change Review and Advisory Panel.</p>\n<p>FRANK<br>\nI know. Given the nature of the updates, I just pushed them through.</p>\n<p>GINA<br>\nNothing gets into production without approval from CRAP. All department heads agreed to that. Including you.</p>\n<p>FRANK<br>\nI don't have time for any CRAP meetings. This needed to go in fast. I hope you can understand.</p>\n<p>GINA<br>\nThere are no exceptions. Even for you.</p>\n<p>FRANK<br>\nSometimes it's easier to ask for forgiveness than permission.</p>\n<p>GINA<br>\nI see how it is.</p>\n<p><em>Gina closes the office door and walks over to Frank. She brushes some lint off his collar then punches him in the gut. He crumples to the ground. Gina squats down next to him.</em></p>\n<p>GINA<br>\n(<em>In a low voice.</em>) Follow the process Frank. (<em>Stands up and turns to walk away.</em>) Oh, and sorry about that. I hope you can forgive me.</p>\n<p><em>Gina opens the door and walks out. Franks stumbles into his desk chair and leans back with his eyes closed.</em></p>\n<p>FRANK<br>\n(<em>Pops his headphones in and sings along.</em>) Cause the players gonna play, play, play, play, play / And the haters gonna hate, hate, hate, hate, hate / Baby I'm just gonna shake, shake, shake, shake, shake / I shake it off, I shake it off.</p>\n</div>","amp":"46","plaintext":"Have you ever wondered what would have happened if Frank Drebin\n[https://www.google.com/search?q=frank+drebin]  of Naked Gun fame had decided to\npursue a career in Information Technology instead of law enforcement? Well, your\nwait is over. This is the first installment of the adventures of Frank Drebin,\nIT Manager. Enjoy!\n\nAct I\nFade in.\n\nFrank Drebin is walking through an office crowded with cubicles. He is wearing\nheadphones and seems oblivious to his surroundings.\n\nED\nGood morning Frank. (Taps him on the shoulder.) Good morning!\n\nFRANK\n(Takes off headphones which are blasting music.) Hi Ed.\n\nED\nWhat are you listening to?\n\nFRANK\nTaylor Swift.\n\nED\nReally?\n\nFRANK\nShe's the mouthpiece to my life. The soundtrack of my happiness and sorrow.\n\nED\nHaving a bad day?\n\nFRANK\nJane left me. IT is a cruel mistress. It makes fools of us all.\n\nFrank and Ed walk past two programmers arguing in a cubicle.\n\nSPACES GUY\nSpaces!\n\nTABS GUY\nTabs!\n\nSPACES GUY\nSpaces!\n\nTABS GUY\nTabs!\n\nThey continue down a hall.\n\nED\nGod Frank, sorry to hear that.\n\nFRANK\nI've made a lot of mistakes in my life. Like doubting the '85 Bears. But letting\nJane walk out of my life was the worst mistake of all. Every day something\nreminds me of her, and the memories come flooding back. (Thoroughbred horse\nwalks by and shakes its mane.) Her flowing silky hair. (A songbird lands on\nFrank's shoulder and sings.) The sweet sound of her voice.\n\nED\nThat's tough.\n\nFRANK\nWe shared everything Ed. Hopes, dreams, a toothbrush. I remember the first time\nI asked her out on a date. It was a simpler time. A happier time.\n\nFade to a flashback of Frank and Jane ten years younger.\n\nFRANK\nAre you available Friday night? There's a new Italian place in the Village.\n\nJANE\nI don't know, Friday's a bad night for me.\n\nFRANK\nOh, I'm sorry...I made a mistake. I thought you were interested. See you around.\n(Turns to leave.)\n\nJANE\nFrank, wait! I am interested! Very much. It's just that there's a Dr Quinn\nMedicine Woman marathon on TBS. I can't miss it.\n\nFRANK\nReally?\n\nJANE\nYep.\n\nFRANK\nI'll have to Tivo that.\n\nJANE\nHow about Saturday night?\n\nFRANK\nSaturday's bad for me. I need to water my garden.\n\nJANE\nBut the forecast calls for rain.\n\nFRANK\nI can't risk it. How about Sunday night?\n\nJANE\nI'd love to.\n\nFRANK\nGreat! I'll bring my ukulele.\n\nJANE\nWhat do you mean your ukulele?\n\nFRANK\nI was thinking after dinner I could serenade you with Hawaiian folk music.\n\nJANE\n(Turns away.) I'm sorry, Frank. I'm not that kind of woman. I don't let men\nserenade me on the first date.\n\nAwkward silence.\n\nFRANK\nI see. I didn't mean to be too forward. (Touches her arm.) Jane?\n\nJANE\nWell...you have to promise to leave your ukulele at home...\n\nFRANK\nI promise.\n\nJANE\n...and settle for mind-blowing sex instead.\n\nFade back to the present.\n\nED\nHang in there Frank. There are lots of women out there.\n\nFRANK\nBut none like Jane.\n\nED\nI know how you feel.\n\nFRANK\nDo you really Ed?\n\nED\nYeah, I lost my beloved Mildred to cancer a year ago last week.\n\nFRANK\nOh right. Forgot about that.\n\nED\nWhere you headed?\n\nFRANK\nThe server room. Looking into a production issue.\n\nED\nMind if I tag along?\n\nFRANK\nNot at all.\n\nScene II\nED\nI hear the new systems admin is a piece of work.\n\nFRANK\nWhat's his name?\n\nED\nGanesh.\n\nEnters Ganesh's office next to the server room.\n\nFRANK\nGood morning Ganesh.\n\nGANESH\nGood morning.\n\nFRANK\nI'm Frank. This is Ed.\n\nGANESH\nNice to meet you.\n\nFRANK\nWe need to get into the server room to debug a production issue.\n\nGANESH\nDo you have the passcode to get in?\n\nFRANK\nNo. My department isn't normally given access. Under the circumstances though,\nan exception can be made.\n\nGANESH\nSorry, you're not authorized.\n\nFRANK\nLook, I know you're new here, and you don't want to get in trouble. It's really\nnot a big deal.\n\nGANESH\nWell, if it wasn't a big deal, then you would have the passcode, wouldn't you?\n\nFrank grabs Ganesh's shirt, but Ed stops him.\n\nED\nI got this Frank. (To Ganesh) I think we can come to an understanding about\nthis. There must be something you want.\n\nGANESH\nDon't know what you're talking about. (Turns to type on his laptop.)\n\nEd opens up his jacket to reveal a range of tech goodies hanging from hooks. He\npulls off a card and throws it on Ganesh's desk.\n\nED\nHow about a $500 gift card to the Microsoft store?\n\nGANESH\n(Without looking up.) Please. Microsoft hands those out like candy.\n\nED\n(Glances at Frank who nods.) Okay. I get it. You're not gonna fall for any cheap\ntrinket. (Pulls another card out of his jacket.) How about a personal Resharper\n9 license...ultimate edition.\n\nGANESH\n(Stops typing.) I'm listening.\n\nED\nWe want the passcode Ganesh. And any time it changes, you let us know.\n\nGANESH\nThat's a tall order. (Starts typing again.)\n\nED\nI know you code on the side which is in violation of your employment agreement.\n(Ganesh hesitates.) And I bet you use an unlicensed copy of ReSharper too. This\nwould put you on the up and up license-wise. And we keep our mouths shut about\nyour business.\n\nGANESH\nWho told you about my side business?\n\nED\nWe hear things. So what will it be?\n\nGANESH\n(Turns toward them.) Okay, it's a deal. (Reaches out to take the cards, but\nFrank grabs his wrist.)\n\nFRANK\nWhat's the passcode?\n\nGANESH\n1989\n\nFrank and Ganesh glare at each other then Frank lets go.\n\nED\nNice doing business with you.\n\nAlmost There\nIn the server room.\n\nFRANK\nHow did you know Ganesh was slinging code on the side?\n\nED\nIt was a guess. Pretty much all the engineers do it though. The money's too\ngood.\n\nFrank sees Brent, an operations engineer. He is wearing a t-shirt that reads:\n\"Send all beer to /home/brent. Send all complaints to /dev/null.\"\n\nFRANK\nBrent, it's never good news when you're in here this early.\n\nBRENT\nJust trying to figure out this production issue.\n\nFRANK\nWhat do you have?\n\nBRENT\nGonorrhea. But I'm taking something for it - should clear up by the end of the\nweek.\n\nFRANK\nNo, I mean the production issue. Have you found the problem?\n\nBRENT\nNot yet. Still digging in.\n\nFRANK\nLet me know when you find something.\n\nBRENT\nWill do.\n\nThe Final Chapter\nFrank and Ed leave the server room and continue down a hall.\n\nED\nHey, what happened to Nordberg? I haven't seen him around lately.\n\nFRANK\nOut sick. He was working some long days and nights. The lack of sleep and all\nthe Mountain Dew did a number on his immune system. What should have been a\nsimple cold turned into a week long affair.\n\nED\nI'll give him a call later. See how he's doing.\n\nFRANK\nHe'll appreciate that.\n\nED\nSee you around.\n\nFrank walks into his office past a figure in the shadows. He flips on the light.\n\nGINA\nGood morning Frank.\n\nFRANK\nOh God! Gina! You startled me. (Breathes deeply.) I'd ask you to come in...but\nhere you are.\n\nGINA\nThat's right. Here I am. I'll get right to it. Did you approve the recent\nchanges to the build templates?\n\nFRANK\nYes, those needed to go in ASAP.\n\nGINA\nWell, they didn't get approval from the Change Review and Advisory Panel.\n\nFRANK\nI know. Given the nature of the updates, I just pushed them through.\n\nGINA\nNothing gets into production without approval from CRAP. All department heads\nagreed to that. Including you.\n\nFRANK\nI don't have time for any CRAP meetings. This needed to go in fast. I hope you\ncan understand.\n\nGINA\nThere are no exceptions. Even for you.\n\nFRANK\nSometimes it's easier to ask for forgiveness than permission.\n\nGINA\nI see how it is.\n\nGina closes the office door and walks over to Frank. She brushes some lint off\nhis collar then punches him in the gut. He crumples to the ground. Gina squats\ndown next to him.\n\nGINA\n(In a low voice.) Follow the process Frank. (Stands up and turns to walk away.)\nOh, and sorry about that. I hope you can forgive me.\n\nGina opens the door and walks out. Franks stumbles into his desk chair and leans\nback with his eyes closed.\n\nFRANK\n(Pops his headphones in and sings along.) Cause the players gonna play, play,\nplay, play, play / And the haters gonna hate, hate, hate, hate, hate / Baby I'm\njust gonna shake, shake, shake, shake, shake / I shake it off, I shake it off.","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-06-18T20:48:53.000Z","created_by":"1","updated_at":"2017-02-08T20:37:22.000Z","updated_by":"1","published_at":"2015-07-06T01:41:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b49f","uuid":"ca85ce37-28a2-4bdf-acc5-8aefd0a6d663","title":"Frank Drebin IT Manager: The Employee Lifecycle","slug":"frank-drebin-it-manager-the-employee-lifecycle","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One of the most challenging aspects of IT work is managing employees and their egos, insecurities, and demands. In this latest installment, Frank Drebin shows us how to navigate all aspects of the employee lifecycle.\\n\\n### Acquisition\\n\\n*Fade in.*\\n\\n*Susan steps into an empty conference room and greets a job candidate.*\\n\\nSUSAN\\nGood morning, my name's Susan. Thanks for interviewing with us today. Before we get started, do you want anything to drink?\\n\\nEX-GOOGLER\\nDo you have any smoothies?\\n\\nSUSAN\\nMmm, no smoothies.\\n\\nEX-GOOGLER\\nCappuccinos, lattes?\\n\\nSUSAN\\nJust coffee.\\n\\nEX-GOOGLER\\nI'm good then. Let's get started.\\n\\nSUSAN\\nSure. So I don't know how much Frank told you about the position. It's for a devops architect.\\n\\nEX-GOOGLER\\nFrank told me about it.\\n\\nSUSAN\\nCool. I was looking over your resume and, uhh, to be blunt, I'm confused.\\n\\nEX-GOOGLER\\nOk, what's the problem?\\n\\nSUSAN\\nWell, besides your contact information, it literally has nothing besides, \\\"2005-2015 - Worked at Google.\\\"\\n\\nEX-GOOGLER\\nIt means exactly what it says. I used to work for Google.\\n\\nSUSAN\\nI know, and that makes sense. It's just that people usually include more detail in their resumes. Job responsibilities, technology, stuff like that.\\n\\nEX-GOOGLER\\n(*Shrugs*) What else is there to say? I worked for Google for ten years.\\n\\nSUSAN\\nI'm looking for a little more though. Experience with VMs, Puppet, Docker, etc.\\n\\nEX-GOOGLER\\nI'm perfectly qualified. I used to work for Google.\\n\\nSUSAN\\nAnd I totally get that. I just want to make sure your experience matches up with what we need. We desperately want to automate our environments. Essentially create or update environments with a click of a button. Sandbox, QA, production. Anything we need.\\n\\nEX-GOOGLER\\nSusan, do you think that Google automates?\\n\\nSUSAN\\nI'm sure they do.\\n\\nEX-GOOGLER\\nWell, I used to work there. For ten years. How many people here used to work at Google?\\n\\nSUSAN\\nI'm not sure. No one that I know of.\\n\\nEX-GOOGLER\\nYou probably have some pissed off former Palm engineers who desperately hope that WebOS is resurrected.\\n\\nSUSAN\\nUhh, no.\\n\\nEX-GOOGLER\\nYou need to take advantage of this opportunity. You'll be able to say you have someone who used to work for Google. When executives are in for an office visit, you can bring them by my cube and tell them I worked for Google. When you're trying to land that big contract, you can bring the stakeholders to me. I'll tell them stories about working at Google, and BAM! The contract is yours.\\n\\n*Silence*\\n\\nSUSAN\\nI'm not sure how to respond to that.\\n\\nEX-GOOGLER\\n(*Leans forward and takes Susan's hands in his.*) Susan. Google is fucking awesome. And I was there, crushing it, for ten years. Which means I'm fucking awesome. If you visit the Googleplex and ask for a smoothie, do you know how they'll respond?\\n\\nSUSAN\\nNo.\\n\\nEX-GOOGLER\\n(*Continues holding her hands.*) They'll ask you what flavor. Strawberry. Mango. Whatever you want. They have dozens of kinds. That's how awesome Google is. And if you want coffee, they'll bring you one made by an actual barista. Not some shitty Bunn machine. Do you understand what I'm trying to say?\\n\\nSUSAN\\nThat...you uhh, worked for Google?\\n\\nEX-GOOGLER\\n(*Leans back with a smile.*) Bingo! You get it now.\\n\\n*Later in Frank Drebin's office.*\\n\\nFRANK\\nSo, what do you think?\\n\\nSUSAN\\nHe won't work out. Thumbs down for me.\\n\\nFRANK\\nAre you kidding me? He's incredible.\\n\\nSUSAN\\nHe was really vague about his job experience.\\n\\nFRANK\\nHmm, I see. Well, did he mention he used to work for Google?\\n\\n### Retention\\n\\n*Later that day John, a software developer, steps into Frank's office.*\\n\\nJOHN\\nFrank, you gotta minute?\\n\\nFRANK\\nSure, come on in John.\\n\\nJOHN\\nHere's my resignation letter and laptop. I took another job.\\n\\n*John places the letter and a laptop computer on Frank's desk.*\\n\\nFRANK\\nWhat!? Ok, close the door. You can't quit!\\n\\nJOHN\\nI just did. I've been coding the same crap for ten years. I need a change.\\n\\nFRANK\\nThat's too bad. I was about to offer you a job in Devops.\\n\\nJOHN\\nReally? That's exactly what I want to do.\\n\\nFRANK\\nI know. Do you accept?\\n\\nJOHN\\nI do!\\n\\nFRANK\\nYou're hired then.\\n\\nJOHN\\nWow! Thanks Frank.\\n\\nFRANK\\nYour first task will be to rewrite the deployment scripts in NANT.\\n\\nJOHN\\nNANT? Mmmm, I'm not sure what that is.\\n\\nFRANK\\nI thought you wrote those NANT scripts for Ops?\\n\\nJOHN\\nNo, that must have been Roger.\\n\\nFRANK\\nOh...then you're fired.\\n\\nJOHN\\nYou can't fire me!\\n\\nFRANK\\nI just did. You're completely unqualified.\\n\\nJOHN\\nHow will I feed my kids!\\n\\nFRANK\\nYou've got the other job.\\n\\nJOHN\\nOh yeah.\\n\\nFRANK\\nGet out of here!\\n\\nJOHN\\nWait, before I go. What about the opening in QA? The test framework architect?\\n\\nFRANK\\nYeah, what about it?\\n\\nJOHN\\nThat's something different. I could do that.\\n\\nFRANK\\nAlright, you want the job?\\n\\nJOHN\\nYeah.\\n\\nFRANK\\nYou're hired then. Congratulations.\\n\\nJOHN\\nAwesome!\\n\\nFRANK\\nI have to admit. I'm surprised you took the job.\\n\\nJOHN\\nWhy?\\n\\nFRANK\\nThe salary's half what you make now.\\n\\nJOHN\\nScrew that! I quit.\\n\\nFRANK\\nYou can't quit. What will QA do without you?\\n\\nJOHN\\nThey'll deal with it. They have to cut the cord sometime.\\n\\n*John gets up to leave.*\\n\\nFRANK\\nWhoa, wait. Before you go. A position on my team just opened up. It's perfect for you.\\n\\nJOHN\\n(*Slowly sits down.*) Alright I'm listening.\\n\\nFRANK\\nI'll throw in a new laptop. How about a Macbook Pro?\\n\\nJOHN\\n(*Crosses his arms.*) You'll have to do better than that. I'm a Windows guy.\\n\\nFRANK\\nWell, you're in luck. The guy who quit was a Windows guy too. He had a souped up laptop. It even has your name on it.\\n\\n*Frank picks up John's laptop computer from the desk and holds it out for him.*\\n\\nJOHN\\nHe just walked in and quit? Sounds like an ass.\\n\\nFRANK\\nYep, earlier today. What do you say?\\n\\nJOHN\\nYou drive a hard bargain...but I accept.\\n\\nFRANK\\nWelcome aboard!\\n\\nJOHN\\nThanks Frank! You won't be sorry. I'll make you real proud!\\n\\nFRANK\\nI know you will. Come with me. I'll introduce you to the team.\\n\\n### Termination\\n\\n*Santa Claus enters Frank Drebin's office.*\\n\\nFRANK\\nHi Santa. Could you close the door please?\\n\\nSANTA CLAUS\\nHo ho ho! Frank! Sure. (*Closes door.*) Good morning my friend. Oh, before I forget, I have something for you!\\n\\nFRANK\\nActually, it's a bad time. We need to...\\n\\nSANTA CLAUS\\nNothing cheers a person up like a sweet treat!\\n\\nFRANK\\n(*Frank puts the candy cane in his shirt pocket which is already stuffed with candy canes.*) Please sit down. Listen, I'll just come out and say it. We're letting you go. Things aren't working out. You're not at the management level.\\n\\nSANTA CLAUS\\nWhat? What do you mean?\\n\\nFRANK\\nYou see Santa, we need someone who can deliver quickly and consistently under pressure. Sometimes overnight. We need someone who can keep track of lists of issues and determine priorities. You know, a person who can sift out the good from the bad. And then manage the large number of employees working the tickets and ensure solutions are delivered on time and on budget year in and year out. We need someone accustomed to traveling the world. Someone who can be in Hong Kong in the morning and Copenhagen that night. You're not that person.\\n\\nSANTA CLAUS\\nJust give me another chance Frank. An opportunity to set things straight.\\n\\nFRANK\\nThe decision's been made. You can come in after 6:00 tonight to get your personal items.\\n\\nSANTA CLAUS\\nIs there anything I can do?\\n\\nFRANK\\nI'm sorry. In fact, we've already hired your replacement. (*There's a knock on the office door.*) Come in.\\n\\n*The Easter Bunny walks in.*\\n\\nSANTA CLAUS\\n(*Looks at Frank in disbelief.*) Seriously? This guy?\\n\\nEASTER BUNNY\\n(*Smirks*) Beat it Santa.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>One of the most challenging aspects of IT work is managing employees and their egos, insecurities, and demands. In this latest installment, Frank Drebin shows us how to navigate all aspects of the employee lifecycle.</p>\n<h3 id=\"acquisition\">Acquisition</h3>\n<p><em>Fade in.</em></p>\n<p><em>Susan steps into an empty conference room and greets a job candidate.</em></p>\n<p>SUSAN<br>\nGood morning, my name's Susan. Thanks for interviewing with us today. Before we get started, do you want anything to drink?</p>\n<p>EX-GOOGLER<br>\nDo you have any smoothies?</p>\n<p>SUSAN<br>\nMmm, no smoothies.</p>\n<p>EX-GOOGLER<br>\nCappuccinos, lattes?</p>\n<p>SUSAN<br>\nJust coffee.</p>\n<p>EX-GOOGLER<br>\nI'm good then. Let's get started.</p>\n<p>SUSAN<br>\nSure. So I don't know how much Frank told you about the position. It's for a devops architect.</p>\n<p>EX-GOOGLER<br>\nFrank told me about it.</p>\n<p>SUSAN<br>\nCool. I was looking over your resume and, uhh, to be blunt, I'm confused.</p>\n<p>EX-GOOGLER<br>\nOk, what's the problem?</p>\n<p>SUSAN<br>\nWell, besides your contact information, it literally has nothing besides, &quot;2005-2015 - Worked at Google.&quot;</p>\n<p>EX-GOOGLER<br>\nIt means exactly what it says. I used to work for Google.</p>\n<p>SUSAN<br>\nI know, and that makes sense. It's just that people usually include more detail in their resumes. Job responsibilities, technology, stuff like that.</p>\n<p>EX-GOOGLER<br>\n(<em>Shrugs</em>) What else is there to say? I worked for Google for ten years.</p>\n<p>SUSAN<br>\nI'm looking for a little more though. Experience with VMs, Puppet, Docker, etc.</p>\n<p>EX-GOOGLER<br>\nI'm perfectly qualified. I used to work for Google.</p>\n<p>SUSAN<br>\nAnd I totally get that. I just want to make sure your experience matches up with what we need. We desperately want to automate our environments. Essentially create or update environments with a click of a button. Sandbox, QA, production. Anything we need.</p>\n<p>EX-GOOGLER<br>\nSusan, do you think that Google automates?</p>\n<p>SUSAN<br>\nI'm sure they do.</p>\n<p>EX-GOOGLER<br>\nWell, I used to work there. For ten years. How many people here used to work at Google?</p>\n<p>SUSAN<br>\nI'm not sure. No one that I know of.</p>\n<p>EX-GOOGLER<br>\nYou probably have some pissed off former Palm engineers who desperately hope that WebOS is resurrected.</p>\n<p>SUSAN<br>\nUhh, no.</p>\n<p>EX-GOOGLER<br>\nYou need to take advantage of this opportunity. You'll be able to say you have someone who used to work for Google. When executives are in for an office visit, you can bring them by my cube and tell them I worked for Google. When you're trying to land that big contract, you can bring the stakeholders to me. I'll tell them stories about working at Google, and BAM! The contract is yours.</p>\n<p><em>Silence</em></p>\n<p>SUSAN<br>\nI'm not sure how to respond to that.</p>\n<p>EX-GOOGLER<br>\n(<em>Leans forward and takes Susan's hands in his.</em>) Susan. Google is fucking awesome. And I was there, crushing it, for ten years. Which means I'm fucking awesome. If you visit the Googleplex and ask for a smoothie, do you know how they'll respond?</p>\n<p>SUSAN<br>\nNo.</p>\n<p>EX-GOOGLER<br>\n(<em>Continues holding her hands.</em>) They'll ask you what flavor. Strawberry. Mango. Whatever you want. They have dozens of kinds. That's how awesome Google is. And if you want coffee, they'll bring you one made by an actual barista. Not some shitty Bunn machine. Do you understand what I'm trying to say?</p>\n<p>SUSAN<br>\nThat...you uhh, worked for Google?</p>\n<p>EX-GOOGLER<br>\n(<em>Leans back with a smile.</em>) Bingo! You get it now.</p>\n<p><em>Later in Frank Drebin's office.</em></p>\n<p>FRANK<br>\nSo, what do you think?</p>\n<p>SUSAN<br>\nHe won't work out. Thumbs down for me.</p>\n<p>FRANK<br>\nAre you kidding me? He's incredible.</p>\n<p>SUSAN<br>\nHe was really vague about his job experience.</p>\n<p>FRANK<br>\nHmm, I see. Well, did he mention he used to work for Google?</p>\n<h3 id=\"retention\">Retention</h3>\n<p><em>Later that day John, a software developer, steps into Frank's office.</em></p>\n<p>JOHN<br>\nFrank, you gotta minute?</p>\n<p>FRANK<br>\nSure, come on in John.</p>\n<p>JOHN<br>\nHere's my resignation letter and laptop. I took another job.</p>\n<p><em>John places the letter and a laptop computer on Frank's desk.</em></p>\n<p>FRANK<br>\nWhat!? Ok, close the door. You can't quit!</p>\n<p>JOHN<br>\nI just did. I've been coding the same crap for ten years. I need a change.</p>\n<p>FRANK<br>\nThat's too bad. I was about to offer you a job in Devops.</p>\n<p>JOHN<br>\nReally? That's exactly what I want to do.</p>\n<p>FRANK<br>\nI know. Do you accept?</p>\n<p>JOHN<br>\nI do!</p>\n<p>FRANK<br>\nYou're hired then.</p>\n<p>JOHN<br>\nWow! Thanks Frank.</p>\n<p>FRANK<br>\nYour first task will be to rewrite the deployment scripts in NANT.</p>\n<p>JOHN<br>\nNANT? Mmmm, I'm not sure what that is.</p>\n<p>FRANK<br>\nI thought you wrote those NANT scripts for Ops?</p>\n<p>JOHN<br>\nNo, that must have been Roger.</p>\n<p>FRANK<br>\nOh...then you're fired.</p>\n<p>JOHN<br>\nYou can't fire me!</p>\n<p>FRANK<br>\nI just did. You're completely unqualified.</p>\n<p>JOHN<br>\nHow will I feed my kids!</p>\n<p>FRANK<br>\nYou've got the other job.</p>\n<p>JOHN<br>\nOh yeah.</p>\n<p>FRANK<br>\nGet out of here!</p>\n<p>JOHN<br>\nWait, before I go. What about the opening in QA? The test framework architect?</p>\n<p>FRANK<br>\nYeah, what about it?</p>\n<p>JOHN<br>\nThat's something different. I could do that.</p>\n<p>FRANK<br>\nAlright, you want the job?</p>\n<p>JOHN<br>\nYeah.</p>\n<p>FRANK<br>\nYou're hired then. Congratulations.</p>\n<p>JOHN<br>\nAwesome!</p>\n<p>FRANK<br>\nI have to admit. I'm surprised you took the job.</p>\n<p>JOHN<br>\nWhy?</p>\n<p>FRANK<br>\nThe salary's half what you make now.</p>\n<p>JOHN<br>\nScrew that! I quit.</p>\n<p>FRANK<br>\nYou can't quit. What will QA do without you?</p>\n<p>JOHN<br>\nThey'll deal with it. They have to cut the cord sometime.</p>\n<p><em>John gets up to leave.</em></p>\n<p>FRANK<br>\nWhoa, wait. Before you go. A position on my team just opened up. It's perfect for you.</p>\n<p>JOHN<br>\n(<em>Slowly sits down.</em>) Alright I'm listening.</p>\n<p>FRANK<br>\nI'll throw in a new laptop. How about a Macbook Pro?</p>\n<p>JOHN<br>\n(<em>Crosses his arms.</em>) You'll have to do better than that. I'm a Windows guy.</p>\n<p>FRANK<br>\nWell, you're in luck. The guy who quit was a Windows guy too. He had a souped up laptop. It even has your name on it.</p>\n<p><em>Frank picks up John's laptop computer from the desk and holds it out for him.</em></p>\n<p>JOHN<br>\nHe just walked in and quit? Sounds like an ass.</p>\n<p>FRANK<br>\nYep, earlier today. What do you say?</p>\n<p>JOHN<br>\nYou drive a hard bargain...but I accept.</p>\n<p>FRANK<br>\nWelcome aboard!</p>\n<p>JOHN<br>\nThanks Frank! You won't be sorry. I'll make you real proud!</p>\n<p>FRANK<br>\nI know you will. Come with me. I'll introduce you to the team.</p>\n<h3 id=\"termination\">Termination</h3>\n<p><em>Santa Claus enters Frank Drebin's office.</em></p>\n<p>FRANK<br>\nHi Santa. Could you close the door please?</p>\n<p>SANTA CLAUS<br>\nHo ho ho! Frank! Sure. (<em>Closes door.</em>) Good morning my friend. Oh, before I forget, I have something for you!</p>\n<p>FRANK<br>\nActually, it's a bad time. We need to...</p>\n<p>SANTA CLAUS<br>\nNothing cheers a person up like a sweet treat!</p>\n<p>FRANK<br>\n(<em>Frank puts the candy cane in his shirt pocket which is already stuffed with candy canes.</em>) Please sit down. Listen, I'll just come out and say it. We're letting you go. Things aren't working out. You're not at the management level.</p>\n<p>SANTA CLAUS<br>\nWhat? What do you mean?</p>\n<p>FRANK<br>\nYou see Santa, we need someone who can deliver quickly and consistently under pressure. Sometimes overnight. We need someone who can keep track of lists of issues and determine priorities. You know, a person who can sift out the good from the bad. And then manage the large number of employees working the tickets and ensure solutions are delivered on time and on budget year in and year out. We need someone accustomed to traveling the world. Someone who can be in Hong Kong in the morning and Copenhagen that night. You're not that person.</p>\n<p>SANTA CLAUS<br>\nJust give me another chance Frank. An opportunity to set things straight.</p>\n<p>FRANK<br>\nThe decision's been made. You can come in after 6:00 tonight to get your personal items.</p>\n<p>SANTA CLAUS<br>\nIs there anything I can do?</p>\n<p>FRANK<br>\nI'm sorry. In fact, we've already hired your replacement. (<em>There's a knock on the office door.</em>) Come in.</p>\n<p><em>The Easter Bunny walks in.</em></p>\n<p>SANTA CLAUS<br>\n(<em>Looks at Frank in disbelief.</em>) Seriously? This guy?</p>\n<p>EASTER BUNNY<br>\n(<em>Smirks</em>) Beat it Santa.</p>\n</div>","amp":"47","plaintext":"One of the most challenging aspects of IT work is managing employees and their\negos, insecurities, and demands. In this latest installment, Frank Drebin shows\nus how to navigate all aspects of the employee lifecycle.\n\nAcquisition\nFade in.\n\nSusan steps into an empty conference room and greets a job candidate.\n\nSUSAN\nGood morning, my name's Susan. Thanks for interviewing with us today. Before we\nget started, do you want anything to drink?\n\nEX-GOOGLER\nDo you have any smoothies?\n\nSUSAN\nMmm, no smoothies.\n\nEX-GOOGLER\nCappuccinos, lattes?\n\nSUSAN\nJust coffee.\n\nEX-GOOGLER\nI'm good then. Let's get started.\n\nSUSAN\nSure. So I don't know how much Frank told you about the position. It's for a\ndevops architect.\n\nEX-GOOGLER\nFrank told me about it.\n\nSUSAN\nCool. I was looking over your resume and, uhh, to be blunt, I'm confused.\n\nEX-GOOGLER\nOk, what's the problem?\n\nSUSAN\nWell, besides your contact information, it literally has nothing besides,\n\"2005-2015 - Worked at Google.\"\n\nEX-GOOGLER\nIt means exactly what it says. I used to work for Google.\n\nSUSAN\nI know, and that makes sense. It's just that people usually include more detail\nin their resumes. Job responsibilities, technology, stuff like that.\n\nEX-GOOGLER\n(Shrugs) What else is there to say? I worked for Google for ten years.\n\nSUSAN\nI'm looking for a little more though. Experience with VMs, Puppet, Docker, etc.\n\nEX-GOOGLER\nI'm perfectly qualified. I used to work for Google.\n\nSUSAN\nAnd I totally get that. I just want to make sure your experience matches up with\nwhat we need. We desperately want to automate our environments. Essentially\ncreate or update environments with a click of a button. Sandbox, QA, production.\nAnything we need.\n\nEX-GOOGLER\nSusan, do you think that Google automates?\n\nSUSAN\nI'm sure they do.\n\nEX-GOOGLER\nWell, I used to work there. For ten years. How many people here used to work at\nGoogle?\n\nSUSAN\nI'm not sure. No one that I know of.\n\nEX-GOOGLER\nYou probably have some pissed off former Palm engineers who desperately hope\nthat WebOS is resurrected.\n\nSUSAN\nUhh, no.\n\nEX-GOOGLER\nYou need to take advantage of this opportunity. You'll be able to say you have\nsomeone who used to work for Google. When executives are in for an office visit,\nyou can bring them by my cube and tell them I worked for Google. When you're\ntrying to land that big contract, you can bring the stakeholders to me. I'll\ntell them stories about working at Google, and BAM! The contract is yours.\n\nSilence\n\nSUSAN\nI'm not sure how to respond to that.\n\nEX-GOOGLER\n(Leans forward and takes Susan's hands in his.) Susan. Google is fucking\nawesome. And I was there, crushing it, for ten years. Which means I'm fucking\nawesome. If you visit the Googleplex and ask for a smoothie, do you know how\nthey'll respond?\n\nSUSAN\nNo.\n\nEX-GOOGLER\n(Continues holding her hands.) They'll ask you what flavor. Strawberry. Mango.\nWhatever you want. They have dozens of kinds. That's how awesome Google is. And\nif you want coffee, they'll bring you one made by an actual barista. Not some\nshitty Bunn machine. Do you understand what I'm trying to say?\n\nSUSAN\nThat...you uhh, worked for Google?\n\nEX-GOOGLER\n(Leans back with a smile.) Bingo! You get it now.\n\nLater in Frank Drebin's office.\n\nFRANK\nSo, what do you think?\n\nSUSAN\nHe won't work out. Thumbs down for me.\n\nFRANK\nAre you kidding me? He's incredible.\n\nSUSAN\nHe was really vague about his job experience.\n\nFRANK\nHmm, I see. Well, did he mention he used to work for Google?\n\nRetention\nLater that day John, a software developer, steps into Frank's office.\n\nJOHN\nFrank, you gotta minute?\n\nFRANK\nSure, come on in John.\n\nJOHN\nHere's my resignation letter and laptop. I took another job.\n\nJohn places the letter and a laptop computer on Frank's desk.\n\nFRANK\nWhat!? Ok, close the door. You can't quit!\n\nJOHN\nI just did. I've been coding the same crap for ten years. I need a change.\n\nFRANK\nThat's too bad. I was about to offer you a job in Devops.\n\nJOHN\nReally? That's exactly what I want to do.\n\nFRANK\nI know. Do you accept?\n\nJOHN\nI do!\n\nFRANK\nYou're hired then.\n\nJOHN\nWow! Thanks Frank.\n\nFRANK\nYour first task will be to rewrite the deployment scripts in NANT.\n\nJOHN\nNANT? Mmmm, I'm not sure what that is.\n\nFRANK\nI thought you wrote those NANT scripts for Ops?\n\nJOHN\nNo, that must have been Roger.\n\nFRANK\nOh...then you're fired.\n\nJOHN\nYou can't fire me!\n\nFRANK\nI just did. You're completely unqualified.\n\nJOHN\nHow will I feed my kids!\n\nFRANK\nYou've got the other job.\n\nJOHN\nOh yeah.\n\nFRANK\nGet out of here!\n\nJOHN\nWait, before I go. What about the opening in QA? The test framework architect?\n\nFRANK\nYeah, what about it?\n\nJOHN\nThat's something different. I could do that.\n\nFRANK\nAlright, you want the job?\n\nJOHN\nYeah.\n\nFRANK\nYou're hired then. Congratulations.\n\nJOHN\nAwesome!\n\nFRANK\nI have to admit. I'm surprised you took the job.\n\nJOHN\nWhy?\n\nFRANK\nThe salary's half what you make now.\n\nJOHN\nScrew that! I quit.\n\nFRANK\nYou can't quit. What will QA do without you?\n\nJOHN\nThey'll deal with it. They have to cut the cord sometime.\n\nJohn gets up to leave.\n\nFRANK\nWhoa, wait. Before you go. A position on my team just opened up. It's perfect\nfor you.\n\nJOHN\n(Slowly sits down.) Alright I'm listening.\n\nFRANK\nI'll throw in a new laptop. How about a Macbook Pro?\n\nJOHN\n(Crosses his arms.) You'll have to do better than that. I'm a Windows guy.\n\nFRANK\nWell, you're in luck. The guy who quit was a Windows guy too. He had a souped up\nlaptop. It even has your name on it.\n\nFrank picks up John's laptop computer from the desk and holds it out for him.\n\nJOHN\nHe just walked in and quit? Sounds like an ass.\n\nFRANK\nYep, earlier today. What do you say?\n\nJOHN\nYou drive a hard bargain...but I accept.\n\nFRANK\nWelcome aboard!\n\nJOHN\nThanks Frank! You won't be sorry. I'll make you real proud!\n\nFRANK\nI know you will. Come with me. I'll introduce you to the team.\n\nTermination\nSanta Claus enters Frank Drebin's office.\n\nFRANK\nHi Santa. Could you close the door please?\n\nSANTA CLAUS\nHo ho ho! Frank! Sure. (Closes door.) Good morning my friend. Oh, before I\nforget, I have something for you!\n\nFRANK\nActually, it's a bad time. We need to...\n\nSANTA CLAUS\nNothing cheers a person up like a sweet treat!\n\nFRANK\n(Frank puts the candy cane in his shirt pocket which is already stuffed with\ncandy canes.) Please sit down. Listen, I'll just come out and say it. We're\nletting you go. Things aren't working out. You're not at the management level.\n\nSANTA CLAUS\nWhat? What do you mean?\n\nFRANK\nYou see Santa, we need someone who can deliver quickly and consistently under\npressure. Sometimes overnight. We need someone who can keep track of lists of\nissues and determine priorities. You know, a person who can sift out the good\nfrom the bad. And then manage the large number of employees working the tickets\nand ensure solutions are delivered on time and on budget year in and year out.\nWe need someone accustomed to traveling the world. Someone who can be in Hong\nKong in the morning and Copenhagen that night. You're not that person.\n\nSANTA CLAUS\nJust give me another chance Frank. An opportunity to set things straight.\n\nFRANK\nThe decision's been made. You can come in after 6:00 tonight to get your\npersonal items.\n\nSANTA CLAUS\nIs there anything I can do?\n\nFRANK\nI'm sorry. In fact, we've already hired your replacement. (There's a knock on\nthe office door.) Come in.\n\nThe Easter Bunny walks in.\n\nSANTA CLAUS\n(Looks at Frank in disbelief.) Seriously? This guy?\n\nEASTER BUNNY\n(Smirks) Beat it Santa.","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-06-23T12:01:17.000Z","created_by":"1","updated_at":"2017-02-08T20:36:58.000Z","updated_by":"1","published_at":"2015-08-19T11:02:23.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a0","uuid":"232169b6-84cc-4485-95b4-a08a86a6d320","title":"String.Empty Versus \"\"","slug":"string-dot-empty-versus-string-literal","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"If you've been in the .NET world for any length of time, you'll eventually come across someone who claims `String.Empty` performs better than `\\\"\\\"`. I was always skeptical of this claim because this scenario seemed like something the compiler could optimize. And because the .NET runtime manages string literals in an intern pool, my guess was they would both point to the same value. That's what I suspected anyway but didn't have any proof.\\n\\nFinally, I decided to write a short program to find out the truth. In the code below, lines 10 and 11 create two empty string variables. One is initialized with `String.Empty` and the other `\\\"\\\"`. Lines 13-17 check that both are interned, their values are equal, and the references are equal.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/df3119d149505c44a60a.js\\\"></script>\\n\\nThe results seem to suggest both `String.Empty` and `\\\"\\\"` point to the same interned string literal. Just to be extra safe, I looked at the disassembly for the two assignment statements.\\n\\n```\\n            string string1 = String.Empty;\\n002D047D  mov         eax,dword ptr ds:[35022A0h]  \\n002D0483  mov         dword ptr [ebp-40h],eax  \\n            string string2 = \\\"\\\";\\n002D0486  mov         eax,dword ptr ds:[35022A0h]  \\n002D048C  mov         dword ptr [ebp-44h],eax  \\n```\\n\\nFor each variable, the same memory address 35022A0h is moved into the register `eax` followed by another MOV instruction to save the contents of `eax` to a DWORD pointer. Like I suspected they both refer to the same memory; presumably the literal empty string in the intern pool. This shows there is no difference in the managed code produced by the compiler and thus no reason other than personal preference to choose `String.Empty` over `\\\"\\\"`.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>If you've been in the .NET world for any length of time, you'll eventually come across someone who claims <code>String.Empty</code> performs better than <code>&quot;&quot;</code>. I was always skeptical of this claim because this scenario seemed like something the compiler could optimize. And because the .NET runtime manages string literals in an intern pool, my guess was they would both point to the same value. That's what I suspected anyway but didn't have any proof.</p>\n<p>Finally, I decided to write a short program to find out the truth. In the code below, lines 10 and 11 create two empty string variables. One is initialized with <code>String.Empty</code> and the other <code>&quot;&quot;</code>. Lines 13-17 check that both are interned, their values are equal, and the references are equal.</p>\n<script src=\"https://gist.github.com/joebuschmann/df3119d149505c44a60a.js\"></script>\n<p>The results seem to suggest both <code>String.Empty</code> and <code>&quot;&quot;</code> point to the same interned string literal. Just to be extra safe, I looked at the disassembly for the two assignment statements.</p>\n<pre><code>            string string1 = String.Empty;\n002D047D  mov         eax,dword ptr ds:[35022A0h]  \n002D0483  mov         dword ptr [ebp-40h],eax  \n            string string2 = &quot;&quot;;\n002D0486  mov         eax,dword ptr ds:[35022A0h]  \n002D048C  mov         dword ptr [ebp-44h],eax  \n</code></pre>\n<p>For each variable, the same memory address 35022A0h is moved into the register <code>eax</code> followed by another MOV instruction to save the contents of <code>eax</code> to a DWORD pointer. Like I suspected they both refer to the same memory; presumably the literal empty string in the intern pool. This shows there is no difference in the managed code produced by the compiler and thus no reason other than personal preference to choose <code>String.Empty</code> over <code>&quot;&quot;</code>.</p>\n</div>","amp":"51","plaintext":"If you've been in the .NET world for any length of time, you'll eventually come\nacross someone who claims String.Empty  performs better than \"\". I was always\nskeptical of this claim because this scenario seemed like something the compiler\ncould optimize. And because the .NET runtime manages string literals in an\nintern pool, my guess was they would both point to the same value. That's what I\nsuspected anyway but didn't have any proof.\n\nFinally, I decided to write a short program to find out the truth. In the code\nbelow, lines 10 and 11 create two empty string variables. One is initialized\nwith String.Empty  and the other \"\". Lines 13-17 check that both are interned,\ntheir values are equal, and the references are equal.\n\nThe results seem to suggest both String.Empty  and \"\"  point to the same\ninterned string literal. Just to be extra safe, I looked at the disassembly for\nthe two assignment statements.\n\n            string string1 = String.Empty;\n002D047D  mov         eax,dword ptr ds:[35022A0h]  \n002D0483  mov         dword ptr [ebp-40h],eax  \n            string string2 = \"\";\n002D0486  mov         eax,dword ptr ds:[35022A0h]  \n002D048C  mov         dword ptr [ebp-44h],eax  \n\n\nFor each variable, the same memory address 35022A0h is moved into the register \neax  followed by another MOV instruction to save the contents of eax  to a DWORD\npointer. Like I suspected they both refer to the same memory; presumably the\nliteral empty string in the intern pool. This shows there is no difference in\nthe managed code produced by the compiler and thus no reason other than personal\npreference to choose String.Empty  over \"\".","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-08-06T13:27:16.000Z","created_by":"1","updated_at":"2015-08-06T15:22:10.000Z","updated_by":"1","published_at":"2015-08-06T15:22:10.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a1","uuid":"9b36027d-4f59-4ead-b5b0-59730364f18f","title":"Refactoring to Composable SpecFlow Steps","slug":"refactoring-to-composable-specflow-steps","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've seen some pretty bad SpecFlow code. Code that seems to violate every good practice out there. Poor reuse. Copy and paste everywhere. Test code is the hotel room of the software world. People are sloppier and more careless than they otherwise would be. I'm not sure why that is. Perhaps because tests are not seen as \\\"real code\\\". But as a testing code base grows from dozens to hundreds to even a thousand or more test cases, having well-factored composable SpecFlow steps becomes critical.\\n\\nFor this post, I'd like to share a strategy I use to solve a common use case. It doesn't take much effort and yields huge dividends over time.\\n\\n#### Testing an Email Service\\n\\nMost of my integration tests exercise web services, and many service operations require a request payload with setup spanning multiple Gherkin steps. Consider the example below. It validates a service responsible for sending marketing emails much like MailChimp's [Mandrill API](https://mandrillapp.com/api/docs/).\\n\\nThe Gherkin and bindings represent a basic test that sends a \\\"Hello World\\\" email message. The first three `Given` statements build out the email contents with a sender, recipients, and message body. Each one is responsible for updating the private field `_sendRequest` with different bits of information. It makes sense to break these out from the subsequent `When` and `Then` statements that send the message and verify the response. This honors the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle) and makes for better reuse.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/28643cae5e0530a02bbb.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fecc6f449aa3d58aaf3b.js\\\"></script>\\n\\n#### SendRequestBuilder\\n\\nThe `SendRequestBuilder` class is the first step toward a better solution. It contains the three `Given` step bindings copied from `SendMailSteps`. They act on an internal `SendRequest` object exposed by the `SendRequestBuilder.Instance` property. SpecFlow can bind to the step definitions as before.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/932892430de38e8e39b1.js\\\"></script>\\n\\n`SendMailSteps` cleans up nicely after introducing `SendRequestBuilder`. The constructor takes an instance via dependency injection, and `InvokeEndpoint()` grabs the request object before calling the service.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/24defcbb362b1b1d9867.js\\\"></script>\\n\\nBy moving these steps to a common builder, they can be shared among different feature classes.\\n\\n#### Step Argument Transformations\\n\\nWhile this is a move in the right direction, `SendRequestBuilder` could be improved further. Often SpecFlow steps need to be called directly from code in addition to binding to the Gherkin. You may notice the same request being created in several places and decide to condense those steps into one. For example, the code snippet below builds the \\\"Hello World\\\" request in one step rather than three.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c5f25addb0729409f4a9.js\\\"></script>\\n\\nNotice how awkward it is to create and populate a SpecFlow table in code. Tables work well for bindings, but manipulating them directly is messy. A good solution is to use [Step Argument Transformations](http://www.specflow.org/documentation/Step-Argument-Conversions/) to eliminate the table argument. Then the steps become much easier to call from code and can still be bound to tables.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d6bb47b534cd811a314d.js\\\"></script>\\n\\nNow the method `GivenTheHelloWorldEmailMessage()` uses concrete types instead of tables. Much better.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/8fd9a129ad0795fab66d.js\\\"></script>\\n\\n#### Next Steps\\n\\nAs you can see, a little bit of encapsulation goes a long way. You could refactor this example further by moving the two `Then` steps into a shared validation class. In fact, a mature SpecFlow code base will often contain many builders and validation objects injected into lightweight steps classes.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I've seen some pretty bad SpecFlow code. Code that seems to violate every good practice out there. Poor reuse. Copy and paste everywhere. Test code is the hotel room of the software world. People are sloppier and more careless than they otherwise would be. I'm not sure why that is. Perhaps because tests are not seen as &quot;real code&quot;. But as a testing code base grows from dozens to hundreds to even a thousand or more test cases, having well-factored composable SpecFlow steps becomes critical.</p>\n<p>For this post, I'd like to share a strategy I use to solve a common use case. It doesn't take much effort and yields huge dividends over time.</p>\n<h4 id=\"testinganemailservice\">Testing an Email Service</h4>\n<p>Most of my integration tests exercise web services, and many service operations require a request payload with setup spanning multiple Gherkin steps. Consider the example below. It validates a service responsible for sending marketing emails much like MailChimp's <a href=\"https://mandrillapp.com/api/docs/\">Mandrill API</a>.</p>\n<p>The Gherkin and bindings represent a basic test that sends a &quot;Hello World&quot; email message. The first three <code>Given</code> statements build out the email contents with a sender, recipients, and message body. Each one is responsible for updating the private field <code>_sendRequest</code> with different bits of information. It makes sense to break these out from the subsequent <code>When</code> and <code>Then</code> statements that send the message and verify the response. This honors the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">Single Responsibility Principle</a> and makes for better reuse.</p>\n<script src=\"https://gist.github.com/joebuschmann/28643cae5e0530a02bbb.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/fecc6f449aa3d58aaf3b.js\"></script>\n<h4 id=\"sendrequestbuilder\">SendRequestBuilder</h4>\n<p>The <code>SendRequestBuilder</code> class is the first step toward a better solution. It contains the three <code>Given</code> step bindings copied from <code>SendMailSteps</code>. They act on an internal <code>SendRequest</code> object exposed by the <code>SendRequestBuilder.Instance</code> property. SpecFlow can bind to the step definitions as before.</p>\n<script src=\"https://gist.github.com/joebuschmann/932892430de38e8e39b1.js\"></script>\n<p><code>SendMailSteps</code> cleans up nicely after introducing <code>SendRequestBuilder</code>. The constructor takes an instance via dependency injection, and <code>InvokeEndpoint()</code> grabs the request object before calling the service.</p>\n<script src=\"https://gist.github.com/joebuschmann/24defcbb362b1b1d9867.js\"></script>\n<p>By moving these steps to a common builder, they can be shared among different feature classes.</p>\n<h4 id=\"stepargumenttransformations\">Step Argument Transformations</h4>\n<p>While this is a move in the right direction, <code>SendRequestBuilder</code> could be improved further. Often SpecFlow steps need to be called directly from code in addition to binding to the Gherkin. You may notice the same request being created in several places and decide to condense those steps into one. For example, the code snippet below builds the &quot;Hello World&quot; request in one step rather than three.</p>\n<script src=\"https://gist.github.com/joebuschmann/c5f25addb0729409f4a9.js\"></script>\n<p>Notice how awkward it is to create and populate a SpecFlow table in code. Tables work well for bindings, but manipulating them directly is messy. A good solution is to use <a href=\"http://www.specflow.org/documentation/Step-Argument-Conversions/\">Step Argument Transformations</a> to eliminate the table argument. Then the steps become much easier to call from code and can still be bound to tables.</p>\n<script src=\"https://gist.github.com/joebuschmann/d6bb47b534cd811a314d.js\"></script>\n<p>Now the method <code>GivenTheHelloWorldEmailMessage()</code> uses concrete types instead of tables. Much better.</p>\n<script src=\"https://gist.github.com/joebuschmann/8fd9a129ad0795fab66d.js\"></script>\n<h4 id=\"nextsteps\">Next Steps</h4>\n<p>As you can see, a little bit of encapsulation goes a long way. You could refactor this example further by moving the two <code>Then</code> steps into a shared validation class. In fact, a mature SpecFlow code base will often contain many builders and validation objects injected into lightweight steps classes.</p>\n</div>","amp":"52","plaintext":"I've seen some pretty bad Specflow code. Code that seems to violate every good\npractice out there. Poor reuse. Copy and paste everywhere. Test code is the\nhotel room of the software world. People are sloppier and more careless than\nthey otherwise would be. I'm not sure why that is. Perhaps because tests are not\nseen as \"real code\". But as a testing code base grows from dozens to hundreds to\neven a thousand or more test cases, having well-factored composable Specflow\nsteps becomes critical.\n\nFor this post, I'd like to share a strategy I use to solve a common use case. It\ndoesn't take much effort and yields huge dividends over time.\n\nTesting an Email Service\nMost of my integration tests exercise web services, and many service operations\nrequire a request payload with setup spanning multiple Gherkin steps. Consider\nthe example below. It validates a service responsible for sending marketing\nemails much like MailChimp's Mandrill API [https://mandrillapp.com/api/docs/].\n\nThe Gherkin and bindings represent a basic test that sends a \"Hello World\" email\nmessage. The first three Given  statements build out the email contents with a\nsender, recipients, and message body. Each one is responsible for updating the\nprivate field _sendRequest  with different bits of information. It makes sense\nto break these out from the subsequent When  and Then  statements that send the\nmessage and verify the response. This honors the Single Responsibility Principle\n[https://en.wikipedia.org/wiki/Single_responsibility_principle]  and makes for\nbetter reuse.\n\nSendRequestBuilder\nThe SendRequestBuilder  class is the first step toward a better solution. It\ncontains the three Given  step bindings copied from SendMailSteps. They act on\nan internal SendRequest  object exposed by the SendRequestBuilder.Instance \nproperty. Specflow can bind to the step definitions as before.\n\nSendMailSteps  cleans up nicely after introducing SendRequestBuilder. The\nconstructor takes an instance via dependency injection, and InvokeEndpoint() \ngrabs the request object before calling the service.\n\nBy moving these steps to a common builder, they can be shared among different\nfeature classes.\n\nStep Argument Transformations\nWhile this is a move in the right direction, SendRequestBuilder  could be\nimproved further. Often Specflow steps need to be called directly from code in\naddition to binding to the Gherkin. You may notice the same request being\ncreated in several places and decide to condense those steps into one. For\nexample, the code snippet below builds the \"Hello World\" request in one step\nrather than three.\n\nNotice how awkward it is to create and populate a Specflow table in code. Tables\nwork well for bindings, but manipulating them directly is messy. A good solution\nis to use Step Argument Transformations\n[http://www.specflow.org/documentation/Step-Argument-Conversions/]  to eliminate\nthe table argument. Then the steps become much easier to call from code and can\nstill be bound to tables.\n\nNow the method GivenTheHelloWorldEmailMessage()  uses concrete types instead of\ntables. Much better.\n\nNext Steps\nAs you can see, a little bit of encapsulation goes a long way. You could\nrefactor this example further by moving the two Then  steps into a shared\nvalidation class. In fact, a mature Specflow code base will often contain many\nbuilders and validation objects injected into lightweight steps classes.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-08-13T13:35:44.000Z","created_by":"1","updated_at":"2017-10-22T03:08:52.000Z","updated_by":"1","published_at":"2015-09-22T12:15:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a2","uuid":"bbbca4ef-1e91-45db-9047-651cd287163e","title":"This Week in Programming Gotchas","slug":"this-week-in-programming-gotchas","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"We all have those days where we spend hours trying to solve a seemingly simple problem only to smack ourselves in the head when we finally figure it out. Missing quotes, forgetting to flush a `StreamWriter`, etc. If only we could get back all the wasted time.\\n\\nWell, this week I wrestled with more gotchas than usual. Below are the ones that burned most of my time.\\n\\n###### Streams\\n\\nDon't forget to flush a [StreamWriter](https://msdn.microsoft.com/en-us/library/system.io.streamwriter%28v=vs.110%29.aspx) when you're done. Otherwise, you'll be deep in the debugger trying to figure out why the target stream is empty.\\n\\n```\\n// Don't forget to flush!\\n// Good advice for kids and .NET developers.\\nStreamWriter.Flush();\\n```\\n\\nOh, and while we're on the subject of Streams, after writing to a stream, you'll need to reset the stream's position pointer to 0 before reading from it. Some third party methods are smart enough to do this for you; others are not (I'm looking at you `HttpClient`).\\n\\n```\\n// After writing to a stream, you'll need to manually reset the position\\n// before reading from it.\\nStream.Position = 0;\\n```\\n###### Knockout.js\\n\\n[Knockout.js](http://knockoutjs.com/) landed some good blows this week as I dug deeper into the library. In particular, it took hours and a number of searches to figure out how to bind `optionsText` and `optionsValue` in an HTML select element. Don't forget the single quotes or else Knockout will return a reference error.\\n\\n>Unable to process binding \\\"options: function (){return availableContentTypes }\\\"\\nMessage: display is not defined\\n\\n```\\n    <!-- Use single quotes when binding a viewmodel property to optionsText and optionsValue. -->\\n    <p> <select data-bind=\\\"options: availableContentTypes,\\n                       optionsText: 'display',\\n                       optionsValue: 'value',\\n                       value: contentType\\\"></select></p>\\n```\\n\\nFrankly, I don't know why single quotes are necessary in this case, and I didn't bother to look it up. If anyone knows, please leave a comment.\\n\\n###### Nancy\\n\\nI stood up a website using [Nancy](http://nancyfx.org/) earlier in the week and had some static content to serve up. The easiest way to do this is to add to the static content conventions in a custom bootstrapper class. But when adding a static file to the root directory, you need to include the forward slash in both the requested file and content file.\\n\\n```\\n    public class CustomBootstrapper : DefaultNancyBootstrapper\\n    {\\n        protected override void ConfigureConventions(NancyConventions conventions)\\n        {\\n            base.ConfigureConventions(conventions);\\n            conventions.StaticContentsConventions.AddDirectory(\\\"Scripts\\\");\\n\\n            // Include the forward slash in the file names.\\n            // If the file is part of a longer path, include the path.\\n            conventions.StaticContentsConventions.AddFile(\\\"/SendEmail.html\\\", \\\"/SendEmail.html\\\");\\n        }\\n    }\\n```\\n\\n###### It wasn't all bad\\n\\nDespite the frustration, it really was a good week. Digging through these issues took me down some unexpected tangents. I learned a lot and was able to improve other areas of the codebase. Hopefully this post/rant prevents someone else from making the same mistakes.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>We all have those days where we spend hours trying to solve a seemingly simple problem only to smack ourselves in the head when we finally figure it out. Missing quotes, forgetting to flush a <code>StreamWriter</code>, etc. If only we could get back all the wasted time.</p>\n<p>Well, this week I wrestled with more gotchas than usual. Below are the ones that burned most of my time.</p>\n<h6 id=\"streams\">Streams</h6>\n<p>Don't forget to flush a <a href=\"https://msdn.microsoft.com/en-us/library/system.io.streamwriter%28v=vs.110%29.aspx\">StreamWriter</a> when you're done. Otherwise, you'll be deep in the debugger trying to figure out why the target stream is empty.</p>\n<pre><code>// Don't forget to flush!\n// Good advice for kids and .NET developers.\nStreamWriter.Flush();\n</code></pre>\n<p>Oh, and while we're on the subject of Streams, after writing to a stream, you'll need to reset the stream's position pointer to 0 before reading from it. Some third party methods are smart enough to do this for you; others are not (I'm looking at you <code>HttpClient</code>).</p>\n<pre><code>// After writing to a stream, you'll need to manually reset the position\n// before reading from it.\nStream.Position = 0;\n</code></pre>\n<h6 id=\"knockoutjs\">Knockout.js</h6>\n<p><a href=\"http://knockoutjs.com/\">Knockout.js</a> landed some good blows this week as I dug deeper into the library. In particular, it took hours and a number of searches to figure out how to bind <code>optionsText</code> and <code>optionsValue</code> in an HTML select element. Don't forget the single quotes or else Knockout will return a reference error.</p>\n<blockquote>\n<p>Unable to process binding &quot;options: function (){return availableContentTypes }&quot;<br>\nMessage: display is not defined</p>\n</blockquote>\n<pre><code>    &lt;!-- Use single quotes when binding a viewmodel property to optionsText and optionsValue. --&gt;\n    &lt;p&gt; &lt;select data-bind=&quot;options: availableContentTypes,\n                       optionsText: 'display',\n                       optionsValue: 'value',\n                       value: contentType&quot;&gt;&lt;/select&gt;&lt;/p&gt;\n</code></pre>\n<p>Frankly, I don't know why single quotes are necessary in this case, and I didn't bother to look it up. If anyone knows, please leave a comment.</p>\n<h6 id=\"nancy\">Nancy</h6>\n<p>I stood up a website using <a href=\"http://nancyfx.org/\">Nancy</a> earlier in the week and had some static content to serve up. The easiest way to do this is to add to the static content conventions in a custom bootstrapper class. But when adding a static file to the root directory, you need to include the forward slash in both the requested file and content file.</p>\n<pre><code>    public class CustomBootstrapper : DefaultNancyBootstrapper\n    {\n        protected override void ConfigureConventions(NancyConventions conventions)\n        {\n            base.ConfigureConventions(conventions);\n            conventions.StaticContentsConventions.AddDirectory(&quot;Scripts&quot;);\n\n            // Include the forward slash in the file names.\n            // If the file is part of a longer path, include the path.\n            conventions.StaticContentsConventions.AddFile(&quot;/SendEmail.html&quot;, &quot;/SendEmail.html&quot;);\n        }\n    }\n</code></pre>\n<h6 id=\"itwasntallbad\">It wasn't all bad</h6>\n<p>Despite the frustration, it really was a good week. Digging through these issues took me down some unexpected tangents. I learned a lot and was able to improve other areas of the codebase. Hopefully this post/rant prevents someone else from making the same mistakes.</p>\n</div>","amp":"53","plaintext":"We all have those days where we spend hours trying to solve a seemingly simple\nproblem only to smack ourselves in the head when we finally figure it out.\nMissing quotes, forgetting to flush a StreamWriter, etc. If only we could get\nback all the wasted time.\n\nWell, this week I wrestled with more gotchas than usual. Below are the ones that\nburned most of my time.\n\nStreams\nDon't forget to flush a StreamWriter\n[https://msdn.microsoft.com/en-us/library/system.io.streamwriter%28v=vs.110%29.aspx] \n when you're done. Otherwise, you'll be deep in the debugger trying to figure\nout why the target stream is empty.\n\n// Don't forget to flush!\n// Good advice for kids and .NET developers.\nStreamWriter.Flush();\n\n\nOh, and while we're on the subject of Streams, after writing to a stream, you'll\nneed to reset the stream's position pointer to 0 before reading from it. Some\nthird party methods are smart enough to do this for you; others are not (I'm\nlooking at you HttpClient).\n\n// After writing to a stream, you'll need to manually reset the position\n// before reading from it.\nStream.Position = 0;\n\n\nKnockout.js\nKnockout.js [http://knockoutjs.com/]  landed some good blows this week as I dug\ndeeper into the library. In particular, it took hours and a number of searches\nto figure out how to bind optionsText  and optionsValue  in an HTML select\nelement. Don't forget the single quotes or else Knockout will return a reference\nerror.\n\nUnable to process binding \"options: function (){return availableContentTypes }\"\nMessage: display is not defined\n\n    <!-- Use single quotes when binding a viewmodel property to optionsText and optionsValue. -->\n    <p> <select data-bind=\"options: availableContentTypes,\n                       optionsText: 'display',\n                       optionsValue: 'value',\n                       value: contentType\"></select></p>\n\n\nFrankly, I don't know why single quotes are necessary in this case, and I didn't\nbother to look it up. If anyone knows, please leave a comment.\n\nNancy\nI stood up a website using Nancy [http://nancyfx.org/]  earlier in the week and\nhad some static content to serve up. The easiest way to do this is to add to the\nstatic content conventions in a custom bootstrapper class. But when adding a\nstatic file to the root directory, you need to include the forward slash in both\nthe requested file and content file.\n\n    public class CustomBootstrapper : DefaultNancyBootstrapper\n    {\n        protected override void ConfigureConventions(NancyConventions conventions)\n        {\n            base.ConfigureConventions(conventions);\n            conventions.StaticContentsConventions.AddDirectory(\"Scripts\");\n\n            // Include the forward slash in the file names.\n            // If the file is part of a longer path, include the path.\n            conventions.StaticContentsConventions.AddFile(\"/SendEmail.html\", \"/SendEmail.html\");\n        }\n    }\n\n\nIt wasn't all bad\nDespite the frustration, it really was a good week. Digging through these issues\ntook me down some unexpected tangents. I learned a lot and was able to improve\nother areas of the codebase. Hopefully this post/rant prevents someone else from\nmaking the same mistakes.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-08-13T13:36:53.000Z","created_by":"1","updated_at":"2015-08-14T12:09:03.000Z","updated_by":"1","published_at":"2015-08-14T12:08:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a3","uuid":"1f33ec37-30a1-4454-a09d-0638a725f013","title":"Tidying Up Code with C#'s Using Alias Directives","slug":"tidying-up-code-with-using-alias-directives","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The C# language's [using alias directives](https://msdn.microsoft.com/en-us/library/aa664765%28v=vs.71%29.aspx) or namespace and type aliases provide a way to disambiguate between namespaces or types with the same name. For example, both the `System.Net` and `Nancy` libraries have a type named `HttpStatusCode`. If you happen to import both namespaces in a file, then the types need to be fully qualified or else the compiler will fail with the error:\\n\\n>'HttpStatusCode' is an ambiguous reference between 'Nancy.HttpStatusCode' and 'System.Net.HttpStatusCode'\\n\\nAliases help to resolve this conflict without having to fully qualify the types. In the off chance you needed both of these in the same file, you could create two aliases to avoid fully qualified names.\\n\\n```\\nusing SysNetStatusCode = System.Net.HttpStatusCode;\\nusing NancyStatusCode = Nancy.HttpStatusCode;\\n\\nNancyStatusCode statusCode1 = NancyStatusCode.OK;\\nSysNetStatusCode statusCode2 = SysNetStatusCode.OK;\\n```\\n###### Beyond Disambiguation\\nThis works well and is nothing new to the average C# developer. I like to take type aliases one step further and use them to shorten long type names with more descriptive ones.\\n\\n```\\nusing Coordinates = System.Tuple<decimal, decimal, decimal>;\\nusing ConfigMap = System.Collections.Generic.Dictionary<string, SomeApp.Service.TenantConfiguration>;\\n\\nCoordinates coordinates = new Coordinates(1, 2, 3);\\nConfigMap configMap = new ConfigMap() {{\\\"Tenant1\\\", TenantConfiguration.Create()}};\\n```\\nAs far as I'm aware, this only works within the scope of the current file. Even if I could use it globally, I'm not sure it would be a good idea. It would be too confusing for someone coming into the codebase for the first time (or me after a few months away). Used sparingly though, it can really clean things up.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The C# language's <a href=\"https://msdn.microsoft.com/en-us/library/aa664765%28v=vs.71%29.aspx\">using alias directives</a> or namespace and type aliases provide a way to disambiguate between namespaces or types with the same name. For example, both the <code>System.Net</code> and <code>Nancy</code> libraries have a type named <code>HttpStatusCode</code>. If you happen to import both namespaces in a file, then the types need to be fully qualified or else the compiler will fail with the error:</p>\n<blockquote>\n<p>'HttpStatusCode' is an ambiguous reference between 'Nancy.HttpStatusCode' and 'System.Net.HttpStatusCode'</p>\n</blockquote>\n<p>Aliases help to resolve this conflict without having to fully qualify the types. In the off chance you needed both of these in the same file, you could create two aliases to avoid fully qualified names.</p>\n<pre><code>using SysNetStatusCode = System.Net.HttpStatusCode;\nusing NancyStatusCode = Nancy.HttpStatusCode;\n\nNancyStatusCode statusCode1 = NancyStatusCode.OK;\nSysNetStatusCode statusCode2 = SysNetStatusCode.OK;\n</code></pre>\n<h6 id=\"beyonddisambiguation\">Beyond Disambiguation</h6>\n<p>This works well and is nothing new to the average C# developer. I like to take type aliases one step further and use them to shorten long type names with more descriptive ones.</p>\n<pre><code>using Coordinates = System.Tuple&lt;decimal, decimal, decimal&gt;;\nusing ConfigMap = System.Collections.Generic.Dictionary&lt;string, SomeApp.Service.TenantConfiguration&gt;;\n\nCoordinates coordinates = new Coordinates(1, 2, 3);\nConfigMap configMap = new ConfigMap() {{&quot;Tenant1&quot;, TenantConfiguration.Create()}};\n</code></pre>\n<p>As far as I'm aware, this only works within the scope of the current file. Even if I could use it globally, I'm not sure it would be a good idea. It would be too confusing for someone coming into the codebase for the first time (or me after a few months away). Used sparingly though, it can really clean things up.</p>\n</div>","amp":"54","plaintext":"The C# language's using alias directives\n[https://msdn.microsoft.com/en-us/library/aa664765%28v=vs.71%29.aspx]  or\nnamespace and type aliases provide a way to disambiguate between namespaces or\ntypes with the same name. For example, both the System.Net  and Nancy  libraries\nhave a type named HttpStatusCode. If you happen to import both namespaces in a\nfile, then the types need to be fully qualified or else the compiler will fail\nwith the error:\n\n'HttpStatusCode' is an ambiguous reference between 'Nancy.HttpStatusCode' and\n'System.Net.HttpStatusCode'\n\nAliases help to resolve this conflict without having to fully qualify the types.\nIn the off chance you needed both of these in the same file, you could create\ntwo aliases to avoid fully qualified names.\n\nusing SysNetStatusCode = System.Net.HttpStatusCode;\nusing NancyStatusCode = Nancy.HttpStatusCode;\n\nNancyStatusCode statusCode1 = NancyStatusCode.OK;\nSysNetStatusCode statusCode2 = SysNetStatusCode.OK;\n\n\nBeyond Disambiguation\nThis works well and is nothing new to the average C# developer. I like to take\ntype aliases one step further and use them to shorten long type names with more\ndescriptive ones.\n\nusing Coordinates = System.Tuple<decimal, decimal, decimal>;\nusing ConfigMap = System.Collections.Generic.Dictionary<string, SomeApp.Service.TenantConfiguration>;\n\nCoordinates coordinates = new Coordinates(1, 2, 3);\nConfigMap configMap = new ConfigMap() {{\"Tenant1\", TenantConfiguration.Create()}};\n\n\nAs far as I'm aware, this only works within the scope of the current file. Even\nif I could use it globally, I'm not sure it would be a good idea. It would be\ntoo confusing for someone coming into the codebase for the first time (or me\nafter a few months away). Used sparingly though, it can really clean things up.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-08-17T13:57:39.000Z","created_by":"1","updated_at":"2015-08-18T21:52:34.000Z","updated_by":"1","published_at":"2015-08-18T21:52:34.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a4","uuid":"b03d5aeb-5475-404a-b50a-1fc712f8a1e3","title":"Frank Drebin on IT (and Life)","slug":"frank-drebin-on-it-and-life","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In this latest installment, [Frank Drebin](https://www.google.com/search?q=frank+drebin) shares his unique take on the state of IT and life in general.\\n\\n**On Haskell's Monads:**\\n\\n> Haskell sounds like a nice guy, but I'm not going to discuss his private affairs.\\n\\n**On HTML and CSS:**\\n\\n>There's no layout problem that another `<div>` won't solve.\\n\\n**On configuring a text editor in Git:**\\n\\n> Learn VI instead. It's easier.\\n\\n**On parenthood:**\\n\\n>I'm a father of two and a mother of none.\\n\\n**On religion:**\\n\\n>I'm religious not spiritual.\\n\\n**On bros:**\\n\\n>It's hard out there for a bro.\\n\\n**On breastfeeding women in public:**\\n\\n>I've never breastfed a woman before, but it sounds exciting.\\n\\n**On the C# programming language:**\\n\\n>C-hash is terrific language. I use it all the time.\\n\\n**On the Java programming language:**\\n\\n>French roast, cream, no sugar.\\n\\n**On human euthanasia:**\\n\\n>Given they're the largest demographic in the world, Asian youth represent the future of humankind.\\n\\n**On white people:**\\n\\n>White people are such privileged racist assholes...but not you. You're cool.\\n\\n**On black people:**\\n\\n>I have a lot of black friends. In fact, my brother's coworker's wife's best friend's hairdresser is black. I hear she's nice.\\n\\n**On Millennials:**\\n\\n>OMG, Boomers and GenX r always throwing shade. SMH. So basic. Millennials r crushing it. Just sayin'. TL;DR: whatevs.\\n\\n**On cargo shorts:**\\n\\n>I bought my first pair last year, and I'm still finding hidden pockets.\\n\\n**On hipsters:**\\n\\n>They think they're cooler than the rest of us, and they're right.\\n\\n**On abortion:**\\n\\n>I don't discuss sensitive topics.\\n\\n**On tabs or spaces:**\\n\\n>I don't discuss sensitive topics.\\n\\n**On man-splaining:**\\n\\n>Feminists are really struggling in the political arena right now. Maybe instead of inventing new words to ridicule men, they should enlist the help of men to tell them what to do next.\\n\\n**On VB6:**\\n\\n>Every developer has a sordid past they'd like to forget.\\n\\n**On React.js programmers:**\\n\\n>What's with all the hype? Even VB6 had composable UI components.\\n\\n**On non sequiturs:**\\n\\n>I don't follow.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In this latest installment, <a href=\"https://www.google.com/search?q=frank+drebin\">Frank Drebin</a> shares his unique take on the state of IT and life in general.</p>\n<p><strong>On Haskell's Monads:</strong></p>\n<blockquote>\n<p>Haskell sounds like a nice guy, but I'm not going to discuss his private affairs.</p>\n</blockquote>\n<p><strong>On HTML and CSS:</strong></p>\n<blockquote>\n<p>There's no layout problem that another <code>&lt;div&gt;</code> won't solve.</p>\n</blockquote>\n<p><strong>On configuring a text editor in Git:</strong></p>\n<blockquote>\n<p>Learn VI instead. It's easier.</p>\n</blockquote>\n<p><strong>On parenthood:</strong></p>\n<blockquote>\n<p>I'm a father of two and a mother of none.</p>\n</blockquote>\n<p><strong>On religion:</strong></p>\n<blockquote>\n<p>I'm religious not spiritual.</p>\n</blockquote>\n<p><strong>On bros:</strong></p>\n<blockquote>\n<p>It's hard out there for a bro.</p>\n</blockquote>\n<p><strong>On breastfeeding women in public:</strong></p>\n<blockquote>\n<p>I've never breastfed a woman before, but it sounds exciting.</p>\n</blockquote>\n<p><strong>On the C# programming language:</strong></p>\n<blockquote>\n<p>C-hash is terrific language. I use it all the time.</p>\n</blockquote>\n<p><strong>On the Java programming language:</strong></p>\n<blockquote>\n<p>French roast, cream, no sugar.</p>\n</blockquote>\n<p><strong>On human euthanasia:</strong></p>\n<blockquote>\n<p>Given they're the largest demographic in the world, Asian youth represent the future of humankind.</p>\n</blockquote>\n<p><strong>On white people:</strong></p>\n<blockquote>\n<p>White people are such privileged racist assholes...but not you. You're cool.</p>\n</blockquote>\n<p><strong>On black people:</strong></p>\n<blockquote>\n<p>I have a lot of black friends. In fact, my brother's coworker's wife's best friend's hairdresser is black. I hear she's nice.</p>\n</blockquote>\n<p><strong>On Millennials:</strong></p>\n<blockquote>\n<p>OMG, Boomers and GenX r always throwing shade. SMH. So basic. Millennials r crushing it. Just sayin'. TL;DR: whatevs.</p>\n</blockquote>\n<p><strong>On cargo shorts:</strong></p>\n<blockquote>\n<p>I bought my first pair last year, and I'm still finding hidden pockets.</p>\n</blockquote>\n<p><strong>On hipsters:</strong></p>\n<blockquote>\n<p>They think they're cooler than the rest of us, and they're right.</p>\n</blockquote>\n<p><strong>On abortion:</strong></p>\n<blockquote>\n<p>I don't discuss sensitive topics.</p>\n</blockquote>\n<p><strong>On tabs or spaces:</strong></p>\n<blockquote>\n<p>I don't discuss sensitive topics.</p>\n</blockquote>\n<p><strong>On man-splaining:</strong></p>\n<blockquote>\n<p>Feminists are really struggling in the political arena right now. Maybe instead of inventing new words to ridicule men, they should enlist the help of men to tell them what to do next.</p>\n</blockquote>\n<p><strong>On VB6:</strong></p>\n<blockquote>\n<p>Every developer has a sordid past they'd like to forget.</p>\n</blockquote>\n<p><strong>On React.js programmers:</strong></p>\n<blockquote>\n<p>What's with all the hype? Even VB6 had composable UI components.</p>\n</blockquote>\n<p><strong>On non sequiturs:</strong></p>\n<blockquote>\n<p>I don't follow.</p>\n</blockquote>\n</div>","amp":"55","plaintext":"In this latest installment, Frank Drebin\n[https://www.google.com/search?q=frank+drebin]  shares his unique take on the\nstate of IT and life in general.\n\nOn Haskell's Monads:\n\nHaskell sounds like a nice guy, but I'm not going to discuss his private\naffairs.\n\nOn HTML and CSS:\n\nThere's no layout problem that another <div>  won't solve.\n\nOn configuring a text editor in Git:\n\nLearn VI instead. It's easier.\n\nOn parenthood:\n\nI'm a father of two and a mother of none.\n\nOn religion:\n\nI'm religious not spiritual.\n\nOn bros:\n\nIt's hard out there for a bro.\n\nOn breastfeeding women in public:\n\nI've never breastfed a woman before, but it sounds exciting.\n\nOn the C# programming language:\n\nC-hash is terrific language. I use it all the time.\n\nOn the Java programming language:\n\nFrench roast, cream, no sugar.\n\nOn human euthanasia:\n\nGiven they're the largest demographic in the world, Asian youth represent the\nfuture of humankind.\n\nOn white people:\n\nWhite people are such privileged racist assholes...but not you. You're cool.\n\nOn black people:\n\nI have a lot of black friends. In fact, my brother's coworker's wife's best\nfriend's hairdresser is black. I hear she's nice.\n\nOn Millennials:\n\nOMG, Boomers and GenX r always throwing shade. SMH. So basic. Millennials r\ncrushing it. Just sayin'. TL;DR: whatevs.\n\nOn cargo shorts:\n\nI bought my first pair last year, and I'm still finding hidden pockets.\n\nOn hipsters:\n\nThey think they're cooler than the rest of us, and they're right.\n\nOn abortion:\n\nI don't discuss sensitive topics.\n\nOn tabs or spaces:\n\nI don't discuss sensitive topics.\n\nOn man-splaining:\n\nFeminists are really struggling in the political arena right now. Maybe instead\nof inventing new words to ridicule men, they should enlist the help of men to\ntell them what to do next.\n\nOn VB6:\n\nEvery developer has a sordid past they'd like to forget.\n\nOn React.js programmers:\n\nWhat's with all the hype? Even VB6 had composable UI components.\n\nOn non sequiturs:\n\nI don't follow.","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-09-01T12:19:13.000Z","created_by":"1","updated_at":"2017-02-08T20:36:14.000Z","updated_by":"1","published_at":"2015-11-09T23:23:52.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a5","uuid":"caef529a-4be7-4d99-92cc-d15c9be4aec5","title":"SpecFlow Tags Done Right","slug":"specflow-tags-done-right","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In a [previous post](http://joebuschmann.com/an-introduction-to-scoped-bindings-in-specflow/), I covered scoped bindings in SpecFlow and ended with an example of how *not* to use tags. In this post, I'll cover the \\\"right way\\\" and demonstrate how to avoid [coupling features to step definitions](https://github.com/cucumber/cucumber/wiki/Feature-Coupled-Step-Definitions-%28Antipattern%29). But first, a quick primer on tags.\\n\\n#### What Are Tags?\\n\\nTags are used in Gherkin to mark features or scenarios. They begin with the `@` character in Gherkin, but in step definitions the `@` is removed.\\n\\nTags are used for:\\n\\n1. Mapping to categories in the underlying unit test framework (not all frameworks support categories).\\n2. Creating scoped bindings in conjunction with the `Scope` attribute.\\n3. Determining which before and after hooks execute.\\n4. Custom logic in step bindings. Your code can inspect the `ScenarioContext.Current.ScenarioInfo.Tags` or `FeatureContext.Current.FeatureInfo.Tags` properties to determine which tags have been applied.\\n\\n#### The Wrong Way\\n\\nI ended my previous post with an example demonstrating how tags could be used, and I also warned of the tight coupling between the Gherkin and the steps. There's a better way, but first take a moment to review the tests below. Each one invokes a service with the request body encoded differently. There's a test for XML, JSON, and form-urlencoding. The method bound to the `When` step is determined by the tag applied to the scenario.\\n\\nThere are a couple of problems with this implementation. First, like I mentioned previously, these steps are coupled to the Gherkin, and it would be difficult to reuse them elsewhere. Second, the code for serializing the body is in the steps (excluded below for brevity's sake). Other steps will need to duplicate this code if they want to do any serialization.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9e9ae7dab81f27cfee61.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fca3c06961a6dd0b7443.js\\\"></script>\\n\\n#### The Right Way\\n\\nThe first step toward a better solution is to pull out the serialization code and encapsulate it into three reusable components. Each component will also expose the appropriate content type header.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4eebf78beacfc757c65c.js\\\"></script>\\n\\nNow that the serialization code is encapsulated, it can be registered with the DI container in a `BeforeScenario` hook. The implementation is determined by which tag decorates the scenario.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/24388a35ea1e3d72434c.js\\\"></script>\\n\\nThe steps clean up nicely. The correct implementation of `IBodySerializer` is injected via the constructor, and the three methods to invoke the service collapse into one simple method. It uses the instance of `IBodySerializer` to serialize the body contents with the correct encoding and provide the value for the content type header.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c415d3597b1f0d529bc6.js\\\"></script>\\n\\n#### Wrapping It Up\\n\\nThat's a lot of code, but the idea is all step bindings work against the `IBodySerializer` interface. Its implementation is determined up front by a scenario tag in a hook and added to the container. Step methods don't care what's behind the interface and are decoupled from the implementation.\\n\\nAnother thing to note is this implementation favors composition over inheritance. I've seen similar problems solved using a base class plus subclasses scoped by tag. While this approach simplifies the step methods, it doesn't solve the lack of re-usability and coupling.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In a <a href=\"http://joebuschmann.com/an-introduction-to-scoped-bindings-in-specflow/\">previous post</a>, I covered scoped bindings in SpecFlow and ended with an example of how <em>not</em> to use tags. In this post, I'll cover the &quot;right way&quot; and demonstrate how to avoid <a href=\"https://github.com/cucumber/cucumber/wiki/Feature-Coupled-Step-Definitions-%28Antipattern%29\">coupling features to step definitions</a>. But first, a quick primer on tags.</p>\n<h4 id=\"whataretags\">What Are Tags?</h4>\n<p>Tags are used in Gherkin to mark features or scenarios. They begin with the <code>@</code> character in Gherkin, but in step definitions the <code>@</code> is removed.</p>\n<p>Tags are used for:</p>\n<ol>\n<li>Mapping to categories in the underlying unit test framework (not all frameworks support categories).</li>\n<li>Creating scoped bindings in conjunction with the <code>Scope</code> attribute.</li>\n<li>Determining which before and after hooks execute.</li>\n<li>Custom logic in step bindings. Your code can inspect the <code>ScenarioContext.Current.ScenarioInfo.Tags</code> or <code>FeatureContext.Current.FeatureInfo.Tags</code> properties to determine which tags have been applied.</li>\n</ol>\n<h4 id=\"thewrongway\">The Wrong Way</h4>\n<p>I ended my previous post with an example demonstrating how tags could be used, and I also warned of the tight coupling between the Gherkin and the steps. There's a better way, but first take a moment to review the tests below. Each one invokes a service with the request body encoded differently. There's a test for XML, JSON, and form-urlencoding. The method bound to the <code>When</code> step is determined by the tag applied to the scenario.</p>\n<p>There are a couple of problems with this implementation. First, like I mentioned previously, these steps are coupled to the Gherkin, and it would be difficult to reuse them elsewhere. Second, the code for serializing the body is in the steps (excluded below for brevity's sake). Other steps will need to duplicate this code if they want to do any serialization.</p>\n<script src=\"https://gist.github.com/joebuschmann/9e9ae7dab81f27cfee61.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/fca3c06961a6dd0b7443.js\"></script>\n<h4 id=\"therightway\">The Right Way</h4>\n<p>The first step toward a better solution is to pull out the serialization code and encapsulate it into three reusable components. Each component will also expose the appropriate content type header.</p>\n<script src=\"https://gist.github.com/joebuschmann/4eebf78beacfc757c65c.js\"></script>\n<p>Now that the serialization code is encapsulated, it can be registered with the DI container in a <code>BeforeScenario</code> hook. The implementation is determined by which tag decorates the scenario.</p>\n<script src=\"https://gist.github.com/joebuschmann/24388a35ea1e3d72434c.js\"></script>\n<p>The steps clean up nicely. The correct implementation of <code>IBodySerializer</code> is injected via the constructor, and the three methods to invoke the service collapse into one simple method. It uses the instance of <code>IBodySerializer</code> to serialize the body contents with the correct encoding and provide the value for the content type header.</p>\n<script src=\"https://gist.github.com/joebuschmann/c415d3597b1f0d529bc6.js\"></script>\n<h4 id=\"wrappingitup\">Wrapping It Up</h4>\n<p>That's a lot of code, but the idea is all step bindings work against the <code>IBodySerializer</code> interface. Its implementation is determined up front by a scenario tag in a hook and added to the container. Step methods don't care what's behind the interface and are decoupled from the implementation.</p>\n<p>Another thing to note is this implementation favors composition over inheritance. I've seen similar problems solved using a base class plus subclasses scoped by tag. While this approach simplifies the step methods, it doesn't solve the lack of re-usability and coupling.</p>\n</div>","amp":"58","plaintext":"In a previous post\n[http://joebuschmann.com/an-introduction-to-scoped-bindings-in-specflow/], I\ncovered scoped bindings in Specflow and ended with an example of how not  to use\ntags. In this post, I'll cover the \"right way\" and demonstrate how to avoid \ncoupling features to step definitions\n[https://github.com/cucumber/cucumber/wiki/Feature-Coupled-Step-Definitions-%28Antipattern%29]\n. But first, a quick primer on tags.\n\nWhat Are Tags?\nTags are used in Gherkin to mark features or scenarios. They begin with the @ \ncharacter in Gherkin, but in step definitions the @  is removed.\n\nTags are used for:\n\n 1. Mapping to categories in the underlying unit test framework (not all\n    frameworks support categories).\n 2. Creating scoped bindings in conjunction with the Scope  attribute.\n 3. Determining which before and after hooks execute.\n 4. Custom logic in step bindings. Your code can inspect the \n    ScenarioContext.Current.ScenarioInfo.Tags  or \n    FeatureContext.Current.FeatureInfo.Tags  properties to determine which tags\n    have been applied.\n\nThe Wrong Way\nI ended my previous post with an example demonstrating how tags could be used,\nand I also warned of the tight coupling between the Gherkin and the steps.\nThere's a better way, but first take a moment to review the tests below. Each\none invokes a service with the request body encoded differently. There's a test\nfor XML, JSON, and form-urlencoding. The method bound to the When  step is\ndetermined by the tag applied to the scenario.\n\nThere are a couple of problems with this implementation. First, like I mentioned\npreviously, these steps are coupled to the Gherkin, and it would be difficult to\nreuse them elsewhere. Second, the code for serializing the body is in the steps\n(excluded below for brevity's sake). Other steps will need to duplicate this\ncode if they want to do any serialization.\n\nThe Right Way\nThe first step toward a better solution is to pull out the serialization code\nand encapsulate it into three reusable components. Each component will also\nexpose the appropriate content type header.\n\nNow that the serialization code is encapsulated, it can be registered with the\nDI container in a BeforeScenario  hook. The implementation is determined by\nwhich tag decorates the scenario.\n\nThe steps clean up nicely. The correct implementation of IBodySerializer  is\ninjected via the constructor, and the three methods to invoke the service\ncollapse into one simple method. It uses the instance of IBodySerializer  to\nserialize the body contents with the correct encoding and provide the value for\nthe content type header.\n\nWrapping It Up\nThat's a lot of code, but the idea is all step bindings work against the \nIBodySerializer  interface. Its implementation is determined up front by a\nscenario tag in a hook and added to the container. Step methods don't care\nwhat's behind the interface and are decoupled from the implementation.\n\nAnother thing to note is this implementation favors composition over\ninheritance. I've seen similar problems solved using a base class plus\nsubclasses scoped by tag. While this approach simplifies the step methods, it\ndoesn't solve the lack of re-usability and coupling.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-10-09T12:19:57.000Z","created_by":"1","updated_at":"2017-10-22T03:12:28.000Z","updated_by":"1","published_at":"2015-10-26T13:30:51.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a6","uuid":"b30f6ce2-9339-40fd-803a-8abbeecc0322","title":"Two Tips for Debugging Apps in IIS","slug":"two-tips-for-debugging-apps-in-iis","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"If you develop web sites or services hosted in IIS, here are two tips to make debugging on your development machine easier.\\n\\n#### Disable Health Monitoring\\n\\nIIS application pools have health monitoring built in to ensure processes are responding to requests in a timely manner. If a process stops responding after a period of time, IIS will kill it. This is really inconvenient when you're debugging web apps in your dev environment, and IIS ends your session. You can disable this feature to allow a debugger to be attached indefinitely. Of course, you should never do this in non-development environments.\\n\\nJust open up the app pool's advanced settings and find _Ping Enabled_. Set it to false.\\n\\n<img style=\\\"width: 90%\\\" src=\\\"http://media.joebuschmann.com/ping_enabled.png\\\" alt=\\\"IIS App Pool Settings - Ping Enabled\\\">\\n\\n#### Set Identity to ApplicationPoolIdentity\\n\\nIf you set the identity of an application pool to _ApplicationPoolIdentity_, the IIS worker processes in Task Manager will appear with the application pool's name in the User Name column instead of a Windows user. In addition, if you also create an app pool for each web application, you can quickly identify which w3wp.exe process points to which web application.\\n\\n<img style=\\\"width: 90%\\\" src=\\\"http://media.joebuschmann.com/application_pool_identity.png\\\" alt=\\\"IIS App Pool Settings - Application Pool Identity\\\">\\n\\nFor instance, if I'm debugging excessive memory use, I can see exactly which application is causing the issue. In this case, _Berkley Concierge Se_ is the culprit.\\n\\n<img style=\\\"width: 90%\\\" src=\\\"http://media.joebuschmann.com/task_manager.png\\\" alt=\\\"Task Manager\\\">\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>If you develop web sites or services hosted in IIS, here are two tips to make debugging on your development machine easier.</p>\n<h4 id=\"disablehealthmonitoring\">Disable Health Monitoring</h4>\n<p>IIS application pools have health monitoring built in to ensure processes are responding to requests in a timely manner. If a process stops responding after a period of time, IIS will kill it. This is really inconvenient when you're debugging web apps in your dev environment, and IIS ends your session. You can disable this feature to allow a debugger to be attached indefinitely. Of course, you should never do this in non-development environments.</p>\n<p>Just open up the app pool's advanced settings and find <em>Ping Enabled</em>. Set it to false.</p>\n<img style=\"width: 90%\" src=\"http://media.joebuschmann.com/ping_enabled.png\" alt=\"IIS App Pool Settings - Ping Enabled\">\n<h4 id=\"setidentitytoapplicationpoolidentity\">Set Identity to ApplicationPoolIdentity</h4>\n<p>If you set the identity of an application pool to <em>ApplicationPoolIdentity</em>, the IIS worker processes in Task Manager will appear with the application pool's name in the User Name column instead of a Windows user. In addition, if you also create an app pool for each web application, you can quickly identify which w3wp.exe process points to which web application.</p>\n<img style=\"width: 90%\" src=\"http://media.joebuschmann.com/application_pool_identity.png\" alt=\"IIS App Pool Settings - Application Pool Identity\">\n<p>For instance, if I'm debugging excessive memory use, I can see exactly which application is causing the issue. In this case, <em>Berkley Concierge Se</em> is the culprit.</p>\n<img style=\"width: 90%\" src=\"http://media.joebuschmann.com/task_manager.png\" alt=\"Task Manager\">\n</div>","amp":"59","plaintext":"If you develop web sites or services hosted in IIS, here are two tips to make\ndebugging on your development machine easier.\n\nDisable Health Monitoring\nIIS application pools have health monitoring built in to ensure processes are\nresponding to requests in a timely manner. If a process stops responding after a\nperiod of time, IIS will kill it. This is really inconvenient when you're\ndebugging web apps in your dev environment, and IIS ends your session. You can\ndisable this feature to allow a debugger to be attached indefinitely. Of course,\nyou should never do this in non-development environments.\n\nJust open up the app pool's advanced settings and find Ping Enabled. Set it to\nfalse.\n\nSet Identity to ApplicationPoolIdentity\nIf you set the identity of an application pool to ApplicationPoolIdentity, the\nIIS worker processes in Task Manager will appear with the application pool's\nname in the User Name column instead of a Windows user. In addition, if you also\ncreate an app pool for each web application, you can quickly identify which\nw3wp.exe process points to which web application.\n\nFor instance, if I'm debugging excessive memory use, I can see exactly which\napplication is causing the issue. In this case, Berkley Concierge Se  is the\nculprit.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-10-14T18:32:15.000Z","created_by":"1","updated_at":"2015-11-14T23:48:38.000Z","updated_by":"1","published_at":"2015-11-14T23:33:47.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a7","uuid":"54a60638-1bf7-4d02-810c-94f07f5b21d4","title":"An Introduction to Scoped Bindings in SpecFlow","slug":"an-introduction-to-scoped-bindings-in-specflow","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"One nice aspect of SpecFlow is the ability to scope bindings by feature title, scenario title, or tag. Normally bindings are global to the project, but a binding's scope can be restricted using the `Scope` attribute. I like to think of it as similar to the `private` and `public` class modifiers in C#.\\n\\nConsider the Gherkin below.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/26a8482d54d97c0761e9.js\\\"></script>\\n\\nIt is a single feature with one scenario and two tags. One tag is at the feature level and the other at the scenario level.\\n\\nThe feature's corresponding steps can be scoped by:\\n\\n**Scenario Title**\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/2df26540a2ae3a5fa369.js\\\"></script>\\n\\n**Scenario Tag**\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/359c5b34f2e6dd8cac67.js\\\"></script>\\n\\n**Feature Title**\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/08a29c27dd6204af4f5b.js\\\"></script>\\n\\n**Feature Tag**\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0ae0cbd4163e053d1e40.js\\\"></script>\\n\\nIn these snippets, the `Scope` attribute is applied at the class level, but you can also put them on individual methods. When the SpecFlow test runner executes the bindings, it will match the Gherkin to methods based on scoping rules. If there are multiple matches, the most restrictive match is used.\\n\\n#### Same Gherkin, Different Bindings\\n\\nTo illustrate the usefulness of scoped bindings, consider the following feature that invokes a service with content serialized to XML, JSON, and Form-UrlEncoding. The text of the `When` step is the same in the Gherkin for all three scenarios, but each bound method is different. Without scoped bindings, this feature won't run because the SpecFlow runtime can't determine which method to execute.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/72554b4c76974e70dedf.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9db7552ff3a22209dfce.js\\\"></script>\\n\\nScoped bindings can help. You could scope each method by scenario title.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/ca4a46579de16c12768e.js\\\"></script>\\n\\nOr use tags.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9e9ae7dab81f27cfee61.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fca3c06961a6dd0b7443.js\\\"></script>\\n\\nWhile this example works well for demonstrating the power of scoped bindings, I generally avoid coupling step definitions to Gherkin in all but the simplest features. In fact, this type of coupling has been identified as an [anti-pattern](https://github.com/cucumber/cucumber/wiki/Feature-Coupled-Step-Definitions-%28Antipattern%29).\\n\\nSo how would I fix this? That's the subject of [my next post](http://joebuschmann.com/specflow-tags-done-right/). In the meantime, you can read more about scoped bindings in the [SpecFlow documentation](http://www.specflow.org/documentation/Scoped-Bindings/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>One nice aspect of SpecFlow is the ability to scope bindings by feature title, scenario title, or tag. Normally bindings are global to the project, but a binding's scope can be restricted using the <code>Scope</code> attribute. I like to think of it as similar to the <code>private</code> and <code>public</code> class modifiers in C#.</p>\n<p>Consider the Gherkin below.</p>\n<script src=\"https://gist.github.com/joebuschmann/26a8482d54d97c0761e9.js\"></script>\n<p>It is a single feature with one scenario and two tags. One tag is at the feature level and the other at the scenario level.</p>\n<p>The feature's corresponding steps can be scoped by:</p>\n<p><strong>Scenario Title</strong></p>\n<script src=\"https://gist.github.com/joebuschmann/2df26540a2ae3a5fa369.js\"></script>\n<p><strong>Scenario Tag</strong></p>\n<script src=\"https://gist.github.com/joebuschmann/359c5b34f2e6dd8cac67.js\"></script>\n<p><strong>Feature Title</strong></p>\n<script src=\"https://gist.github.com/joebuschmann/08a29c27dd6204af4f5b.js\"></script>\n<p><strong>Feature Tag</strong></p>\n<script src=\"https://gist.github.com/joebuschmann/0ae0cbd4163e053d1e40.js\"></script>\n<p>In these snippets, the <code>Scope</code> attribute is applied at the class level, but you can also put them on individual methods. When the SpecFlow test runner executes the bindings, it will match the Gherkin to methods based on scoping rules. If there are multiple matches, the most restrictive match is used.</p>\n<h4 id=\"samegherkindifferentbindings\">Same Gherkin, Different Bindings</h4>\n<p>To illustrate the usefulness of scoped bindings, consider the following feature that invokes a service with content serialized to XML, JSON, and Form-UrlEncoding. The text of the <code>When</code> step is the same in the Gherkin for all three scenarios, but each bound method is different. Without scoped bindings, this feature won't run because the SpecFlow runtime can't determine which method to execute.</p>\n<script src=\"https://gist.github.com/joebuschmann/72554b4c76974e70dedf.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/9db7552ff3a22209dfce.js\"></script>\n<p>Scoped bindings can help. You could scope each method by scenario title.</p>\n<script src=\"https://gist.github.com/joebuschmann/ca4a46579de16c12768e.js\"></script>\n<p>Or use tags.</p>\n<script src=\"https://gist.github.com/joebuschmann/9e9ae7dab81f27cfee61.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/fca3c06961a6dd0b7443.js\"></script>\n<p>While this example works well for demonstrating the power of scoped bindings, I generally avoid coupling step definitions to Gherkin in all but the simplest features. In fact, this type of coupling has been identified as an <a href=\"https://github.com/cucumber/cucumber/wiki/Feature-Coupled-Step-Definitions-%28Antipattern%29\">anti-pattern</a>.</p>\n<p>So how would I fix this? That's the subject of <a href=\"http://joebuschmann.com/specflow-tags-done-right/\">my next post</a>. In the meantime, you can read more about scoped bindings in the <a href=\"http://www.specflow.org/documentation/Scoped-Bindings/\">SpecFlow documentation</a>.</p>\n</div>","amp":"60","plaintext":"One aspect of Specflow is the ability to scope bindings by feature title,\nscenario title, or tag. Normally bindings are global to the project, but a\nbinding's scope can be restricted using the Scope  attribute. I like to think of\nit as similar to the private  and public  class modifiers in C#.\n\nConsider the Gherkin below.\n\nIt is a single feature with one scenario and two tags. One tag is at the feature\nlevel and the other at the scenario level.\n\nThe feature's corresponding steps can be scoped by:\n\nScenario Title\n\nScenario Tag\n\nFeature Title\n\nFeature Tag\n\nIn these snippets, the Scope  attribute is applied at the class level, but you\ncan also put them on individual methods. When the Specflow test runner executes\nthe bindings, it will match the Gherkin to methods based on scoping rules. If\nthere are multiple matches, the most restrictive match is used.\n\nSame Gherkin, Different Bindings\nTo illustrate the usefulness of scoped bindings, consider the following feature\nthat invokes a service with content serialized to XML, JSON, and\nForm-UrlEncoding. The text of the When  step is the same in the Gherkin for all\nthree scenarios, but each bound method is different. Without scoped bindings,\nthis feature won't run because the Specflow runtime can't determine which method\nto execute.\n\nScoped bindings can help. You could scope each method by scenario title.\n\nOr use tags.\n\nWhile this example works well for demonstrating the power of scoped bindings, I\ngenerally avoid coupling step definitions to Gherkin in all but the simplest\nfeatures. In fact, this type of coupling has been identified as an anti-pattern\n[https://github.com/cucumber/cucumber/wiki/Feature-Coupled-Step-Definitions-%28Antipattern%29]\n.\n\nSo how would I fix this? That's the subject of my next post\n[http://joebuschmann.com/specflow-tags-done-right/]. In the meantime, you can\nread more about scoped bindings in the Specflow documentation\n[http://www.specflow.org/documentation/Scoped-Bindings/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-10-21T12:18:57.000Z","created_by":"1","updated_at":"2017-10-22T03:10:45.000Z","updated_by":"1","published_at":"2015-10-22T12:28:04.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a8","uuid":"836a35bb-0c6b-4ee0-81a4-11fb00192e5d","title":"A Short and Easy Introduction to .NET's Task Class","slug":"a-short-and-easy-introduction-to-dotnet-task-class","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"###### Task.Run\\nYou can use `Task.Run` to schedule a delegate to run on the thread pool. The method returns a new task, and if the work is complete, the result will be available via `Task.Result`. If not, `Task.Result` will block until it is complete.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/19eedb7e0ba5d4479980.js\\\"></script>\\n\\n###### Task.ContinueWith\\nYou'll want to avoid accessing the `Task.Result` property because it will block until the result is ready. In the previous example, the UI will hang for about 2000 milliseconds before updating the label with the result. You can fix this with `Task.ContinueWith`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/be4f90c6ed40a3c35b84.js\\\"></script>\\n\\nIn this case `Task.Result` will not block because `ContinueWith` runs after the first task is complete; however, this code will throw an exception.\\n\\n> An exception of type 'System.InvalidOperationException' occurred in System.Windows.Forms.dll but was not handled in user code\\n>\\n>Additional information: Cross-thread operation not valid: Control 'lblDateTime' accessed from a thread other than the thread it was created on.\\n\\nYou can only update the UI from the thread that created the form. Remember `Control.Invoke` in WinForms? Fortunately, you can fix it by creating an instance of `TaskScheduler` from the UI thread's `SynchronizationContext` and using it when invoking `ContinueWith`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/dfaacb3458326dbce229.js\\\"></script>\\n\\n###### Awaiting Task.Run\\nIf you're using C# 6.0, you can take advantage of async/await and await the task returned by `Task.Run`. The compiler will ensure the continuation runs on the originating thread, in this case the UI thread, so you don't have to create a `TaskScheduler`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/25ddcdb32fc187ebd389.js\\\"></script>\\n\\n###### Task.Delay\\n`Task.Delay` returns a task that will complete after a period of time. It can be awaited just like any other task.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/265f093156822962f4d6.js\\\"></script>\\n\\n###### TaskCompletionSource\\n`TaskCompletionSource` serves as a wrapper around a task whose lifetime must be managed explicitly. No delegate is provided. It's useful for bridging the gap between older asynchronous patterns and newer code based on tasks.\\n\\nFor example, let's say `Task.Delay` didn't exist, and we wanted a more efficient alternative to `Thread.Sleep`. We can use `System.Threading.Timer`, but it would be nice to wrap it in a task. `TaskCompletionSource` can help us do just that.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/909e3d157b705002e022.js\\\"></script>\\n\\nA real world example can be found in the codebase for [Nancy FX](http://nancyfx.org), a lightweight web framework for .NET. Nancy can be hosted in a number of ways including in ASP.NET where [an implementation of IHttpAsyncHandler](https://github.com/NancyFx/Nancy/blob/master/src/Nancy.Hosting.Aspnet/NancyHttpRequestHandler.cs) invokes the task-based Nancy engine. `IHttpAsyncHandler` uses an older construct to implement asynchronous operations, and [Nancy uses TaskCompletionSource](https://github.com/NancyFx/Nancy/blob/master/src/Nancy.Hosting.Aspnet/NancyHandler.cs) to bridge the gap.\\n\\n###### Task.FromResult\\n`Task.FromResult` returns a completed task prepopulated with a result. No code is run on a background thread. In fact, no work is done besides creating the new task and immediately setting the result.\\n\\nThis method provides a way for asynchronous interfaces to have synchronous implementations. I've found it useful for creating mock classes for tests. The mock doesn't do any blocking work but still needs to return a task as a result. `Task.FromResult` is perfect for this scenario.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/b1000e857675d3f764f9.js\\\"></script>\\n\\n###### Task.Run and ASP.NET\\nUsing `Task.Run` for CPU-bound work makes sense in a desktop application. The long-running task executes on a background thread which keeps the UI thread free to respond to user input. The UI is more interactive leading to a better user experience.\\n\\nBut does it make sense in ASP.NET? In short, no. `Task.Run` will consume another thread from the ASP.NET process's thread pool resulting in two threads to service the same request.\\n\\nThere are inefficiencies even if you use async/await. The calling thread is recycled, but another one is needed to handle the task. That kind of churn in the thread pool is a poor use of resources.\\n\\nFor a more in depth explanation, see Stephen Cleary's [series on Task.Run etiquette](http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html). The entire series is worth a read, but part three, [Don't Use Task.Run in the Implementation](http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html), specifically addresses tasks in ASP.NET.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><h6 id=\"taskrun\">Task.Run</h6>\n<p>You can use <code>Task.Run</code> to schedule a delegate to run on the thread pool. The method returns a new task, and if the work is complete, the result will be available via <code>Task.Result</code>. If not, <code>Task.Result</code> will block until it is complete.</p>\n<script src=\"https://gist.github.com/joebuschmann/19eedb7e0ba5d4479980.js\"></script>\n<h6 id=\"taskcontinuewith\">Task.ContinueWith</h6>\n<p>You'll want to avoid accessing the <code>Task.Result</code> property because it will block until the result is ready. In the previous example, the UI will hang for about 2000 milliseconds before updating the label with the result. You can fix this with <code>Task.ContinueWith</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/be4f90c6ed40a3c35b84.js\"></script>\n<p>In this case <code>Task.Result</code> will not block because <code>ContinueWith</code> runs after the first task is complete; however, this code will throw an exception.</p>\n<blockquote>\n<p>An exception of type 'System.InvalidOperationException' occurred in System.Windows.Forms.dll but was not handled in user code</p>\n<p>Additional information: Cross-thread operation not valid: Control 'lblDateTime' accessed from a thread other than the thread it was created on.</p>\n</blockquote>\n<p>You can only update the UI from the thread that created the form. Remember <code>Control.Invoke</code> in WinForms? Fortunately, you can fix it by creating an instance of <code>TaskScheduler</code> from the UI thread's <code>SynchronizationContext</code> and using it when invoking <code>ContinueWith</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/dfaacb3458326dbce229.js\"></script>\n<h6 id=\"awaitingtaskrun\">Awaiting Task.Run</h6>\n<p>If you're using C# 6.0, you can take advantage of async/await and await the task returned by <code>Task.Run</code>. The compiler will ensure the continuation runs on the originating thread, in this case the UI thread, so you don't have to create a <code>TaskScheduler</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/25ddcdb32fc187ebd389.js\"></script>\n<h6 id=\"taskdelay\">Task.Delay</h6>\n<p><code>Task.Delay</code> returns a task that will complete after a period of time. It can be awaited just like any other task.</p>\n<script src=\"https://gist.github.com/joebuschmann/265f093156822962f4d6.js\"></script>\n<h6 id=\"taskcompletionsource\">TaskCompletionSource</h6>\n<p><code>TaskCompletionSource</code> serves as a wrapper around a task whose lifetime must be managed explicitly. No delegate is provided. It's useful for bridging the gap between older asynchronous patterns and newer code based on tasks.</p>\n<p>For example, let's say <code>Task.Delay</code> didn't exist, and we wanted a more efficient alternative to <code>Thread.Sleep</code>. We can use <code>System.Threading.Timer</code>, but it would be nice to wrap it in a task. <code>TaskCompletionSource</code> can help us do just that.</p>\n<script src=\"https://gist.github.com/joebuschmann/909e3d157b705002e022.js\"></script>\n<p>A real world example can be found in the codebase for <a href=\"http://nancyfx.org\">Nancy FX</a>, a lightweight web framework for .NET. Nancy can be hosted in a number of ways including in <a href=\"http://ASP.NET\">ASP.NET</a> where <a href=\"https://github.com/NancyFx/Nancy/blob/master/src/Nancy.Hosting.Aspnet/NancyHttpRequestHandler.cs\">an implementation of IHttpAsyncHandler</a> invokes the task-based Nancy engine. <code>IHttpAsyncHandler</code> uses an older construct to implement asynchronous operations, and <a href=\"https://github.com/NancyFx/Nancy/blob/master/src/Nancy.Hosting.Aspnet/NancyHandler.cs\">Nancy uses TaskCompletionSource</a> to bridge the gap.</p>\n<h6 id=\"taskfromresult\">Task.FromResult</h6>\n<p><code>Task.FromResult</code> returns a completed task prepopulated with a result. No code is run on a background thread. In fact, no work is done besides creating the new task and immediately setting the result.</p>\n<p>This method provides a way for asynchronous interfaces to have synchronous implementations. I've found it useful for creating mock classes for tests. The mock doesn't do any blocking work but still needs to return a task as a result. <code>Task.FromResult</code> is perfect for this scenario.</p>\n<script src=\"https://gist.github.com/joebuschmann/b1000e857675d3f764f9.js\"></script>\n<h6 id=\"taskrunandaspnet\">Task.Run and <a href=\"http://ASP.NET\">ASP.NET</a></h6>\n<p>Using <code>Task.Run</code> for CPU-bound work makes sense in a desktop application. The long-running task executes on a background thread which keeps the UI thread free to respond to user input. The UI is more interactive leading to a better user experience.</p>\n<p>But does it make sense in <a href=\"http://ASP.NET\">ASP.NET</a>? In short, no. <code>Task.Run</code> will consume another thread from the <a href=\"http://ASP.NET\">ASP.NET</a> process's thread pool resulting in two threads to service the same request.</p>\n<p>There are inefficiencies even if you use async/await. The calling thread is recycled, but another one is needed to handle the task. That kind of churn in the thread pool is a poor use of resources.</p>\n<p>For a more in depth explanation, see Stephen Cleary's <a href=\"http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html\">series on Task.Run etiquette</a>. The entire series is worth a read, but part three, <a href=\"http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html\">Don't Use Task.Run in the Implementation</a>, specifically addresses tasks in <a href=\"http://ASP.NET\">ASP.NET</a>.</p>\n</div>","amp":"63","plaintext":"Task.Run\nYou can use Task.Run  to schedule a delegate to run on the thread pool. The\nmethod returns a new task, and if the work is complete, the result will be\navailable via Task.Result. If not, Task.Result  will block until it is complete.\n\nTask.ContinueWith\nYou'll want to avoid accessing the Task.Result  property because it will block\nuntil the result is ready. In the previous example, the UI will hang for about\n2000 milliseconds before updating the label with the result. You can fix this\nwith Task.ContinueWith.\n\nIn this case Task.Result  will not block because ContinueWith  runs after the\nfirst task is complete; however, this code will throw an exception.\n\nAn exception of type 'System.InvalidOperationException' occurred in\nSystem.Windows.Forms.dll but was not handled in user code\n\nAdditional information: Cross-thread operation not valid: Control 'lblDateTime'\naccessed from a thread other than the thread it was created on.\n\nYou can only update the UI from the thread that created the form. Remember \nControl.Invoke  in WinForms? Fortunately, you can fix it by creating an instance\nof TaskScheduler  from the UI thread's SynchronizationContext  and using it when\ninvoking ContinueWith.\n\nAwaiting Task.Run\nIf you're using C# 6.0, you can take advantage of async/await and await the task\nreturned by Task.Run. The compiler will ensure the continuation runs on the\noriginating thread, in this case the UI thread, so you don't have to create a \nTaskScheduler.\n\nTask.Delay\nTask.Delay  returns a task that will complete after a period of time. It can be\nawaited just like any other task.\n\nTaskCompletionSource\nTaskCompletionSource  serves as a wrapper around a task whose lifetime must be\nmanaged explicitly. No delegate is provided. It's useful for bridging the gap\nbetween older asynchronous patterns and newer code based on tasks.\n\nFor example, let's say Task.Delay  didn't exist, and we wanted a more efficient\nalternative to Thread.Sleep. We can use System.Threading.Timer, but it would be\nnice to wrap it in a task. TaskCompletionSource  can help us do just that.\n\nA real world example can be found in the codebase for Nancy FX\n[http://nancyfx.org], a lightweight web framework for .NET. Nancy can be hosted\nin a number of ways including in ASP.NET [http://ASP.NET]  where an\nimplementation of IHttpAsyncHandler\n[https://github.com/NancyFx/Nancy/blob/master/src/Nancy.Hosting.Aspnet/NancyHttpRequestHandler.cs] \n invokes the task-based Nancy engine. IHttpAsyncHandler  uses an older construct\nto implement asynchronous operations, and Nancy uses TaskCompletionSource\n[https://github.com/NancyFx/Nancy/blob/master/src/Nancy.Hosting.Aspnet/NancyHandler.cs] \n to bridge the gap.\n\nTask.FromResult\nTask.FromResult  returns a completed task prepopulated with a result. No code is\nrun on a background thread. In fact, no work is done besides creating the new\ntask and immediately setting the result.\n\nThis method provides a way for asynchronous interfaces to have synchronous\nimplementations. I've found it useful for creating mock classes for tests. The\nmock doesn't do any blocking work but still needs to return a task as a result. \nTask.FromResult  is perfect for this scenario.\n\nTask.Run and ASP.NET [http://ASP.NET]\nUsing Task.Run  for CPU-bound work makes sense in a desktop application. The\nlong-running task executes on a background thread which keeps the UI thread free\nto respond to user input. The UI is more interactive leading to a better user\nexperience.\n\nBut does it make sense in ASP.NET [http://ASP.NET]? In short, no. Task.Run  will\nconsume another thread from the ASP.NET [http://ASP.NET]  process's thread pool\nresulting in two threads to service the same request.\n\nThere are inefficiencies even if you use async/await. The calling thread is\nrecycled, but another one is needed to handle the task. That kind of churn in\nthe thread pool is a poor use of resources.\n\nFor a more in depth explanation, see Stephen Cleary's series on Task.Run\netiquette\n[http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html].\nThe entire series is worth a read, but part three, Don't Use Task.Run in the\nImplementation\n[http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html]\n, specifically addresses tasks in ASP.NET [http://ASP.NET].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-11-22T19:01:25.000Z","created_by":"1","updated_at":"2015-12-09T22:09:29.000Z","updated_by":"1","published_at":"2015-12-09T22:09:29.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4a9","uuid":"87e2d5aa-15c6-46bf-a60e-e7375f6fd609","title":"Top 6 Industry Shifts During My IT Career","slug":"top-6-industry-shifts-during-my-it-career","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In the fall of 1999, I dropped my plans to attend grad school to embark on a career in IT. The industry has changed considerably since then mostly for the better. In fact I've never been more excited to be a software developer.\\n\\nAs part of a personal retrospective on my career, below are my thoughts on the top six shifts in IT. __By a \\\"shift\\\" I mean a change that has profoundly affected the way developers go about their daily work.__\\n\\n##### 6 - Automated Testing\\n\\nWhen I began my career, I'd never heard of automated testing. TDD, BDD, ATDD - these acronyms didn't exist. Instead, QA teams manually chugged through test plans and clicked around on a UI all day. The power of automation seems so obvious now that writing tests is a given. I don't know of any development shop that still relies on solely manual testing. And that's a huge win for the industry.\\n\\n##### 5 - .NET\\n\\nThe .NET software framework was created by Microsoft for developing applications across multiple languages. It was released in 2002 in conjunction with a new language C#. It exploded in popularity because it made creating Windows apps as easy as VB6, but its base class library was as powerful as MFC. Since then, .NET and C# has become a mainstay in the Microsoft development community.\\n\\nI've been working with .NET since the beta. I liked C# because it had more language features than VB6 (my first language) but was easier to learn than C++. Microsoft has evolved the language well adding generics, extension methods, dynamics, async support, and more.\\n\\nIn recent years though, .NET's popularity has been stagnating. The iPhone and iPad pulled many developers into Apple's ecosystem while Node.js is taking hold on the web side. .NET remains a solid platform, but it's starting to feel left behind as the relentless pace of technological change marches on.\\n\\n##### 4 - OSX\\n\\nWhen Apple's OSX was released in spring of 2001, Microsoft Windows was the dominant operating system. OSX was Apple's attempt to reboot the Macintosh brand with a modern OS. It threw away backward compatibility with Mac OS 9 in favor of a fresh start. The first two versions were rough but improvements came with each release.\\n\\nThere were previous attempts to break the Windows monopoly. OSX succeeded where various Linux distributions failed. It gained enough market share to revive Apple and laid the groundwork for iOS which runs the iPhone, iPad, and Apple TV.\\n\\nToday, its market share isn't dominant, around 6.0%, but it has a significant following in the software development community. OSX forms the development base for all of Apple's products and ensures it will be the launching point for apps and third-party offerings for years to come.\\n\\n##### 3 - The Browser Wars\\nIn the 2004 Microsoft's Internet Explorer browser had a stranglehold on web browsing. Netscape had been vanquished and open-sourced, but out of its ashes, Firefox emerged. I've used it from version 0.4 when it was called Phoenix. Firefox's distinguishing feature was tabbed browsing which IE didn't offer. As Firefox gained market share, websites were forced to drop their IE-only approach to development.\\n\\nGoogle's Chrome browser accelerated the changes that Firefox started. Chrome's innovations included the V8 virtual machine to speed up JavaScript and process-isolated tabs for a more stable browsing experience. Other browsers responded with their own virtual machines and better security. Chrome's rapid release schedule pushed its competitors to release new versions more frequently.\\n\\nPerhaps the biggest innovation was spurred by the V8 JavaScript engine. Node.js uses V8 to run JavaScript and has expanded the language's reach into the server. The Node community is vibrant and pulling in new developers each month.\\n\\nToday the web landscape has totally changed. IE is just one of several high-quality browsers. Microsoft was forced to embrace the openness of the web and no longer try to subvert it. The intense competition has forced browsers to support the latest standards and innovate quickly.\\n\\n##### 2 - The Fall of Giants\\nDuring the spring of 2009 I was watching an episode of the news program _20/20_. One of the topics was the dominance of RIM and its Blackberry smartphone. My wife had just bought us two Blackberry handsets, our first smartphones, so we paid close attention. An interview with one of RIM's CEOs (oddly there were two) left us reassured that we chose the right phone. He was confident in the Blackberry platform and dismissed the upstart iPhone and Android OS.\\n\\nWe had those phones for three years, and in just three years, the Blackberry went from market leader to bottom feeder. It was an amazing transformation. A dominant corporation was decimated in such a short time. Nokia and Motorola went through a similar decline when first the iPhone and then Android quickly gained market share. Even Microsoft wasn't spared as consumers transitioned from the PC to tablets. Microsoft still dominates in businesses, but it is struggling in the consumer space.\\n\\n##### 1 - Open Source\\n\\nOpen source software (OSS) once meant [GNU](http://www.gnu.org/), [BSD](https://en.wikipedia.org/wiki/Berkeley_Software_Distribution), and other projects that sprung out of academia. Linux was still in its infancy and struggling on the desktop. Commercial software ruled the landscape. Shrink-wrapped boxes and retail distribution was how we got our operating systems, word processors, and games.\\n\\nToday it's a different story for OSS. It is everywhere. Linux taught us groups of people working remotely can still manage a massive software project. Tools like Github and Slack have made it even easier. At the same time, the internet enabled a model that favored selling services over retail software. Companies like Google and Facebook can afford to create software to enable their businesses and then give it away. In return they get contributions from third parties.\\n\\nOSS is huge and shows no sign of slowing down. Its impact has been tremendous which is why it tops my list.\\n\\n##### What's Next?\\n\\nThere were several items I didn't mention including continuous delivery and virtual reality. These areas are hot right now, but I don't think they are mature enough to be labeled as an industry shift. It's going to happen though.\\n\\nSo what did I get right? What did I get wrong? Let me know in the comments.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In the fall of 1999, I dropped my plans to attend grad school to embark on a career in IT. The industry has changed considerably since then mostly for the better. In fact I've never been more excited to be a software developer.</p>\n<p>As part of a personal retrospective on my career, below are my thoughts on the top six shifts in IT. <strong>By a &quot;shift&quot; I mean a change that has profoundly affected the way developers go about their daily work.</strong></p>\n<h5 id=\"6automatedtesting\">6 - Automated Testing</h5>\n<p>When I began my career, I'd never heard of automated testing. TDD, BDD, ATDD - these acronyms didn't exist. Instead, QA teams manually chugged through test plans and clicked around on a UI all day. The power of automation seems so obvious now that writing tests is a given. I don't know of any development shop that still relies on solely manual testing. And that's a huge win for the industry.</p>\n<h5 id=\"5net\">5 - .NET</h5>\n<p>The .NET software framework was created by Microsoft for developing applications across multiple languages. It was released in 2002 in conjunction with a new language C#. It exploded in popularity because it made creating Windows apps as easy as VB6, but its base class library was as powerful as MFC. Since then, .NET and C# has become a mainstay in the Microsoft development community.</p>\n<p>I've been working with .NET since the beta. I liked C# because it had more language features than VB6 (my first language) but was easier to learn than C++. Microsoft has evolved the language well adding generics, extension methods, dynamics, async support, and more.</p>\n<p>In recent years though, .NET's popularity has been stagnating. The iPhone and iPad pulled many developers into Apple's ecosystem while Node.js is taking hold on the web side. .NET remains a solid platform, but it's starting to feel left behind as the relentless pace of technological change marches on.</p>\n<h5 id=\"4osx\">4 - OSX</h5>\n<p>When Apple's OSX was released in spring of 2001, Microsoft Windows was the dominant operating system. OSX was Apple's attempt to reboot the Macintosh brand with a modern OS. It threw away backward compatibility with Mac OS 9 in favor of a fresh start. The first two versions were rough but improvements came with each release.</p>\n<p>There were previous attempts to break the Windows monopoly. OSX succeeded where various Linux distributions failed. It gained enough market share to revive Apple and laid the groundwork for iOS which runs the iPhone, iPad, and Apple TV.</p>\n<p>Today, its market share isn't dominant, around 6.0%, but it has a significant following in the software development community. OSX forms the development base for all of Apple's products and ensures it will be the launching point for apps and third-party offerings for years to come.</p>\n<h5 id=\"3thebrowserwars\">3 - The Browser Wars</h5>\n<p>In the 2004 Microsoft's Internet Explorer browser had a stranglehold on web browsing. Netscape had been vanquished and open-sourced, but out of its ashes, Firefox emerged. I've used it from version 0.4 when it was called Phoenix. Firefox's distinguishing feature was tabbed browsing which IE didn't offer. As Firefox gained market share, websites were forced to drop their IE-only approach to development.</p>\n<p>Google's Chrome browser accelerated the changes that Firefox started. Chrome's innovations included the V8 virtual machine to speed up JavaScript and process-isolated tabs for a more stable browsing experience. Other browsers responded with their own virtual machines and better security. Chrome's rapid release schedule pushed its competitors to release new versions more frequently.</p>\n<p>Perhaps the biggest innovation was spurred by the V8 JavaScript engine. Node.js uses V8 to run JavaScript and has expanded the language's reach into the server. The Node community is vibrant and pulling in new developers each month.</p>\n<p>Today the web landscape has totally changed. IE is just one of several high-quality browsers. Microsoft was forced to embrace the openness of the web and no longer try to subvert it. The intense competition has forced browsers to support the latest standards and innovate quickly.</p>\n<h5 id=\"2thefallofgiants\">2 - The Fall of Giants</h5>\n<p>During the spring of 2009 I was watching an episode of the news program <em>20/20</em>. One of the topics was the dominance of RIM and its Blackberry smartphone. My wife had just bought us two Blackberry handsets, our first smartphones, so we paid close attention. An interview with one of RIM's CEOs (oddly there were two) left us reassured that we chose the right phone. He was confident in the Blackberry platform and dismissed the upstart iPhone and Android OS.</p>\n<p>We had those phones for three years, and in just three years, the Blackberry went from market leader to bottom feeder. It was an amazing transformation. A dominant corporation was decimated in such a short time. Nokia and Motorola went through a similar decline when first the iPhone and then Android quickly gained market share. Even Microsoft wasn't spared as consumers transitioned from the PC to tablets. Microsoft still dominates in businesses, but it is struggling in the consumer space.</p>\n<h5 id=\"1opensource\">1 - Open Source</h5>\n<p>Open source software (OSS) once meant <a href=\"http://www.gnu.org/\">GNU</a>, <a href=\"https://en.wikipedia.org/wiki/Berkeley_Software_Distribution\">BSD</a>, and other projects that sprung out of academia. Linux was still in its infancy and struggling on the desktop. Commercial software ruled the landscape. Shrink-wrapped boxes and retail distribution was how we got our operating systems, word processors, and games.</p>\n<p>Today it's a different story for OSS. It is everywhere. Linux taught us groups of people working remotely can still manage a massive software project. Tools like Github and Slack have made it even easier. At the same time, the internet enabled a model that favored selling services over retail software. Companies like Google and Facebook can afford to create software to enable their businesses and then give it away. In return they get contributions from third parties.</p>\n<p>OSS is huge and shows no sign of slowing down. Its impact has been tremendous which is why it tops my list.</p>\n<h5 id=\"whatsnext\">What's Next?</h5>\n<p>There were several items I didn't mention including continuous delivery and virtual reality. These areas are hot right now, but I don't think they are mature enough to be labeled as an industry shift. It's going to happen though.</p>\n<p>So what did I get right? What did I get wrong? Let me know in the comments.</p>\n</div>","amp":"64","plaintext":"In the fall of 1999, I dropped my plans to attend grad school to embark on a\ncareer in IT. The industry has changed considerably since then mostly for the\nbetter. In fact I've never been more excited to be a software developer.\n\nAs part of a personal retrospective on my career, below are my thoughts on the\ntop six shifts in IT. By a \"shift\" I mean a change that has profoundly affected\nthe way developers go about their daily work.\n\n6 - Automated Testing\nWhen I began my career, I'd never heard of automated testing. TDD, BDD, ATDD -\nthese acronyms didn't exist. Instead, QA teams manually chugged through test\nplans and clicked around on a UI all day. The power of automation seems so\nobvious now that writing tests is a given. I don't know of any development shop\nthat still relies on solely manual testing. And that's a huge win for the\nindustry.\n\n5 - .NET\nThe .NET software framework was created by Microsoft for developing applications\nacross multiple languages. It was released in 2002 in conjunction with a new\nlanguage C#. It exploded in popularity because it made creating Windows apps as\neasy as VB6, but its base class library was as powerful as MFC. Since then, .NET\nand C# has become a mainstay in the Microsoft development community.\n\nI've been working with .NET since the beta. I liked C# because it had more\nlanguage features than VB6 (my first language) but was easier to learn than C++.\nMicrosoft has evolved the language well adding generics, extension methods,\ndynamics, async support, and more.\n\nIn recent years though, .NET's popularity has been stagnating. The iPhone and\niPad pulled many developers into Apple's ecosystem while Node.js is taking hold\non the web side. .NET remains a solid platform, but it's starting to feel left\nbehind as the relentless pace of technological change marches on.\n\n4 - OSX\nWhen Apple's OSX was released in spring of 2001, Microsoft Windows was the\ndominant operating system. OSX was Apple's attempt to reboot the Macintosh brand\nwith a modern OS. It threw away backward compatibility with Mac OS 9 in favor of\na fresh start. The first two versions were rough but improvements came with each\nrelease.\n\nThere were previous attempts to break the Windows monopoly. OSX succeeded where\nvarious Linux distributions failed. It gained enough market share to revive\nApple and laid the groundwork for iOS which runs the iPhone, iPad, and Apple TV.\n\nToday, its market share isn't dominant, around 6.0%, but it has a significant\nfollowing in the software development community. OSX forms the development base\nfor all of Apple's products and ensures it will be the launching point for apps\nand third-party offerings for years to come.\n\n3 - The Browser Wars\nIn the 2004 Microsoft's Internet Explorer browser had a stranglehold on web\nbrowsing. Netscape had been vanquished and open-sourced, but out of its ashes,\nFirefox emerged. I've used it from version 0.4 when it was called Phoenix.\nFirefox's distinguishing feature was tabbed browsing which IE didn't offer. As\nFirefox gained market share, websites were forced to drop their IE-only approach\nto development.\n\nGoogle's Chrome browser accelerated the changes that Firefox started. Chrome's\ninnovations included the V8 virtual machine to speed up JavaScript and\nprocess-isolated tabs for a more stable browsing experience. Other browsers\nresponded with their own virtual machines and better security. Chrome's rapid\nrelease schedule pushed its competitors to release new versions more frequently.\n\nPerhaps the biggest innovation was spurred by the V8 JavaScript engine. Node.js\nuses V8 to run JavaScript and has expanded the language's reach into the server.\nThe Node community is vibrant and pulling in new developers each month.\n\nToday the web landscape has totally changed. IE is just one of several\nhigh-quality browsers. Microsoft was forced to embrace the openness of the web\nand no longer try to subvert it. The intense competition has forced browsers to\nsupport the latest standards and innovate quickly.\n\n2 - The Fall of Giants\nDuring the spring of 2009 I was watching an episode of the news program 20/20.\nOne of the topics was the dominance of RIM and its Blackberry smartphone. My\nwife had just bought us two Blackberry handsets, our first smartphones, so we\npaid close attention. An interview with one of RIM's CEOs (oddly there were two)\nleft us reassured that we chose the right phone. He was confident in the\nBlackberry platform and dismissed the upstart iPhone and Android OS.\n\nWe had those phones for three years, and in just three years, the Blackberry\nwent from market leader to bottom feeder. It was an amazing transformation. A\ndominant corporation was decimated in such a short time. Nokia and Motorola went\nthrough a similar decline when first the iPhone and then Android quickly gained\nmarket share. Even Microsoft wasn't spared as consumers transitioned from the PC\nto tablets. Microsoft still dominates in businesses, but it is struggling in the\nconsumer space.\n\n1 - Open Source\nOpen source software (OSS) once meant GNU [http://www.gnu.org/], BSD\n[https://en.wikipedia.org/wiki/Berkeley_Software_Distribution], and other\nprojects that sprung out of academia. Linux was still in its infancy and\nstruggling on the desktop. Commercial software ruled the landscape.\nShrink-wrapped boxes and retail distribution was how we got our operating\nsystems, word processors, and games.\n\nToday it's a different story for OSS. It is everywhere. Linux taught us groups\nof people working remotely can still manage a massive software project. Tools\nlike Github and Slack have made it even easier. At the same time, the internet\nenabled a model that favored selling services over retail software. Companies\nlike Google and Facebook can afford to create software to enable their\nbusinesses and then give it away. In return they get contributions from third\nparties.\n\nOSS is huge and shows no sign of slowing down. Its impact has been tremendous\nwhich is why it tops my list.\n\nWhat's Next?\nThere were several items I didn't mention including continuous delivery and\nvirtual reality. These areas are hot right now, but I don't think they are\nmature enough to be labeled as an industry shift. It's going to happen though.\n\nSo what did I get right? What did I get wrong? Let me know in the comments.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-07T04:25:00.000Z","created_by":"1","updated_at":"2016-07-08T01:04:27.000Z","updated_by":"1","published_at":"2016-07-08T01:04:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4aa","uuid":"5f52f433-1f56-4b7c-940d-b1ccae698544","title":"The Joy of Public Transit","slug":"you-dont-drive-to-work-huh","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"First of all, I should clarify that the title of this post is not meant to be sarcastic. I really do enjoy public transit. It has been over 17 years since I needed to commute to work by automobile. In fact, I haven't driven to work once during that time. My daily commute consists of about two miles of walking plus a 45 minute train ride one way. I consider myself to be very lucky to have the choice not to drive.\\n\\nThere are times when I'll get odd questions about my commute from people who practice the automobile lifestyle. In this post, I list those questions along with my answers. Hopefully this sheds some light on the shadowy world of public transit.\\n\\n> Don't you miss the freedom of a car?\\n\\nIt took some getting used to, but I adjusted. I traded the freedom to get up and go for the freedom from gas and repair costs. My wife and I still own a car to get around the burbs outside of work; however, our cost of ownership is down dramatically without the wear and tear of a daily commute.\\n\\n> What if it rains?\\n\\nI use an ancient device called an umbrella to protect myself.\\n\\n> What if it's cold?\\n\\nCoat and boots.\\n\\n> What if you need to pick up some things on the way home?\\n\\nDowntown Chicago has a Target, dozens of drugstores, and other shops.\\n\\n> Are trains and buses dangerous?\\n\\nThey are. There is a higher chance of assault, robbery, and even murder. In fact, I was murdered five times this month alone. I've gotten accustomed to it.\\n\\nSeriously though, [trains and buses are much safer than driving](http://money.cnn.com/2015/05/13/news/economy/train-plane-car-deaths/).\\n\\n> Don't you get bored on the train?\\n\\nNope. Here are some things I can do during my commute that I couldn't do in a car.\\n\\n* Watch a movie.\\n* Read a book.\\n* Get started on work.\\n* Take a nap.\\n* Zone out.\\n* Write this blog post.\\n\\n> What if the zombie apocalypse begins while you're at work? How will you get away?\\n\\nNot having a car will be the least of my problems.\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>First of all, I should clarify that the title of this post is not meant to be sarcastic. I really do enjoy public transit. It has been over 17 years since I needed to commute to work by automobile. In fact, I haven't driven to work once during that time. My daily commute consists of about two miles of walking plus a 45 minute train ride one way. I consider myself to be very lucky to have the choice not to drive.</p>\n<p>There are times when I'll get odd questions about my commute from people who practice the automobile lifestyle. In this post, I list those questions along with my answers. Hopefully this sheds some light on the shadowy world of public transit.</p>\n<blockquote>\n<p>Don't you miss the freedom of a car?</p>\n</blockquote>\n<p>It took some getting used to, but I adjusted. I traded the freedom to get up and go for the freedom from gas and repair costs. My wife and I still own a car to get around the burbs outside of work; however, our cost of ownership is down dramatically without the wear and tear of a daily commute.</p>\n<blockquote>\n<p>What if it rains?</p>\n</blockquote>\n<p>I use an ancient device called an umbrella to protect myself.</p>\n<blockquote>\n<p>What if it's cold?</p>\n</blockquote>\n<p>Coat and boots.</p>\n<blockquote>\n<p>What if you need to pick up some things on the way home?</p>\n</blockquote>\n<p>Downtown Chicago has a Target, dozens of drugstores, and other shops.</p>\n<blockquote>\n<p>Are trains and buses dangerous?</p>\n</blockquote>\n<p>They are. There is a higher chance of assault, robbery, and even murder. In fact, I was murdered five times this month alone. I've gotten accustomed to it.</p>\n<p>Seriously though, <a href=\"http://money.cnn.com/2015/05/13/news/economy/train-plane-car-deaths/\">trains and buses are much safer than driving</a>.</p>\n<blockquote>\n<p>Don't you get bored on the train?</p>\n</blockquote>\n<p>Nope. Here are some things I can do during my commute that I couldn't do in a car.</p>\n<ul>\n<li>Watch a movie.</li>\n<li>Read a book.</li>\n<li>Get started on work.</li>\n<li>Take a nap.</li>\n<li>Zone out.</li>\n<li>Write this blog post.</li>\n</ul>\n<blockquote>\n<p>What if the zombie apocalypse begins while you're at work? How will you get away?</p>\n</blockquote>\n<p>Not having a car will be the least of my problems.</p>\n</div>","amp":"65","plaintext":"First of all, I should clarify that the title of this post is not meant to be\nsarcastic. I really do enjoy public transit. It has been over 17 years since I\nneeded to commute to work by automobile. In fact, I haven't driven to work once\nduring that time. My daily commute consists of about two miles of walking plus a\n45 minute train ride one way. I consider myself to be very lucky to have the\nchoice not to drive.\n\nThere are times when I'll get odd questions about my commute from people who\npractice the automobile lifestyle. In this post, I list those questions along\nwith my answers. Hopefully this sheds some light on the shadowy world of public\ntransit.\n\nDon't you miss the freedom of a car?\n\nIt took some getting used to, but I adjusted. I traded the freedom to get up and\ngo for the freedom from gas and repair costs. My wife and I still own a car to\nget around the burbs outside of work; however, our cost of ownership is down\ndramatically without the wear and tear of a daily commute.\n\nWhat if it rains?\n\nI use an ancient device called an umbrella to protect myself.\n\nWhat if it's cold?\n\nCoat and boots.\n\nWhat if you need to pick up some things on the way home?\n\nDowntown Chicago has a Target, dozens of drugstores, and other shops.\n\nAre trains and buses dangerous?\n\nThey are. There is a higher chance of assault, robbery, and even murder. In\nfact, I was murdered five times this month alone. I've gotten accustomed to it.\n\nSeriously though, trains and buses are much safer than driving\n[http://money.cnn.com/2015/05/13/news/economy/train-plane-car-deaths/].\n\nDon't you get bored on the train?\n\nNope. Here are some things I can do during my commute that I couldn't do in a\ncar.\n\n * Watch a movie.\n * Read a book.\n * Get started on work.\n * Take a nap.\n * Zone out.\n * Write this blog post.\n\nWhat if the zombie apocalypse begins while you're at work? How will you get\naway?\n\nNot having a car will be the least of my problems.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2015-12-28T14:19:42.000Z","created_by":"1","updated_at":"2018-08-24T22:53:11.000Z","updated_by":"1","published_at":"2018-08-24T22:53:11.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4ab","uuid":"12f70e19-bd12-4f49-81ed-22ca7b7dcb5e","title":"Convert Truthy/Falsy to True/False with !!","slug":"convert-truthy-falsy-to-true-false-with","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I've been primarily coding in Javascript for a couple months now, and the language's quirks have become familiar, almost normal, to me. [IIFEs](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression), truthy/falsy, `===`, and other weird language features make sense now. When I came across `!!` in a Javascript library, I thought I'd missed some obscure syntax. Searching online provided no clues as to what it did. I read through the [list of Javascript expressions and operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators) and only found the familiar `!` logical not operator.\\n\\nFinally, it hit me. `!!` is not a single operator but `!` applied twice. But what's the point? Doesn't it just return the same boolean value? The answer is yes for most programming languages, but in Javascript, it is a useful shorthand for converting truthy/falsy values into boolean true/false values. Regardless of the operand, `!` always returns a boolean value. You can use `!!` instead of a longer `if` statement or ternary operator to make the conversion. Below are some examples of this in action.\\n\\n```\\n> !!undefined\\nfalse\\n> !!null\\nfalse\\n> !!''\\nfalse\\n> !!0\\nfalse\\n> !!'hello world'\\ntrue\\n> !!25\\ntrue\\n> !!-25\\ntrue\\n> !![]\\ntrue\\n> !!{}\\ntrue\\n```\\n\\nInstead of `var someValue = someValue ? true : false;`, you write `var someValue = !!someValue;`. Only in Javascript!\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I've been primarily coding in Javascript for a couple months now, and the language's quirks have become familiar, almost normal, to me. <a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">IIFEs</a>, truthy/falsy, <code>===</code>, and other weird language features make sense now. When I came across <code>!!</code> in a Javascript library, I thought I'd missed some obscure syntax. Searching online provided no clues as to what it did. I read through the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators\">list of Javascript expressions and operators</a> and only found the familiar <code>!</code> logical not operator.</p>\n<p>Finally, it hit me. <code>!!</code> is not a single operator but <code>!</code> applied twice. But what's the point? Doesn't it just return the same boolean value? The answer is yes for most programming languages, but in Javascript, it is a useful shorthand for converting truthy/falsy values into boolean true/false values. Regardless of the operand, <code>!</code> always returns a boolean value. You can use <code>!!</code> instead of a longer <code>if</code> statement or ternary operator to make the conversion. Below are some examples of this in action.</p>\n<pre><code>&gt; !!undefined\nfalse\n&gt; !!null\nfalse\n&gt; !!''\nfalse\n&gt; !!0\nfalse\n&gt; !!'hello world'\ntrue\n&gt; !!25\ntrue\n&gt; !!-25\ntrue\n&gt; !![]\ntrue\n&gt; !!{}\ntrue\n</code></pre>\n<p>Instead of <code>var someValue = someValue ? true : false;</code>, you write <code>var someValue = !!someValue;</code>. Only in Javascript!</p>\n</div>","amp":"66","plaintext":"I've been primarily coding in Javascript for a couple months now, and the\nlanguage's quirks have become familiar, almost normal, to me. IIFEs\n[https://en.wikipedia.org/wiki/Immediately-invoked_function_expression],\ntruthy/falsy, ===, and other weird language features make sense now. When I came\nacross !!  in a Javascript library, I thought I'd missed some obscure syntax.\nSearching online provided no clues as to what it did. I read through the list\nof\nJavascript expressions and operators\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators] \n and only found the familiar !  logical not operator.\n\nFinally, it hit me. !!  is not a single operator but !  applied twice. But\nwhat's the point? Doesn't it just return the same boolean value? The answer is\nyes for most programming languages, but in Javascript, it is a useful shorthand\nfor converting truthy/falsy values into boolean true/false values. Regardless of\nthe operand, !  always returns a boolean value. You can use !!  instead of a\nlonger if  statement or ternary operator to make the conversion. Below are some\nexamples of this in action.\n\n> !!undefined\nfalse\n> !!null\nfalse\n> !!''\nfalse\n> !!0\nfalse\n> !!'hello world'\ntrue\n> !!25\ntrue\n> !!-25\ntrue\n> !![]\ntrue\n> !!{}\ntrue\n\n\nInstead of var someValue = someValue ? true : false;, you write var someValue =\n!!someValue;. Only in Javascript!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-02-07T17:39:12.000Z","created_by":"1","updated_at":"2016-05-24T02:22:26.000Z","updated_by":"1","published_at":"2016-02-09T13:31:37.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4ac","uuid":"29cd6bfe-0533-417e-953d-2740b9f3b3b4","title":"The Open-Closed Principle and Build Systems","slug":"the-open-closed-principle-and-build-systems","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Most developers are familiar with the **Open-closed Principle** in object-oriented programming. Entities should be open for extension but closed for modification. It serves as a useful guide for software design.\\n\\n> In object-oriented programming, the open/closed principle states \\\"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\\\"; that is, such an entity can allow its behavior to be extended without modifying its source code.\\n> - [Open/closed Principle - Wikipedia](https://en.wikipedia.org/wiki/Open/closed_principle)\\n\\nThe philosophy of the open-closed approach is also useful outside of OO development. Last year I joined a new development team that uses [Jenkins](https://jenkins-ci.org/), an open source automation server, to run its continuous builds. It's a small team and each developer is expected to maintain their own builds. Previously, I'd never had to manage Jenkins or any other continuous build system, so it's been a learning process for me.\\n\\nFortunately, I'd worked with devops guru [Carolyn Van Slyck](http://carolynvanslyck.com/) with a previous employer. Following her example, I learned how to set up a robust build system where she essentially applied the open-closed principle to her build architecture.\\n\\n#### Why Is This Important?\\n\\nBefore diving into the details, let's discuss the importance of this type of architecture. The motivation behind this approach was a project where all build steps were saved in the CI automation system. In this case it was [Bamboo](https://www.atlassian.com/software/bamboo).\\n\\nAt first Bamboo was locked down so only a select few administrators had access. This was a new project so application developers were constantly requesting changes to the build steps. To move things along, developers were given full access to update the Bamboo jobs as needed. This led to chaos. They made daily tweaks with no way to track changes. Failing builds were difficult to diagnose and fix.\\n\\n#### A Better Way\\n\\nFor the next project, Carolyn implemented a better solution. She introduced NANT scripts as extension points, and these scripts were committed to the source code repository along with the application code. Each script represented a well known point in the build that developers could tap into. You could have *prebuild.build* to handle NuGet or NPM dependencies, *test.build* to run tests, *deploy.build* to deploy to a hosting environment, etc.\\n\\nThere was also a bin directory for utilities needed specifically for the build thus alleviating one off installation requests for Bamboo administrators. For example, [ctt.exe](http://ctt.codeplex.com/), a .NET configuration transformation tool, could be committed to *bin* and be made available for the build without having to install it on the build server.\\n\\nThe success of this approach made an impression. I took these same ideas and implemented them in my current position. The benefits are twofold.\\n\\nOne, developers no longer need access to the build system to update build steps. **Administration of the build infrastructure is locked down to a few system admins who focus mostly on scalability and security and not on the details of a specific application.** Build jobs all look the same because they're calling into the same set of scripts every time. In fact, creating a new job is as simple as cloning a template and pointing it to a code repository.\\n\\nTwo, **application developers can tweak a build simply by editing a script, testing the change locally, and committing it to the source control system**. Changes to the script files are automatically tracked via its version control history. This is a huge help when tracking down issues.\\n\\nCurrently, I've implemented this approach using Jenkins for the CI system and NANT to handle the steps, but it could apply to any tool. In fact, I'm currently working on a web app where `npm run` commands are invoked instead of NANT.\\n\\n#### An Example\\n\\nBelow is a screen shot from one of my Jenkins jobs. It's a CI build for a web app and its supporting services. Jenkins handles the source code and compiles the .NET solution (because Jenkins does those two things very well), but otherwise, it invokes the NANT scripts saved in the source repository. These scripts replaced command line steps previously saved in Jenkins.\\n\\nIn this example, *pre-build.build* runs first and restores dependencies via NuGet. After the source is compiled by MSBuild, *test.build* runs the tests. There are additional scripts for packaging and deployment not visible in the screen shot. They run after the tests complete successfully.\\n\\n![Jenkins Job](http://media.joebuschmann.com/jenkins.png)\\n\\nBelow is the pre-build NANT script.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/52f96cb64e9218ecdd7c9b9c349d4335.js\\\"></script>\\n\\nAs you can see, developers can modify the build steps without having access to Jenkins. In this case, the project has a Build directory at its root that contains the NANT build scripts. They act as extension points for the build job.\\n\\n![Build Directory](http://media.joebuschmann.com/build_dir.png)\\n\\nThis approach allows for a clear separation of concerns. System administrators handle security and performance on the Jenkins server/cluster, and application developers focus on the specifics of their application's build process.\\n\\n**Each job is open for extension but closed for modification.**\\n\\nA big thank you to Carolyn Van Slyck whose work inspired this post and who provided valuable feedback. You can find her on [Twitter](https://twitter.com/carolynvs) and writing about technology on [her blog](http://carolynvanslyck.com/).\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Most developers are familiar with the <strong>Open-closed Principle</strong> in object-oriented programming. Entities should be open for extension but closed for modification. It serves as a useful guide for software design.</p>\n<blockquote>\n<p>In object-oriented programming, the open/closed principle states &quot;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification&quot;; that is, such an entity can allow its behavior to be extended without modifying its source code.</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\">Open/closed Principle - Wikipedia</a></li>\n</ul>\n</blockquote>\n<p>The philosophy of the open-closed approach is also useful outside of OO development. Last year I joined a new development team that uses <a href=\"https://jenkins-ci.org/\">Jenkins</a>, an open source automation server, to run its continuous builds. It's a small team and each developer is expected to maintain their own builds. Previously, I'd never had to manage Jenkins or any other continuous build system, so it's been a learning process for me.</p>\n<p>Fortunately, I'd worked with devops guru <a href=\"http://carolynvanslyck.com/\">Carolyn Van Slyck</a> with a previous employer. Following her example, I learned how to set up a robust build system where she essentially applied the open-closed principle to her build architecture.</p>\n<h4 id=\"whyisthisimportant\">Why Is This Important?</h4>\n<p>Before diving into the details, let's discuss the importance of this type of architecture. The motivation behind this approach was a project where all build steps were saved in the CI automation system. In this case it was <a href=\"https://www.atlassian.com/software/bamboo\">Bamboo</a>.</p>\n<p>At first Bamboo was locked down so only a select few administrators had access. This was a new project so application developers were constantly requesting changes to the build steps. To move things along, developers were given full access to update the Bamboo jobs as needed. This led to chaos. They made daily tweaks with no way to track changes. Failing builds were difficult to diagnose and fix.</p>\n<h4 id=\"abetterway\">A Better Way</h4>\n<p>For the next project, Carolyn implemented a better solution. She introduced NANT scripts as extension points, and these scripts were committed to the source code repository along with the application code. Each script represented a well known point in the build that developers could tap into. You could have <em>prebuild.build</em> to handle NuGet or NPM dependencies, <em>test.build</em> to run tests, <em>deploy.build</em> to deploy to a hosting environment, etc.</p>\n<p>There was also a bin directory for utilities needed specifically for the build thus alleviating one off installation requests for Bamboo administrators. For example, <a href=\"http://ctt.codeplex.com/\">ctt.exe</a>, a .NET configuration transformation tool, could be committed to <em>bin</em> and be made available for the build without having to install it on the build server.</p>\n<p>The success of this approach made an impression. I took these same ideas and implemented them in my current position. The benefits are twofold.</p>\n<p>One, developers no longer need access to the build system to update build steps. <strong>Administration of the build infrastructure is locked down to a few system admins who focus mostly on scalability and security and not on the details of a specific application.</strong> Build jobs all look the same because they're calling into the same set of scripts every time. In fact, creating a new job is as simple as cloning a template and pointing it to a code repository.</p>\n<p>Two, <strong>application developers can tweak a build simply by editing a script, testing the change locally, and committing it to the source control system</strong>. Changes to the script files are automatically tracked via its version control history. This is a huge help when tracking down issues.</p>\n<p>Currently, I've implemented this approach using Jenkins for the CI system and NANT to handle the steps, but it could apply to any tool. In fact, I'm currently working on a web app where <code>npm run</code> commands are invoked instead of NANT.</p>\n<h4 id=\"anexample\">An Example</h4>\n<p>Below is a screen shot from one of my Jenkins jobs. It's a CI build for a web app and its supporting services. Jenkins handles the source code and compiles the .NET solution (because Jenkins does those two things very well), but otherwise, it invokes the NANT scripts saved in the source repository. These scripts replaced command line steps previously saved in Jenkins.</p>\n<p>In this example, <em>pre-build.build</em> runs first and restores dependencies via NuGet. After the source is compiled by MSBuild, <em>test.build</em> runs the tests. There are additional scripts for packaging and deployment not visible in the screen shot. They run after the tests complete successfully.</p>\n<p><img src=\"http://media.joebuschmann.com/jenkins.png\" alt=\"Jenkins Job\"></p>\n<p>Below is the pre-build NANT script.</p>\n<script src=\"https://gist.github.com/joebuschmann/52f96cb64e9218ecdd7c9b9c349d4335.js\"></script>\n<p>As you can see, developers can modify the build steps without having access to Jenkins. In this case, the project has a Build directory at its root that contains the NANT build scripts. They act as extension points for the build job.</p>\n<p><img src=\"http://media.joebuschmann.com/build_dir.png\" alt=\"Build Directory\"></p>\n<p>This approach allows for a clear separation of concerns. System administrators handle security and performance on the Jenkins server/cluster, and application developers focus on the specifics of their application's build process.</p>\n<p><strong>Each job is open for extension but closed for modification.</strong></p>\n<p>A big thank you to Carolyn Van Slyck whose work inspired this post and who provided valuable feedback. You can find her on <a href=\"https://twitter.com/carolynvs\">Twitter</a> and writing about technology on <a href=\"http://carolynvanslyck.com/\">her blog</a>.</p>\n</div>","amp":"67","plaintext":"Most developers are familiar with the Open-closed Principle  in object-oriented\nprogramming. Entities should be open for extension but closed for modification.\nIt serves as a useful guide for software design.\n\nIn object-oriented programming, the open/closed principle states \"software\nentities (classes, modules, functions, etc.) should be open for extension, but\nclosed for modification\"; that is, such an entity can allow its behavior to be\nextended without modifying its source code.\n\n * Open/closed Principle - Wikipedia\n   [https://en.wikipedia.org/wiki/Open/closed_principle]\n\nThe philosophy of the open-closed approach is also useful outside of OO\ndevelopment. Last year I joined a new development team that uses Jenkins\n[https://jenkins-ci.org/], an open source automation server, to run its\ncontinuous builds. It's a small team and each developer is expected to maintain\ntheir own builds. Previously, I'd never had to manage Jenkins or any other\ncontinuous build system, so it's been a learning process for me.\n\nFortunately, I'd worked with devops guru Carolyn Van Slyck\n[http://carolynvanslyck.com/]  with a previous employer. Following her example,\nI learned how to set up a robust build system where she essentially applied the\nopen-closed principle to her build architecture.\n\nWhy Is This Important?\nBefore diving into the details, let's discuss the importance of this type of\narchitecture. The motivation behind this approach was a project where all build\nsteps were saved in the CI automation system. In this case it was Bamboo\n[https://www.atlassian.com/software/bamboo].\n\nAt first Bamboo was locked down so only a select few administrators had access.\nThis was a new project so application developers were constantly requesting\nchanges to the build steps. To move things along, developers were given full\naccess to update the Bamboo jobs as needed. This led to chaos. They made daily\ntweaks with no way to track changes. Failing builds were difficult to diagnose\nand fix.\n\nA Better Way\nFor the next project, Carolyn implemented a better solution. She introduced NANT\nscripts as extension points, and these scripts were committed to the source code\nrepository along with the application code. Each script represented a well known\npoint in the build that developers could tap into. You could have prebuild.build \n to handle NuGet or NPM dependencies, test.build  to run tests, deploy.build  to\ndeploy to a hosting environment, etc.\n\nThere was also a bin directory for utilities needed specifically for the build\nthus alleviating one off installation requests for Bamboo administrators. For\nexample, ctt.exe [http://ctt.codeplex.com/], a .NET configuration transformation\ntool, could be committed to bin  and be made available for the build without\nhaving to install it on the build server.\n\nThe success of this approach made an impression. I took these same ideas and\nimplemented them in my current position. The benefits are twofold.\n\nOne, developers no longer need access to the build system to update build steps.\n Administration of the build infrastructure is locked down to a few system\nadmins who focus mostly on scalability and security and not on the details of a\nspecific application.  Build jobs all look the same because they're calling into\nthe same set of scripts every time. In fact, creating a new job is as simple as\ncloning a template and pointing it to a code repository.\n\nTwo, application developers can tweak a build simply by editing a script,\ntesting the change locally, and committing it to the source control system.\nChanges to the script files are automatically tracked via its version control\nhistory. This is a huge help when tracking down issues.\n\nCurrently, I've implemented this approach using Jenkins for the CI system and\nNANT to handle the steps, but it could apply to any tool. In fact, I'm currently\nworking on a web app where npm run  commands are invoked instead of NANT.\n\nAn Example\nBelow is a screen shot from one of my Jenkins jobs. It's a CI build for a web\napp and its supporting services. Jenkins handles the source code and compiles\nthe .NET solution (because Jenkins does those two things very well), but\notherwise, it invokes the NANT scripts saved in the source repository. These\nscripts replaced command line steps previously saved in Jenkins.\n\nIn this example, pre-build.build  runs first and restores dependencies via\nNuGet. After the source is compiled by MSBuild, test.build  runs the tests.\nThere are additional scripts for packaging and deployment not visible in the\nscreen shot. They run after the tests complete successfully.\n\n\n\nBelow is the pre-build NANT script.\n\nAs you can see, developers can modify the build steps without having access to\nJenkins. In this case, the project has a Build directory at its root that\ncontains the NANT build scripts. They act as extension points for the build job.\n\n\n\nThis approach allows for a clear separation of concerns. System administrators\nhandle security and performance on the Jenkins server/cluster, and application\ndevelopers focus on the specifics of their application's build process.\n\nEach job is open for extension but closed for modification.\n\nA big thank you to Carolyn Van Slyck whose work inspired this post and who\nprovided valuable feedback. You can find her on Twitter\n[https://twitter.com/carolynvs]  and writing about technology on her blog\n[http://carolynvanslyck.com/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-02-09T13:37:31.000Z","created_by":"1","updated_at":"2016-04-06T13:20:20.000Z","updated_by":"1","published_at":"2016-04-06T13:20:20.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4ad","uuid":"9217829c-e1d7-4a5d-9903-3f74d5c585ff","title":"React By Example: Mixins","slug":"react-by-example-mixins","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Components are React's preferred reuse mechanism, but it's not the only one. Sometimes different components share the same functions. It may be awkward to wrap these cross-cutting concerns in a higher order component, or the common code may need access to a component's state. In these scenarios, React **mixins** are useful.\\n\\nBefore I continue, I should note mixins seem to be [on the way out](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.3umfys9zz). The React team is focused on making components more powerful versus continuing to build on the mixin concept. In fact, React's ES6 syntax doesn't support them at all.\\n\\nThat's too bad because I like [mixins](https://facebook.github.io/react/docs/reusable-components.html#mixins). I feel they're easier to use than higher order components. So until the React team rips them out of the codebase, [damn the torpedos, full speed ahead](https://en.wikipedia.org/wiki/Battle_of_Mobile_Bay#Damn_the_torpedoes)!\\n\\n#### Detecting Clicks Outside of a Component\\n\\nOne asset that came out of a recent React app is a mixin to detect clicks outside of a component. It works by invoking a callback whenever a click event fires outside of the target component or one of its child elements. I use it to close popup panels like the options list of a custom dropdown or a modal dialog.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9a1944ea8c8f36557234.js\\\"></script>\\n\\n#### How It Works\\n\\nThe ClickAway mixin works by taking advantage of a couple of React's [component lifecycle methods](https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods). It implements `componentDidMount` to attach a unique ID to the component's top level DOM node. The ID is used to identify the component when tracking click events.\\n\\n```\\nvar elementId = id++;\\nvar element = ReactDOM.findDOMNode(self);\\nelement.setAttribute(attributeName, elementId);\\n```\\n\\nNext, an event listener is added to the document node to monitor all mouse clicks (or taps for mobile) on the page. When a click event occurs, the handler locates the DOM node where the event originated and searches it and all its parent nodes for the ID added by the mixin. If the ID is found, the click event is ignored. If not, the onClickAway callback is invoked indicating the event was triggered outside of the component. For something like a popup menu, the callback would close the menu.\\n\\n```\\nself.clickAway = function (event) {\\n    if (!elementWithIdExists(event.target, elementId) && self.onClickAway) {\\n        self.onClickAway(event);\\n    }\\n};\\n\\nwindow.document.addEventListener('click', self.clickAway);\\n```\\n\\nFinally, the click event listener is removed in the `componentWillUnmount` lifecycle method.\\n\\n```\\ncomponentWillUnmount: function () {\\n    window.document.removeEventListener('click', this.clickAway);\\n}\\n```\\n\\n#### How to Use It\\n\\nA quick note before I continue. I use a module bundler like [Browserify](http://browserify.org/) or [Webpack](https://webpack.github.io/) to manage React apps. Module bundlers enable dependency management via `require` and `module.exports` a&#768; la Node.js but on the client. If you've never used one, I recommend it. I went with Browserify because it's simpler to set up. ClickAway.js is organized as a module, and you'll need a bundler to consume it.\\n\\nClickAway is useful for dropdowns and modal panels which need to close when the user clicks elsewhere on the page.\\n\\nTo use it, first import it via `require`.\\n\\n```\\nvar ClickAway = require('../mixin/clickAway');\\n```\\n\\nMixins are included in a component by adding a mixins property to the component's class specification. Its value is set to an array of mixin components.\\n\\n```\\n// Mixin to detect clicks outside of this component.\\nmixins: [ClickAway],\\n```\\n\\nFinally, provide an implementation for the `onClickAway` callback. In the case of the popup panel, it invokes an `onClose` callback to notify the parent component it should be closed.\\n\\n```\\n// Close the panel when the user clicks outside of the component.\\nonClickAway: function () {\\n    if (this.props.onClose) {\\n        this.props.onClose();\\n    }\\n},\\n```\\n\\nThe full source is below.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/496739e921fa4fc6d0c4d76aa8c37a70.js\\\"></script>\\n\\n#### A Better Way?\\n\\nI'm sure there's a better way to detect outside clicks. Perhaps with some kind of hit test? If you have any suggestions, please let me know. In the meantime, this mixin works on Firefox, Chrome, and IE 9+.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Components are React's preferred reuse mechanism, but it's not the only one. Sometimes different components share the same functions. It may be awkward to wrap these cross-cutting concerns in a higher order component, or the common code may need access to a component's state. In these scenarios, React <strong>mixins</strong> are useful.</p>\n<p>Before I continue, I should note mixins seem to be <a href=\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.3umfys9zz\">on the way out</a>. The React team is focused on making components more powerful versus continuing to build on the mixin concept. In fact, React's ES6 syntax doesn't support them at all.</p>\n<p>That's too bad because I like <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">mixins</a>. I feel they're easier to use than higher order components. So until the React team rips them out of the codebase, <a href=\"https://en.wikipedia.org/wiki/Battle_of_Mobile_Bay#Damn_the_torpedoes\">damn the torpedos, full speed ahead</a>!</p>\n<h4 id=\"detectingclicksoutsideofacomponent\">Detecting Clicks Outside of a Component</h4>\n<p>One asset that came out of a recent React app is a mixin to detect clicks outside of a component. It works by invoking a callback whenever a click event fires outside of the target component or one of its child elements. I use it to close popup panels like the options list of a custom dropdown or a modal dialog.</p>\n<script src=\"https://gist.github.com/joebuschmann/9a1944ea8c8f36557234.js\"></script>\n<h4 id=\"howitworks\">How It Works</h4>\n<p>The ClickAway mixin works by taking advantage of a couple of React's <a href=\"https://facebook.github.io/react/docs/component-specs.html#lifecycle-methods\">component lifecycle methods</a>. It implements <code>componentDidMount</code> to attach a unique ID to the component's top level DOM node. The ID is used to identify the component when tracking click events.</p>\n<pre><code>var elementId = id++;\nvar element = ReactDOM.findDOMNode(self);\nelement.setAttribute(attributeName, elementId);\n</code></pre>\n<p>Next, an event listener is added to the document node to monitor all mouse clicks (or taps for mobile) on the page. When a click event occurs, the handler locates the DOM node where the event originated and searches it and all its parent nodes for the ID added by the mixin. If the ID is found, the click event is ignored. If not, the onClickAway callback is invoked indicating the event was triggered outside of the component. For something like a popup menu, the callback would close the menu.</p>\n<pre><code>self.clickAway = function (event) {\n    if (!elementWithIdExists(event.target, elementId) &amp;&amp; self.onClickAway) {\n        self.onClickAway(event);\n    }\n};\n\nwindow.document.addEventListener('click', self.clickAway);\n</code></pre>\n<p>Finally, the click event listener is removed in the <code>componentWillUnmount</code> lifecycle method.</p>\n<pre><code>componentWillUnmount: function () {\n    window.document.removeEventListener('click', this.clickAway);\n}\n</code></pre>\n<h4 id=\"howtouseit\">How to Use It</h4>\n<p>A quick note before I continue. I use a module bundler like <a href=\"http://browserify.org/\">Browserify</a> or <a href=\"https://webpack.github.io/\">Webpack</a> to manage React apps. Module bundlers enable dependency management via <code>require</code> and <code>module.exports</code> à la Node.js but on the client. If you've never used one, I recommend it. I went with Browserify because it's simpler to set up. ClickAway.js is organized as a module, and you'll need a bundler to consume it.</p>\n<p>ClickAway is useful for dropdowns and modal panels which need to close when the user clicks elsewhere on the page.</p>\n<p>To use it, first import it via <code>require</code>.</p>\n<pre><code>var ClickAway = require('../mixin/clickAway');\n</code></pre>\n<p>Mixins are included in a component by adding a mixins property to the component's class specification. Its value is set to an array of mixin components.</p>\n<pre><code>// Mixin to detect clicks outside of this component.\nmixins: [ClickAway],\n</code></pre>\n<p>Finally, provide an implementation for the <code>onClickAway</code> callback. In the case of the popup panel, it invokes an <code>onClose</code> callback to notify the parent component it should be closed.</p>\n<pre><code>// Close the panel when the user clicks outside of the component.\nonClickAway: function () {\n    if (this.props.onClose) {\n        this.props.onClose();\n    }\n},\n</code></pre>\n<p>The full source is below.</p>\n<script src=\"https://gist.github.com/joebuschmann/496739e921fa4fc6d0c4d76aa8c37a70.js\"></script>\n<h4 id=\"abetterway\">A Better Way?</h4>\n<p>I'm sure there's a better way to detect outside clicks. Perhaps with some kind of hit test? If you have any suggestions, please let me know. In the meantime, this mixin works on Firefox, Chrome, and IE 9+.</p>\n</div>","amp":"68","plaintext":"Components are React's preferred reuse mechanism, but it's not the only one.\nSometimes different components share the same functions. It may be awkward to\nwrap these cross-cutting concerns in a higher order component, or the common\ncode may need access to a component's state. In these scenarios, React mixins \nare useful.\n\nBefore I continue, I should note mixins seem to be on the way out. The React\nteam is focused on making components more powerful versus continuing to build on\nthe mixin concept. In fact, React's ES6 syntax doesn't support them at all.\n\nThat's too bad because I like mixins. I feel they're easier to use than higher\norder components. So until the React team rips them out of the codebase, damn\nthe torpedos, full speed ahead!\n\nDetecting Clicks Outside of a Component\nOne asset that came out of a recent React app is a mixin to detect clicks\noutside of a component. It works by invoking a callback whenever a click event\nfires outside of the target component or one of its child elements. I use it to\nclose popup panels like the options list of a custom dropdown or a modal dialog.\n\nHow It Works\nThe ClickAway mixin works by taking advantage of a couple of React's component\nlifecycle methods. It implements componentDidMount  to attach a unique ID to the\ncomponent's top level DOM node. The ID is used to identify the component when\ntracking click events.\n\nvar elementId = id++;\nvar element = ReactDOM.findDOMNode(self);\nelement.setAttribute(attributeName, elementId);\n\n\nNext, an event listener is added to the document node to monitor all mouse\nclicks (or taps for mobile) on the page. When a click event occurs, the handler\nlocates the DOM node where the event originated and searches it and all its\nparent nodes for the ID added by the mixin. If the ID is found, the click event\nis ignored. If not, the onClickAway callback is invoked indicating the event was\ntriggered outside of the component. For something like a popup menu, the\ncallback would close the menu.\n\nself.clickAway = function (event) {\n    if (!elementWithIdExists(event.target, elementId) && self.onClickAway) {\n        self.onClickAway(event);\n    }\n};\n\nwindow.document.addEventListener('click', self.clickAway);\n\n\nFinally, the click event listener is removed in the componentWillUnmount \nlifecycle method.\n\ncomponentWillUnmount: function () {\n    window.document.removeEventListener('click', this.clickAway);\n}\n\n\nHow to Use It\nA quick note before I continue. I use a module bundler like Browserify\n[http://browserify.org/]  or Webpack [https://webpack.github.io/]  to manage\nReact apps. Module bundlers enable dependency management via require  and \nmodule.exports  à la Node.js but on the client. If you've never used one, I\nrecommend it. I went with Browserify because it's simpler to set up.\nClickAway.js is organized as a module, and you'll need a bundler to consume it.\n\nClickAway is useful for dropdowns and modal panels which need to close when the\nuser clicks elsewhere on the page.\n\nTo use it, first import it via require.\n\nvar ClickAway = require('../mixin/clickAway');\n\n\nMixins are included in a component by adding a mixins property to the\ncomponent's class specification. Its value is set to an array of mixin\ncomponents.\n\n// Mixin to detect clicks outside of this component.\nmixins: [ClickAway],\n\n\nFinally, provide an implementation for the onClickAway  callback. In the case of\nthe popup panel, it invokes an onClose  callback to notify the parent component\nit should be closed.\n\n// Close the panel when the user clicks outside of the component.\nonClickAway: function () {\n    if (this.props.onClose) {\n        this.props.onClose();\n    }\n},\n\n\nThe full source is below.\n\nA Better Way?\nI'm sure there's a better way to detect outside clicks. Perhaps with some kind\nof hit test? If you have any suggestions, please let me know. In the meantime,\nthis mixin works on Firefox, Chrome, and IE 9+.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"In this post, I cover a React JS mixin for detecting when a user clicks away from a React component.","author_id":"1","created_at":"2016-02-11T14:23:51.000Z","created_by":"1","updated_at":"2016-06-16T22:35:53.000Z","updated_by":"1","published_at":"2016-06-16T02:44:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4ae","uuid":"af6b4d87-605c-4a3f-9475-b630ed019c0e","title":"React by Example: Stateless Functional Components","slug":"react-by-example-stateless-functional-components","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In v0.14 the React team introduced [stateless functional components](https://facebook.github.io/react/docs/reusable-components.html#stateless-functions). They are implemented by functions that take a props argument and return JSX. They're simpler and offer performance benefits. The drawbacks are the lack of state and the inability to interact directly with the DOM.\\n\\n#### Icon Component\\n\\nIn a typical app, most React components will be presentational only and should be stateless functional components. A good example is an Icon component I created to encapsulate [Font Awesome icons](https://fortawesome.github.io/Font-Awesome/icons/). The component renders an `<i></i>` HTML element with the proper Font Awesome classes. For example, the JSX declaration `<Icon name=\\\"envelope\\\" fixedWidth />` renders the HTML `<i class=\\\"fa fa-envelope fa-fw\\\"></i>` which displays an envelope icon with a fixed width.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/00f5f5068b1bbcb84361d73d51139f45.js\\\"></script>\\n\\nThe Icon source code is organized as a Common JS module. At the top, I import a few dependencies including React. The component is the `Icon` function with a single props argument. In the envelope example, props would contain two properties `name` and `fixedWidth` with the values *envelope* and *true* respectively.\\n\\n```\\nvar React = require('react');\\nvar filterKeys = require('./filterKeys');\\nvar classnames = require('classnames');\\n\\n// The component is implemented as a function.\\nvar Icon = function (props) {\\n    // Snip\\n};\\n```\\n\\nThe return value is a JSX snippet. [JSX](https://facebook.github.io/react/docs/jsx-in-depth.html) is React's way of describing how the component should be rendered. It's similar to HTML, but it needs to be [translated to Javascript](https://babeljs.io/blog/2015/02/23/babel-loves-react) before it will work in the browser.\\n\\n```\\nreturn <i {...elementProps} className={className}></i>;\\n```\\n\\nAfter the function declaration, a property named `propTypes` is added to the function. More on `propTypes` in the next section.\\n\\nFinally, the `Icon` function is exported via `module.exports`.\\n\\n```\\nmodule.exports = Icon;\\n```\\n\\n#### PropTypes\\n\\nReact has the concept of `propTypes` to handle prop validation. [PropTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) ensure the correct prop values are being passed to a component. If a prop is of the wrong type or a required one is missing, React will log a warning.\\n\\nIn the case of the Icon component, the `propTypes` specification is added as a property of the component function. It is an object whose properties export validators from the React.PropTypes namespace.\\n\\n```\\nIcon.propTypes = {\\n    name: React.PropTypes.string.isRequired,\\n    spin: React.PropTypes.bool,\\n    fixedWidth: React.PropTypes.bool,\\n    className: React.PropTypes.string\\n};\\n```\\n\\nThe Icon component has one required property `name` and three optional properties `spin`, `fixedWidth`, and `className`. The props `name`, `spin`, and `fixedWidth` are translated into Font Awesome CSS classes to provide the icon type, spin animation, and a fixed width. They are composed using [Classnames](https://www.npmjs.com/package/classnames), a simple utility for joining CSS classes.\\n\\n```\\n    var className = classnames('fa', 'fa-' + props.name, props.className, {\\n        'fa-spin': props.spin,\\n        'fa-fw': props.fixedWidth\\n    });\\n```\\n\\n#### Filtering PropTypes\\n\\nThe available props aren't limited to those defined in `propTypes`. Consumers of `Icon` can supply extra props that are applied directly to the `<i></i>` element using the [spread operator](https://facebook.github.io/react/docs/jsx-spread.html).\\n\\n```\\n<i {...elementProps} className={className}></i>\\n```\\n\\nBefore they are added to the element, an additional step is needed to filter out the props specified by `propTypes`. This prevents name, spin, and fixedWidth from being included in the final HTML output as attributes.\\n\\n```\\nvar elementProps = filterKeys(props, Icon.propTypes);\\n```\\n\\nThe custom `filterKeys` method takes the keys defined by `propTypes` and removes them from props. It returns a new object containing only the items that apply to the `<i></i>` element. This approach de-clutters the rendered HTML and cuts down on the final script size.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4a74d87c3caade460eb2cf4e056fcc23.js\\\"></script>\\n\\n#### Component Composition\\n\\nNow we have a component that renders icons, but how can it be used? React components can either be rendered directly into the HTML page like below:\\n\\n```\\n// Rendering the Icon directly into the page isn't very useful.\\nReactDOM.render(<Icon name=\\\"envelope\\\" />, document.getElementById('icon'))\\n```\\n\\n...or they can be composed into more complex components. In the example below, a Button component displays a contextual icon on the button itself. The `icon` prop indicates which image to render, and `waiting` displays a spinner.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a66349ec3bff45a567cdf0a50e66f5b6.js\\\"></script>\\n\\nThe icon is conditionally created and saved to a local variable depending on the values of the `waiting` and `icon` props. Notice that JSX can be saved to a variable just like any other Javascript expression.\\n\\n```\\nvar icon = null;\\n\\nif (props.waiting) {\\n    icon = <Icon name=\\\"spinner\\\" fixedWidth spin style={iconStyle} />;\\n} else if (props.icon) {\\n    icon = <Icon name={props.icon} fixedWidth style={iconStyle} />;\\n}\\n```\\nNext the icon is added to the JSX returned by the function. The value of the icon variable may be null, but that's fine. React will ignore any null or undefined values.\\n\\n```\\nreturn <button {...elementProps} type=\\\"button\\\" onClick={onClick}>{icon}{props.children}</button>;\\n```\\n\\nThe snippet below creates a button with an envelope icon and sets the value of `waiting` to `this.state.waiting`. This state value comes from a stateful component that's hosting the button. As the parent component's value for `this.state.waiting` changes, the button will be re-rendered with the new prop values.\\n\\n```\\nvar Button = require('button');\\n\\n<Button className=\\\"btn btn-primary\\\" onClick={this.send} icon=\\\"envelope\\\" waiting={this.state.waiting}>Send Message</Button>\\n```\\n\\n#### Wrapping Up\\n\\nIcon and Button are simple and carry no internal state. That makes them ideal candidates to be implemented as stateless functional components. They can be used to build more complex components which in turn can be composed into ever more complex components. Eventually state is thrown into the mix, and you have a React application.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In v0.14 the React team introduced <a href=\"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions\">stateless functional components</a>. They are implemented by functions that take a props argument and return JSX. They're simpler and offer performance benefits. The drawbacks are the lack of state and the inability to interact directly with the DOM.</p>\n<h4 id=\"iconcomponent\">Icon Component</h4>\n<p>In a typical app, most React components will be presentational only and should be stateless functional components. A good example is an Icon component I created to encapsulate <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\">Font Awesome icons</a>. The component renders an <code>&lt;i&gt;&lt;/i&gt;</code> HTML element with the proper Font Awesome classes. For example, the JSX declaration <code>&lt;Icon name=&quot;envelope&quot; fixedWidth /&gt;</code> renders the HTML <code>&lt;i class=&quot;fa fa-envelope fa-fw&quot;&gt;&lt;/i&gt;</code> which displays an envelope icon with a fixed width.</p>\n<script src=\"https://gist.github.com/joebuschmann/00f5f5068b1bbcb84361d73d51139f45.js\"></script>\n<p>The Icon source code is organized as a Common JS module. At the top, I import a few dependencies including React. The component is the <code>Icon</code> function with a single props argument. In the envelope example, props would contain two properties <code>name</code> and <code>fixedWidth</code> with the values <em>envelope</em> and <em>true</em> respectively.</p>\n<pre><code>var React = require('react');\nvar filterKeys = require('./filterKeys');\nvar classnames = require('classnames');\n\n// The component is implemented as a function.\nvar Icon = function (props) {\n    // Snip\n};\n</code></pre>\n<p>The return value is a JSX snippet. <a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\">JSX</a> is React's way of describing how the component should be rendered. It's similar to HTML, but it needs to be <a href=\"https://babeljs.io/blog/2015/02/23/babel-loves-react\">translated to Javascript</a> before it will work in the browser.</p>\n<pre><code>return &lt;i {...elementProps} className={className}&gt;&lt;/i&gt;;\n</code></pre>\n<p>After the function declaration, a property named <code>propTypes</code> is added to the function. More on <code>propTypes</code> in the next section.</p>\n<p>Finally, the <code>Icon</code> function is exported via <code>module.exports</code>.</p>\n<pre><code>module.exports = Icon;\n</code></pre>\n<h4 id=\"proptypes\">PropTypes</h4>\n<p>React has the concept of <code>propTypes</code> to handle prop validation. <a href=\"https://facebook.github.io/react/docs/reusable-components.html#prop-validation\">PropTypes</a> ensure the correct prop values are being passed to a component. If a prop is of the wrong type or a required one is missing, React will log a warning.</p>\n<p>In the case of the Icon component, the <code>propTypes</code> specification is added as a property of the component function. It is an object whose properties export validators from the React.PropTypes namespace.</p>\n<pre><code>Icon.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    spin: React.PropTypes.bool,\n    fixedWidth: React.PropTypes.bool,\n    className: React.PropTypes.string\n};\n</code></pre>\n<p>The Icon component has one required property <code>name</code> and three optional properties <code>spin</code>, <code>fixedWidth</code>, and <code>className</code>. The props <code>name</code>, <code>spin</code>, and <code>fixedWidth</code> are translated into Font Awesome CSS classes to provide the icon type, spin animation, and a fixed width. They are composed using <a href=\"https://www.npmjs.com/package/classnames\">Classnames</a>, a simple utility for joining CSS classes.</p>\n<pre><code>    var className = classnames('fa', 'fa-' + props.name, props.className, {\n        'fa-spin': props.spin,\n        'fa-fw': props.fixedWidth\n    });\n</code></pre>\n<h4 id=\"filteringproptypes\">Filtering PropTypes</h4>\n<p>The available props aren't limited to those defined in <code>propTypes</code>. Consumers of <code>Icon</code> can supply extra props that are applied directly to the <code>&lt;i&gt;&lt;/i&gt;</code> element using the <a href=\"https://facebook.github.io/react/docs/jsx-spread.html\">spread operator</a>.</p>\n<pre><code>&lt;i {...elementProps} className={className}&gt;&lt;/i&gt;\n</code></pre>\n<p>Before they are added to the element, an additional step is needed to filter out the props specified by <code>propTypes</code>. This prevents name, spin, and fixedWidth from being included in the final HTML output as attributes.</p>\n<pre><code>var elementProps = filterKeys(props, Icon.propTypes);\n</code></pre>\n<p>The custom <code>filterKeys</code> method takes the keys defined by <code>propTypes</code> and removes them from props. It returns a new object containing only the items that apply to the <code>&lt;i&gt;&lt;/i&gt;</code> element. This approach de-clutters the rendered HTML and cuts down on the final script size.</p>\n<script src=\"https://gist.github.com/joebuschmann/4a74d87c3caade460eb2cf4e056fcc23.js\"></script>\n<h4 id=\"componentcomposition\">Component Composition</h4>\n<p>Now we have a component that renders icons, but how can it be used? React components can either be rendered directly into the HTML page like below:</p>\n<pre><code>// Rendering the Icon directly into the page isn't very useful.\nReactDOM.render(&lt;Icon name=&quot;envelope&quot; /&gt;, document.getElementById('icon'))\n</code></pre>\n<p>...or they can be composed into more complex components. In the example below, a Button component displays a contextual icon on the button itself. The <code>icon</code> prop indicates which image to render, and <code>waiting</code> displays a spinner.</p>\n<script src=\"https://gist.github.com/joebuschmann/a66349ec3bff45a567cdf0a50e66f5b6.js\"></script>\n<p>The icon is conditionally created and saved to a local variable depending on the values of the <code>waiting</code> and <code>icon</code> props. Notice that JSX can be saved to a variable just like any other Javascript expression.</p>\n<pre><code>var icon = null;\n\nif (props.waiting) {\n    icon = &lt;Icon name=&quot;spinner&quot; fixedWidth spin style={iconStyle} /&gt;;\n} else if (props.icon) {\n    icon = &lt;Icon name={props.icon} fixedWidth style={iconStyle} /&gt;;\n}\n</code></pre>\n<p>Next the icon is added to the JSX returned by the function. The value of the icon variable may be null, but that's fine. React will ignore any null or undefined values.</p>\n<pre><code>return &lt;button {...elementProps} type=&quot;button&quot; onClick={onClick}&gt;{icon}{props.children}&lt;/button&gt;;\n</code></pre>\n<p>The snippet below creates a button with an envelope icon and sets the value of <code>waiting</code> to <code>this.state.waiting</code>. This state value comes from a stateful component that's hosting the button. As the parent component's value for <code>this.state.waiting</code> changes, the button will be re-rendered with the new prop values.</p>\n<pre><code>var Button = require('button');\n\n&lt;Button className=&quot;btn btn-primary&quot; onClick={this.send} icon=&quot;envelope&quot; waiting={this.state.waiting}&gt;Send Message&lt;/Button&gt;\n</code></pre>\n<h4 id=\"wrappingup\">Wrapping Up</h4>\n<p>Icon and Button are simple and carry no internal state. That makes them ideal candidates to be implemented as stateless functional components. They can be used to build more complex components which in turn can be composed into ever more complex components. Eventually state is thrown into the mix, and you have a React application.</p>\n</div>","amp":"71","plaintext":"In v0.14 the React team introduced stateless functional components. They are\nimplemented by functions that take a props argument and return JSX. They're\nsimpler and offer performance benefits. The drawbacks are the lack of state and\nthe inability to interact directly with the DOM.\n\nIcon Component\nIn a typical app, most React components will be presentational only and should\nbe stateless functional components. A good example is an Icon component I\ncreated to encapsulate Font Awesome icons\n[https://fortawesome.github.io/Font-Awesome/icons/]. The component renders an \n<i></i>  HTML element with the proper Font Awesome classes. For example, the JSX\ndeclaration <Icon name=\"envelope\" fixedWidth />  renders the HTML <i class=\"fa\nfa-envelope fa-fw\"></i>  which displays an envelope icon with a fixed width.\n\nThe Icon source code is organized as a Common JS module. At the top, I import a\nfew dependencies including React. The component is the Icon  function with a\nsingle props argument. In the envelope example, props would contain two\nproperties name  and fixedWidth  with the values envelope  and true \nrespectively.\n\nvar React = require('react');\nvar filterKeys = require('./filterKeys');\nvar classnames = require('classnames');\n\n// The component is implemented as a function.\nvar Icon = function (props) {\n    // Snip\n};\n\n\nThe return value is a JSX snippet. JSX\n[https://facebook.github.io/react/docs/jsx-in-depth.html]  is React's way of\ndescribing how the component should be rendered. It's similar to HTML, but it\nneeds to be translated to Javascript\n[https://babeljs.io/blog/2015/02/23/babel-loves-react]  before it will work in\nthe browser.\n\nreturn <i {...elementProps} className={className}></i>;\n\n\nAfter the function declaration, a property named propTypes  is added to the\nfunction. More on propTypes  in the next section.\n\nFinally, the Icon  function is exported via module.exports.\n\nmodule.exports = Icon;\n\n\nPropTypes\nReact has the concept of propTypes  to handle prop validation. PropTypes  ensure\nthe correct prop values are being passed to a component. If a prop is of the\nwrong type or a required one is missing, React will log a warning.\n\nIn the case of the Icon component, the propTypes  specification is added as a\nproperty of the component function. It is an object whose properties export\nvalidators from the React.PropTypes namespace.\n\nIcon.propTypes = {\n    name: React.PropTypes.string.isRequired,\n    spin: React.PropTypes.bool,\n    fixedWidth: React.PropTypes.bool,\n    className: React.PropTypes.string\n};\n\n\nThe Icon component has one required property name  and three optional properties\n spin, fixedWidth, and className. The props name, spin, and fixedWidth  are\ntranslated into Font Awesome CSS classes to provide the icon type, spin\nanimation, and a fixed width. They are composed using Classnames\n[https://www.npmjs.com/package/classnames], a simple utility for joining CSS\nclasses.\n\n    var className = classnames('fa', 'fa-' + props.name, props.className, {\n        'fa-spin': props.spin,\n        'fa-fw': props.fixedWidth\n    });\n\n\nFiltering PropTypes\nThe available props aren't limited to those defined in propTypes. Consumers of \nIcon  can supply extra props that are applied directly to the <i></i>  element\nusing the spread operator\n[https://facebook.github.io/react/docs/jsx-spread.html].\n\n<i {...elementProps} className={className}></i>\n\n\nBefore they are added to the element, an additional step is needed to filter out\nthe props specified by propTypes. This prevents name, spin, and fixedWidth from\nbeing included in the final HTML output as attributes.\n\nvar elementProps = filterKeys(props, Icon.propTypes);\n\n\nThe custom filterKeys  method takes the keys defined by propTypes  and removes\nthem from props. It returns a new object containing only the items that apply to\nthe <i></i>  element. This approach de-clutters the rendered HTML and cuts down\non the final script size.\n\nComponent Composition\nNow we have a component that renders icons, but how can it be used? React\ncomponents can either be rendered directly into the HTML page like below:\n\n// Rendering the Icon directly into the page isn't very useful.\nReactDOM.render(<Icon name=\"envelope\" />, document.getElementById('icon'))\n\n\n...or they can be composed into more complex components. In the example below, a\nButton component displays a contextual icon on the button itself. The icon  prop\nindicates which image to render, and waiting  displays a spinner.\n\nThe icon is conditionally created and saved to a local variable depending on the\nvalues of the waiting  and icon  props. Notice that JSX can be saved to a\nvariable just like any other Javascript expression.\n\nvar icon = null;\n\nif (props.waiting) {\n    icon = <Icon name=\"spinner\" fixedWidth spin style={iconStyle} />;\n} else if (props.icon) {\n    icon = <Icon name={props.icon} fixedWidth style={iconStyle} />;\n}\n\n\nNext the icon is added to the JSX returned by the function. The value of the\nicon variable may be null, but that's fine. React will ignore any null or\nundefined values.\n\nreturn <button {...elementProps} type=\"button\" onClick={onClick}>{icon}{props.children}</button>;\n\n\nThe snippet below creates a button with an envelope icon and sets the value of \nwaiting  to this.state.waiting. This state value comes from a stateful component\nthat's hosting the button. As the parent component's value for \nthis.state.waiting  changes, the button will be re-rendered with the new prop\nvalues.\n\nvar Button = require('button');\n\n<Button className=\"btn btn-primary\" onClick={this.send} icon=\"envelope\" waiting={this.state.waiting}>Send Message</Button>\n\n\nWrapping Up\nIcon and Button are simple and carry no internal state. That makes them ideal\ncandidates to be implemented as stateless functional components. They can be\nused to build more complex components which in turn can be composed into ever\nmore complex components. Eventually state is thrown into the mix, and you have a\nReact application.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-05-04T13:02:48.000Z","created_by":"1","updated_at":"2016-05-24T02:21:41.000Z","updated_by":"1","published_at":"2016-05-24T02:21:10.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4af","uuid":"fe2eaf7c-5411-4f63-a8bd-419026298575","title":"React: First Impressions","slug":"react-first-impressions","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I'm a [React](https://facebook.github.io/react/) newbie who just completed my first React web app, a rewrite of an internal tool at work. Previously the UI was written in ASP.NET plus lots of JQuery on the client side. It worked well but was starting to show its age.\\n\\nActually this wasn't my first attempt at React. I started porting a web app written in [Knockout](http://knockoutjs.com/) to React last October. It was a side project and a good place to start. After a few days, I had to put it aside due to time constraints.\\n\\nFortunately, I decided to give it [five more minutes](https://signalvnoise.com/posts/3124-give-it-five-minutes), and this time I got it. Once I internalized the design philosophy behind React, using it became a pleasure.\\n\\n#### React Components\\n\\nWhen React proponents tout its benefits, they usually mention the efficiency of its virtual DOM or its a one-way reactive data flow. These features are nice, but for me, React's best aspect is how damn easy it makes building encapsulated components. Everything is a component from the topmost application down to simple widgets. The *right way* is the default rather than something to work toward.\\n\\nReact's approach is much easier to comprehend than say Angular's. For a newcomer Angular can be overwhelming. Do I build a Directive or a Component? According to the [doc](https://docs.angularjs.org/guide/component), an Angular Component is a \\\"special kind of directive.\\\" Why have two? Why not have just Directives? Then there are [Controllers](https://docs.angularjs.org/guide/controller). And [Modules](https://docs.angularjs.org/guide/module).\\n\\nReact is dead simple. You have one way to organize your app: components, and that's it. Sure, there are stateful components and stateless functional components. But there's still only one concept to wrap your head around.\\n\\n#### Components as Common JS Modules\\n\\nReact components lend themselves well to an organizational structure built around [Common JS](http://www.commonjs.org/). Components can be put into their own modules and bundled using [Browserify](http://browserify.org/) or [Webpack](https://webpack.github.io/). Modules are imported and exported with `require` and `module.exports`. The result is a neatly organized development experience.\\n\\nCompare Common JS' management of dependencies to Angular's [dependency injection](https://docs.angularjs.org/guide/di). Since JavaScript isn't a strongly-typed language, Angular's DI layer uses function parameter names to resolve dependencies. That works well until you uglify your JavaScript, and then it completely breaks down. Angular implements a clunky work-around by allowing dependencies to be defined by an array of string values. These values need to be kept in sync with the function parameters. It works but doesn't feel natural. Common JS feels right.\\n\\n#### MV-Whatever\\n\\nUnlike almost every other UI library, React doesn't follow the MV* pattern. Instead it embeds the UI into each component via [JSX](https://facebook.github.io/react/docs/jsx-in-depth.html). At first glance JSX seems strange, but in practice it helps make React components much more encapsulated and reusable. I really like it.\\n\\nI started my career writing desktop applications in VB6. VB6 had ActiveX controls that you could compose into other ActiveX controls and drop them onto a form. They were highly reusable. Building UIs was easy and scaled well to a large team. React components work much the same way. They're easy to compose into more complex components.\\n\\nOne knock against ActiveX controls is they were difficult to test. There wasn't an easy way to mock a control's interaction with the graphics layer. This was one reason why MV* became so popular. By separating the view from the logic, you can provide a mock for the view and test the logic in the controller (or presenter or view model).\\n\\nReact is different from ActiveX controls because it doesn't interact directly with any native UI layer. Instead each component returns a lightweight representation of the UI called the [virtual DOM](https://facebook.github.io/react/docs/glossary.html). This virtual DOM is rendered as actual DOM elements with the [React-Dom library](https://www.npmjs.com/package/react-dom). Testing a React component is as easy as verifying that it produces the correct virtual DOM elements.\\n\\n#### Learning Curve\\n\\nI've had little web development experience considering my 16 year career. As I mentioned earlier, my first React app was a complete rewrite of an internal work tool. I started it on January 4. The date sticks with me because React and its tools were new territory. In four months I was able to learn React, navigate the Node/NPM/JS tooling landscape, write an app, and along the way build out a library of reusable components. React enabled me to do that. I doubt I could have worked so quickly in Angular, Ember, or Knockout.\\n\\n#### What Didn't Go Well\\n\\nOne thing I struggled with was how to manage state. React offers no guidance on state management. It's just a view library. Terms like Flux and Redux kept popping up during my research, but I ignored them so I wouldn't get overwhelmed.\\n\\nState management is one of those problems that snuck up on me. In the early stages, the app was small, and state was easy to manage. As the app grew, I encapsulated smaller pieces of data into a few objects. Actions on the objects became methods. I was pleased with the proper OO design...until these objects had to be passed through layers of components to get to where they were needed. To solve this, I introduced a service bus using Node's EventEmitter. The end result was state encapsulated in several chunky JavaScript objects with some actions defined as methods and others as events.\\n\\nThis state mishmash works for now but won't scale. A better approach seems to be [Redux](http://redux.js.org). It provides a consistent predictable way to manage application state.\\n\\n#### The Right Way\\n\\nToday I'm all in with React. I recently began my second app, and I look forward to refining my experience. I love the simplicity and reusability of React components. They can be used to build more complex components which in turn can be composed into ever more complex components. Eventually state is thrown into the mix and you have a React application. That's the beauty of React. The *right way* is the default.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I'm a <a href=\"https://facebook.github.io/react/\">React</a> newbie who just completed my first React web app, a rewrite of an internal tool at work. Previously the UI was written in <a href=\"http://ASP.NET\">ASP.NET</a> plus lots of JQuery on the client side. It worked well but was starting to show its age.</p>\n<p>Actually this wasn't my first attempt at React. I started porting a web app written in <a href=\"http://knockoutjs.com/\">Knockout</a> to React last October. It was a side project and a good place to start. After a few days, I had to put it aside due to time constraints.</p>\n<p>Fortunately, I decided to give it <a href=\"https://signalvnoise.com/posts/3124-give-it-five-minutes\">five more minutes</a>, and this time I got it. Once I internalized the design philosophy behind React, using it became a pleasure.</p>\n<h4 id=\"reactcomponents\">React Components</h4>\n<p>When React proponents tout its benefits, they usually mention the efficiency of its virtual DOM or its a one-way reactive data flow. These features are nice, but for me, React's best aspect is how damn easy it makes building encapsulated components. Everything is a component from the topmost application down to simple widgets. The <em>right way</em> is the default rather than something to work toward.</p>\n<p>React's approach is much easier to comprehend than say Angular's. For a newcomer Angular can be overwhelming. Do I build a Directive or a Component? According to the <a href=\"https://docs.angularjs.org/guide/component\">doc</a>, an Angular Component is a &quot;special kind of directive.&quot; Why have two? Why not have just Directives? Then there are <a href=\"https://docs.angularjs.org/guide/controller\">Controllers</a>. And <a href=\"https://docs.angularjs.org/guide/module\">Modules</a>.</p>\n<p>React is dead simple. You have one way to organize your app: components, and that's it. Sure, there are stateful components and stateless functional components. But there's still only one concept to wrap your head around.</p>\n<h4 id=\"componentsascommonjsmodules\">Components as Common JS Modules</h4>\n<p>React components lend themselves well to an organizational structure built around <a href=\"http://www.commonjs.org/\">Common JS</a>. Components can be put into their own modules and bundled using <a href=\"http://browserify.org/\">Browserify</a> or <a href=\"https://webpack.github.io/\">Webpack</a>. Modules are imported and exported with <code>require</code> and <code>module.exports</code>. The result is a neatly organized development experience.</p>\n<p>Compare Common JS' management of dependencies to Angular's <a href=\"https://docs.angularjs.org/guide/di\">dependency injection</a>. Since JavaScript isn't a strongly-typed language, Angular's DI layer uses function parameter names to resolve dependencies. That works well until you uglify your JavaScript, and then it completely breaks down. Angular implements a clunky work-around by allowing dependencies to be defined by an array of string values. These values need to be kept in sync with the function parameters. It works but doesn't feel natural. Common JS feels right.</p>\n<h4 id=\"mvwhatever\">MV-Whatever</h4>\n<p>Unlike almost every other UI library, React doesn't follow the MV* pattern. Instead it embeds the UI into each component via <a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\">JSX</a>. At first glance JSX seems strange, but in practice it helps make React components much more encapsulated and reusable. I really like it.</p>\n<p>I started my career writing desktop applications in VB6. VB6 had ActiveX controls that you could compose into other ActiveX controls and drop them onto a form. They were highly reusable. Building UIs was easy and scaled well to a large team. React components work much the same way. They're easy to compose into more complex components.</p>\n<p>One knock against ActiveX controls is they were difficult to test. There wasn't an easy way to mock a control's interaction with the graphics layer. This was one reason why MV* became so popular. By separating the view from the logic, you can provide a mock for the view and test the logic in the controller (or presenter or view model).</p>\n<p>React is different from ActiveX controls because it doesn't interact directly with any native UI layer. Instead each component returns a lightweight representation of the UI called the <a href=\"https://facebook.github.io/react/docs/glossary.html\">virtual DOM</a>. This virtual DOM is rendered as actual DOM elements with the <a href=\"https://www.npmjs.com/package/react-dom\">React-Dom library</a>. Testing a React component is as easy as verifying that it produces the correct virtual DOM elements.</p>\n<h4 id=\"learningcurve\">Learning Curve</h4>\n<p>I've had little web development experience considering my 16 year career. As I mentioned earlier, my first React app was a complete rewrite of an internal work tool. I started it on January 4. The date sticks with me because React and its tools were new territory. In four months I was able to learn React, navigate the Node/NPM/JS tooling landscape, write an app, and along the way build out a library of reusable components. React enabled me to do that. I doubt I could have worked so quickly in Angular, Ember, or Knockout.</p>\n<h4 id=\"whatdidntgowell\">What Didn't Go Well</h4>\n<p>One thing I struggled with was how to manage state. React offers no guidance on state management. It's just a view library. Terms like Flux and Redux kept popping up during my research, but I ignored them so I wouldn't get overwhelmed.</p>\n<p>State management is one of those problems that snuck up on me. In the early stages, the app was small, and state was easy to manage. As the app grew, I encapsulated smaller pieces of data into a few objects. Actions on the objects became methods. I was pleased with the proper OO design...until these objects had to be passed through layers of components to get to where they were needed. To solve this, I introduced a service bus using Node's EventEmitter. The end result was state encapsulated in several chunky JavaScript objects with some actions defined as methods and others as events.</p>\n<p>This state mishmash works for now but won't scale. A better approach seems to be <a href=\"http://redux.js.org\">Redux</a>. It provides a consistent predictable way to manage application state.</p>\n<h4 id=\"therightway\">The Right Way</h4>\n<p>Today I'm all in with React. I recently began my second app, and I look forward to refining my experience. I love the simplicity and reusability of React components. They can be used to build more complex components which in turn can be composed into ever more complex components. Eventually state is thrown into the mix and you have a React application. That's the beauty of React. The <em>right way</em> is the default.</p>\n</div>","amp":"72","plaintext":"I'm a React [https://facebook.github.io/react/]  newbie who just completed my\nfirst React web app, a rewrite of an internal tool at work. Previously the UI\nwas written in ASP.NET [http://ASP.NET]  plus lots of JQuery on the client side.\nIt worked well but was starting to show its age.\n\nActually this wasn't my first attempt at React. I started porting a web app\nwritten in Knockout [http://knockoutjs.com/]  to React last October. It was a\nside project and a good place to start. After a few days, I had to put it aside\ndue to time constraints.\n\nFortunately, I decided to give it five more minutes\n[https://signalvnoise.com/posts/3124-give-it-five-minutes], and this time I got\nit. Once I internalized the design philosophy behind React, using it became a\npleasure.\n\nReact Components\nWhen React proponents tout its benefits, they usually mention the efficiency of\nits virtual DOM or its a one-way reactive data flow. These features are nice,\nbut for me, React's best aspect is how damn easy it makes building encapsulated\ncomponents. Everything is a component from the topmost application down to\nsimple widgets. The right way  is the default rather than something to work\ntoward.\n\nReact's approach is much easier to comprehend than say Angular's. For a newcomer\nAngular can be overwhelming. Do I build a Directive or a Component? According to\nthe doc [https://docs.angularjs.org/guide/component], an Angular Component is a\n\"special kind of directive.\" Why have two? Why not have just Directives? Then\nthere are Controllers [https://docs.angularjs.org/guide/controller]. And Modules\n[https://docs.angularjs.org/guide/module].\n\nReact is dead simple. You have one way to organize your app: components, and\nthat's it. Sure, there are stateful components and stateless functional\ncomponents. But there's still only one concept to wrap your head around.\n\nComponents as Common JS Modules\nReact components lend themselves well to an organizational structure built\naround Common JS [http://www.commonjs.org/]. Components can be put into their\nown modules and bundled using Browserify [http://browserify.org/]  or Webpack\n[https://webpack.github.io/]. Modules are imported and exported with require \nand module.exports. The result is a neatly organized development experience.\n\nCompare Common JS' management of dependencies to Angular's dependency injection\n[https://docs.angularjs.org/guide/di]. Since JavaScript isn't a strongly-typed\nlanguage, Angular's DI layer uses function parameter names to resolve\ndependencies. That works well until you uglify your JavaScript, and then it\ncompletely breaks down. Angular implements a clunky work-around by allowing\ndependencies to be defined by an array of string values. These values need to be\nkept in sync with the function parameters. It works but doesn't feel natural.\nCommon JS feels right.\n\nMV-Whatever\nUnlike almost every other UI library, React doesn't follow the MV* pattern.\nInstead it embeds the UI into each component via JSX\n[https://facebook.github.io/react/docs/jsx-in-depth.html]. At first glance JSX\nseems strange, but in practice it helps make React components much more\nencapsulated and reusable. I really like it.\n\nI started my career writing desktop applications in VB6. VB6 had ActiveX\ncontrols that you could compose into other ActiveX controls and drop them onto a\nform. They were highly reusable. Building UIs was easy and scaled well to a\nlarge team. React components work much the same way. They're easy to compose\ninto more complex components.\n\nOne knock against ActiveX controls is they were difficult to test. There wasn't\nan easy way to mock a control's interaction with the graphics layer. This was\none reason why MV* became so popular. By separating the view from the logic, you\ncan provide a mock for the view and test the logic in the controller (or\npresenter or view model).\n\nReact is different from ActiveX controls because it doesn't interact directly\nwith any native UI layer. Instead each component returns a lightweight\nrepresentation of the UI called the virtual DOM\n[https://facebook.github.io/react/docs/glossary.html]. This virtual DOM is\nrendered as actual DOM elements with the React-Dom library\n[https://www.npmjs.com/package/react-dom]. Testing a React component is as easy\nas verifying that it produces the correct virtual DOM elements.\n\nLearning Curve\nI've had little web development experience considering my 16 year career. As I\nmentioned earlier, my first React app was a complete rewrite of an internal work\ntool. I started it on January 4. The date sticks with me because React and its\ntools were new territory. In four months I was able to learn React, navigate the\nNode/NPM/JS tooling landscape, write an app, and along the way build out a\nlibrary of reusable components. React enabled me to do that. I doubt I could\nhave worked so quickly in Angular, Ember, or Knockout.\n\nWhat Didn't Go Well\nOne thing I struggled with was how to manage state. React offers no guidance on\nstate management. It's just a view library. Terms like Flux and Redux kept\npopping up during my research, but I ignored them so I wouldn't get overwhelmed.\n\nState management is one of those problems that snuck up on me. In the early\nstages, the app was small, and state was easy to manage. As the app grew, I\nencapsulated smaller pieces of data into a few objects. Actions on the objects\nbecame methods. I was pleased with the proper OO design...until these objects\nhad to be passed through layers of components to get to where they were needed.\nTo solve this, I introduced a service bus using Node's EventEmitter. The end\nresult was state encapsulated in several chunky JavaScript objects with some\nactions defined as methods and others as events.\n\nThis state mishmash works for now but won't scale. A better approach seems to be\n Redux [http://redux.js.org]. It provides a consistent predictable way to manage\napplication state.\n\nThe Right Way\nToday I'm all in with React. I recently began my second app, and I look forward\nto refining my experience. I love the simplicity and reusability of React\ncomponents. They can be used to build more complex components which in turn can\nbe composed into ever more complex components. Eventually state is thrown into\nthe mix and you have a React application. That's the beauty of React. The right\nway  is the default.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-05-05T22:57:03.000Z","created_by":"1","updated_at":"2016-05-16T13:30:13.000Z","updated_by":"1","published_at":"2016-05-16T13:30:13.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b0","uuid":"3e66266e-03c2-463c-9061-af0a6076e4fb","title":"How to Convert a React Mixin to a Component","slug":"how-to-convert-a-react-mixin-to-a-component","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In a [previous post](http://joebuschmann.com/react-by-example-mixins/) I covered an example of a React **mixin** which I called ClickAway that detected clicks anywhere outside of a component. I also mentioned mixins are not React's preferred method of reuse. Composition with components is the way to go, and [mixins are on the way out](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.rdurthwrj).\\n\\nWith this in mind, I decided to convert the ClickAway mixin into a component. I was skeptical about how clean the new implementation would be, but it turned out well. As you'll see, the equivalent component version better enables composition and is more explicit.\\n\\n#### ClickAway as a Mixin\\n\\nFirst, here's the mixin code from my previous post. It exports an object with two React lifecycle methods: componentDidMount and componentWillUnmount. These methods set up and tear down the click detection code.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9a1944ea8c8f36557234.js\\\"></script>\\n\\nAnd here's how you would use it. Notice the `onClickAway` method in the popup component is required by the mixin, but there's nothing explicitly defining this requirement. This is one of the weaknesses of a mixin. There is no explicit contract between it and the target component.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/496739e921fa4fc6d0c4d76aa8c37a70.js\\\"></script>\\n\\n#### ClickAway as a Component\\n\\nMigrating ClickAway to a component solves two issues. One, it enables composition, and two, it uses props and PropTypes to define an explicit contract.\\n\\nMost of the code doesn't change much. The helper functions `hasId` and `elementWithIdExists` port over as is. I used `React.createClass` with the same implementations for the `componentDidMount` and `componentWillUnmount` lifecycle methods.\\n\\nThere are two differences. First, as a component, it needs to have a `render` method. In this case it's simple. ClickAway doesn't alter the look of the UI so it simply returns its child elements.\\n\\n```\\n    render: function () {\\n        return this.props.children;\\n    }\\n```\\n\\nSecond, the `onClickAway` callback is passed in as a prop value. This is more explicit than the mixin implementation where it is a method of the component. PropTypes further define it as a required function.\\n\\n```\\n    propTypes: {\\n        onClickAway: React.PropTypes.func.isRequired\\n    }\\n```\\n\\n```\\n    self.clickAway = function (event) {\\n        if (!elementWithIdExists(event.target, elementId) &&\\n            self.props.onClickAway) {\\n            self.props.onClickAway(event);\\n        }\\n    };\\n```\\n\\nHere's the full implementation.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/ec30f22d9bb5a83db6c73691374417db.js\\\"></script>\\n\\n#### Using the Component\\n\\nNow that it's a component, ClickAway needs to be composed with other components. In the case of the popup, it wraps the return value of `render()` with a `<ClickAway>` JSX element. It also provides the `onClickAway` callback as a prop value.\\n\\n```\\n<ClickAway onClickAway={this.props.onClose}>\\n    <div {...elementProps}>\\n        {this.props.children}\\n    </div>\\n</ClickAway>\\n```\\nBelow is the new implementation of the popup component.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1c75521aa233fd41fed881eaa8aa69f3.js\\\"></script>\\n\\n#### Components > Mixins\\n\\nThis exercise convinced me that components are indeed better than mixins. They enable composition and have an explicit contract. My next step is to convert the mixins in my current projects.\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In a <a href=\"http://joebuschmann.com/react-by-example-mixins/\">previous post</a> I covered an example of a React <strong>mixin</strong> which I called ClickAway that detected clicks anywhere outside of a component. I also mentioned mixins are not React's preferred method of reuse. Composition with components is the way to go, and <a href=\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.rdurthwrj\">mixins are on the way out</a>.</p>\n<p>With this in mind, I decided to convert the ClickAway mixin into a component. I was skeptical about how clean the new implementation would be, but it turned out well. As you'll see, the equivalent component version better enables composition and is more explicit.</p>\n<h4 id=\"clickawayasamixin\">ClickAway as a Mixin</h4>\n<p>First, here's the mixin code from my previous post. It exports an object with two React lifecycle methods: componentDidMount and componentWillUnmount. These methods set up and tear down the click detection code.</p>\n<script src=\"https://gist.github.com/joebuschmann/9a1944ea8c8f36557234.js\"></script>\n<p>And here's how you would use it. Notice the <code>onClickAway</code> method in the popup component is required by the mixin, but there's nothing explicitly defining this requirement. This is one of the weaknesses of a mixin. There is no explicit contract between it and the target component.</p>\n<script src=\"https://gist.github.com/joebuschmann/496739e921fa4fc6d0c4d76aa8c37a70.js\"></script>\n<h4 id=\"clickawayasacomponent\">ClickAway as a Component</h4>\n<p>Migrating ClickAway to a component solves two issues. One, it enables composition, and two, it uses props and PropTypes to define an explicit contract.</p>\n<p>Most of the code doesn't change much. The helper functions <code>hasId</code> and <code>elementWithIdExists</code> port over as is. I used <code>React.createClass</code> with the same implementations for the <code>componentDidMount</code> and <code>componentWillUnmount</code> lifecycle methods.</p>\n<p>There are two differences. First, as a component, it needs to have a <code>render</code> method. In this case it's simple. ClickAway doesn't alter the look of the UI so it simply returns its child elements.</p>\n<pre><code>    render: function () {\n        return this.props.children;\n    }\n</code></pre>\n<p>Second, the <code>onClickAway</code> callback is passed in as a prop value. This is more explicit than the mixin implementation where it is a method of the component. PropTypes further define it as a required function.</p>\n<pre><code>    propTypes: {\n        onClickAway: React.PropTypes.func.isRequired\n    }\n</code></pre>\n<pre><code>    self.clickAway = function (event) {\n        if (!elementWithIdExists(event.target, elementId) &amp;&amp;\n            self.props.onClickAway) {\n            self.props.onClickAway(event);\n        }\n    };\n</code></pre>\n<p>Here's the full implementation.</p>\n<script src=\"https://gist.github.com/joebuschmann/ec30f22d9bb5a83db6c73691374417db.js\"></script>\n<h4 id=\"usingthecomponent\">Using the Component</h4>\n<p>Now that it's a component, ClickAway needs to be composed with other components. In the case of the popup, it wraps the return value of <code>render()</code> with a <code>&lt;ClickAway&gt;</code> JSX element. It also provides the <code>onClickAway</code> callback as a prop value.</p>\n<pre><code>&lt;ClickAway onClickAway={this.props.onClose}&gt;\n    &lt;div {...elementProps}&gt;\n        {this.props.children}\n    &lt;/div&gt;\n&lt;/ClickAway&gt;\n</code></pre>\n<p>Below is the new implementation of the popup component.</p>\n<script src=\"https://gist.github.com/joebuschmann/1c75521aa233fd41fed881eaa8aa69f3.js\"></script>\n<h4 id=\"componentsmixins\">Components &gt; Mixins</h4>\n<p>This exercise convinced me that components are indeed better than mixins. They enable composition and have an explicit contract. My next step is to convert the mixins in my current projects.</p>\n</div>","amp":"73","plaintext":"In a previous post [http://joebuschmann.com/react-by-example-mixins/]  I covered\nan example of a React mixin  which I called ClickAway that detected clicks\nanywhere outside of a component. I also mentioned mixins are not React's\npreferred method of reuse. Composition with components is the way to go, and \nmixins are on the way out.\n\nWith this in mind, I decided to convert the ClickAway mixin into a component. I\nwas skeptical about how clean the new implementation would be, but it turned out\nwell. As you'll see, the equivalent component version better enables composition\nand is more explicit.\n\nClickAway as a Mixin\nFirst, here's the mixin code from my previous post. It exports an object with\ntwo React lifecycle methods: componentDidMount and componentWillUnmount. These\nmethods set up and tear down the click detection code.\n\nAnd here's how you would use it. Notice the onClickAway  method in the popup\ncomponent is required by the mixin, but there's nothing explicitly defining this\nrequirement. This is one of the weaknesses of a mixin. There is no explicit\ncontract between it and the target component.\n\nClickAway as a Component\nMigrating ClickAway to a component solves two issues. One, it enables\ncomposition, and two, it uses props and PropTypes to define an explicit\ncontract.\n\nMost of the code doesn't change much. The helper functions hasId  and \nelementWithIdExists  port over as is. I used React.createClass  with the same\nimplementations for the componentDidMount  and componentWillUnmount  lifecycle\nmethods.\n\nThere are two differences. First, as a component, it needs to have a render \nmethod. In this case it's simple. ClickAway doesn't alter the look of the UI so\nit simply returns its child elements.\n\n    render: function () {\n        return this.props.children;\n    }\n\n\nSecond, the onClickAway  callback is passed in as a prop value. This is more\nexplicit than the mixin implementation where it is a method of the component.\nPropTypes further define it as a required function.\n\n    propTypes: {\n        onClickAway: React.PropTypes.func.isRequired\n    }\n\n\n    self.clickAway = function (event) {\n        if (!elementWithIdExists(event.target, elementId) &&\n            self.props.onClickAway) {\n            self.props.onClickAway(event);\n        }\n    };\n\n\nHere's the full implementation.\n\nUsing the Component\nNow that it's a component, ClickAway needs to be composed with other components.\nIn the case of the popup, it wraps the return value of render()  with a \n<ClickAway>  JSX element. It also provides the onClickAway  callback as a prop\nvalue.\n\n<ClickAway onClickAway={this.props.onClose}>\n    <div {...elementProps}>\n        {this.props.children}\n    </div>\n</ClickAway>\n\n\nBelow is the new implementation of the popup component.\n\nComponents > Mixins\nThis exercise convinced me that components are indeed better than mixins. They\nenable composition and have an explicit contract. My next step is to convert the\nmixins in my current projects.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-06-16T02:47:26.000Z","created_by":"1","updated_at":"2016-06-22T13:39:42.000Z","updated_by":"1","published_at":"2016-06-22T13:39:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b1","uuid":"1924d493-1dbc-487a-b760-5b3b95349adc","title":"In Defense of JSX","slug":"in-defense-of-jsx","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"JSX is the much maligned JavaScript syntax extension that tells React how to build the UI. It gets translated into JavaScript which then builds out the virtual DOM. Later the virtual DOM is translated into the real DOM, and you've got a UI.\\n\\nFor some reason many people don't like JSX. Their criticism usually goes along the lines of: *JSX is ugly and you shouldn't mix the view and controller. You should have separation of concerns (aka MVC) for better reuse.* Well, after building two medium-sized React apps, I think mixing the view and controller is exactly what you should be doing. This approach leads to components which are highly reusable.\\n\\n#### Seriously - Why MVC?\\n\\nBefore I continue my defense of JSX, a bit about MVC (or MVVM or MVP). The main goal of the MVC pattern is to separate the concerns of the UI into a model, view, and controller. The model is the data that drives the UI. The view is what gets rendered to the screen. The controller is the glue holding it all together.\\n\\nLoose coupling is a purported benefit of MVC, but the reality is it leads to plenty of coupling between the model, view, and controller. That's been my experience anyway. Maybe I haven't worked on the right projects or with the right people. I've only seen views and controllers reused in the most trivial of cases. Just because MVC takes all the JavaScript out of the HTML doesn't mean the three parts can exist separately. They still need each other to produce an app.\\n\\n**Don't get me wrong. I'm very much for separation of concerns. I just think MVC takes it too far.**\\n\\nWhat about JSX? What are some of the critiques and why are they misguided?\\n\\n#### JSX Couples the Model, View, and Controller\\n\\nDan Yoder over at Panda Strike wrote a little over a year ago about why [React is a terrible idea](https://www.pandastrike.com/posts/20150311-react-bad-idea). The post is well-written, and I recommend reading it. He makes makes good points especially about web components being the future. But I disagree with his criticism of JSX.\\n\\n>**Sure, you can use JSX if you want, but that's the worst part of React anyway. JSX wants you to couple your view with the model and controller. It's a bad idea. Don't do that.** - Dan Yoder\\n\\nLet's for a moment put aside the conventional wisdom of decoupling the model, view, and controller. React components, including JSX, can be great examples of separation of concerns. A textbox component is concerned only with rendering a textbox. An address component is concerned only with displaying and editing an address. They can be plugged into the app in any page. Each component defines a contract for receiving data. Breaking components down into MVC parts doesn't add much. In fact, it makes things worse by adding unnecessary complexity.\\n\\n**I'll take reusable components over getting JavaScript out of my HTML.**\\n\\n#### JSX Is Ugly\\n\\nJSX is essentially XML with some extensions to embed code, otherwise it looks much like HTML. If JSX is ugly, then so is HTML. To me, JSX isn't any worse than HTML littered with *ng-** or *data-** attributes. Consider this example from the [AngularJS Developer Guide](https://docs.angularjs.org/guide/controller). Note `ng-controller`, `ng-click`, and the `{{ }}` binding syntax.\\n\\n```\\n<div ng-controller=\\\"SpicyController\\\">\\n <button ng-click=\\\"chiliSpicy()\\\">Chili</button>\\n <button ng-click=\\\"jalapenoSpicy()\\\">Jalapeño</button>\\n <p>The food is {{spice}} spicy!</p>\\n</div>\\n```\\n\\nThe equivalent JSX looks like this:\\n\\n```\\n<div>\\n <button onClick={chiliSpicy()}>Chili</button>\\n <button onClick={jalapenoSpicy()}>Jalapeño</button>\\n <p>The food is {this.state.spice} spicy!</p>\\n</div>\\n```\\n\\nVisually, they're very similar. It's difficult to make the case that one is worse than the other.\\n\\n#### className and htmlFor\\n\\nRelated to the previous point is the use of **className** and **htmlFor**. The JSX designers couldn't use the keywords **class** or **for** since they are also keywords in JavaScript. JSX introduces **className** and **htmlFor** to work around this. Sure, it feels a bit hacky but is it really that big of a deal?\\n\\n#### Transpilation\\n\\nJSX has a transpilation step, but isn't transpilation becoming more common anyway? If you're using Typescript or ES6, you'll need to transpile. Why not throw in JSX?\\n\\n**UPDATE (8/29/2016)** - In my original post, I failed to emphasize a very important point. Unlike the equivalent HTML, JSX is checked for correctness by the transpiler. This eliminates many of the silent binding errors present in native HTML and frameworks like Angular.\\n\\n#### MVC Is Needed for Testing\\n\\nBelow is an example of a unit test for a React button component that uses [Facebook's Jest, a unit testing framework](https://facebook.github.io/jest/). It supports rendering Font Awesome icons and a wait spinner onto a button. The test is as straightforward as they come. The component is rendered into a string of HTML using `ReactDOMServer.renderToStaticMarkup()` and then validated against the expected markup.\\n\\n**How would MVC make this any easier?**\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9e54dd93900df7be4e0110808eb2def3.js\\\"></script>\\n\\n#### Long Live JSX\\n\\nWell, not really.\\n\\nEventually JSX critics will get their wish. React along with Angular, Knockout, and other UI libraries will be replaced with a better standards-based approach. [Web Components](https://www.google.com/search?q=web+component) is a set of W3C standards currently in working draft status. They include custom elements, HTML templates, HTML imports, and the shadow DOM. The specification is still in progress and [browser support is patchy](http://caniuse.com/#feat=custom-elements). In the meantime, React along with JSX feels like the best choice.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>JSX is the much maligned JavaScript syntax extension that tells React how to build the UI. It gets translated into JavaScript which then builds out the virtual DOM. Later the virtual DOM is translated into the real DOM, and you've got a UI.</p>\n<p>For some reason many people don't like JSX. Their criticism usually goes along the lines of: <em>JSX is ugly and you shouldn't mix the view and controller. You should have separation of concerns (aka MVC) for better reuse.</em> Well, after building two medium-sized React apps, I think mixing the view and controller is exactly what you should be doing. This approach leads to components which are highly reusable.</p>\n<h4 id=\"seriouslywhymvc\">Seriously - Why MVC?</h4>\n<p>Before I continue my defense of JSX, a bit about MVC (or MVVM or MVP). The main goal of the MVC pattern is to separate the concerns of the UI into a model, view, and controller. The model is the data that drives the UI. The view is what gets rendered to the screen. The controller is the glue holding it all together.</p>\n<p>Loose coupling is a purported benefit of MVC, but the reality is it leads to plenty of coupling between the model, view, and controller. That's been my experience anyway. Maybe I haven't worked on the right projects or with the right people. I've only seen views and controllers reused in the most trivial of cases. Just because MVC takes all the JavaScript out of the HTML doesn't mean the three parts can exist separately. They still need each other to produce an app.</p>\n<p><strong>Don't get me wrong. I'm very much for separation of concerns. I just think MVC takes it too far.</strong></p>\n<p>What about JSX? What are some of the critiques and why are they misguided?</p>\n<h4 id=\"jsxcouplesthemodelviewandcontroller\">JSX Couples the Model, View, and Controller</h4>\n<p>Dan Yoder over at Panda Strike wrote a little over a year ago about why <a href=\"https://www.pandastrike.com/posts/20150311-react-bad-idea\">React is a terrible idea</a>. The post is well-written, and I recommend reading it. He makes makes good points especially about web components being the future. But I disagree with his criticism of JSX.</p>\n<blockquote>\n<p><strong>Sure, you can use JSX if you want, but that's the worst part of React anyway. JSX wants you to couple your view with the model and controller. It's a bad idea. Don't do that.</strong> - Dan Yoder</p>\n</blockquote>\n<p>Let's for a moment put aside the conventional wisdom of decoupling the model, view, and controller. React components, including JSX, can be great examples of separation of concerns. A textbox component is concerned only with rendering a textbox. An address component is concerned only with displaying and editing an address. They can be plugged into the app in any page. Each component defines a contract for receiving data. Breaking components down into MVC parts doesn't add much. In fact, it makes things worse by adding unnecessary complexity.</p>\n<p><strong>I'll take reusable components over getting JavaScript out of my HTML.</strong></p>\n<h4 id=\"jsxisugly\">JSX Is Ugly</h4>\n<p>JSX is essentially XML with some extensions to embed code, otherwise it looks much like HTML. If JSX is ugly, then so is HTML. To me, JSX isn't any worse than HTML littered with <em>ng-</em>* or <em>data-</em>* attributes. Consider this example from the <a href=\"https://docs.angularjs.org/guide/controller\">AngularJS Developer Guide</a>. Note <code>ng-controller</code>, <code>ng-click</code>, and the <code>{{ }}</code> binding syntax.</p>\n<pre><code>&lt;div ng-controller=&quot;SpicyController&quot;&gt;\n &lt;button ng-click=&quot;chiliSpicy()&quot;&gt;Chili&lt;/button&gt;\n &lt;button ng-click=&quot;jalapenoSpicy()&quot;&gt;Jalapeño&lt;/button&gt;\n &lt;p&gt;The food is {{spice}} spicy!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>The equivalent JSX looks like this:</p>\n<pre><code>&lt;div&gt;\n &lt;button onClick={chiliSpicy()}&gt;Chili&lt;/button&gt;\n &lt;button onClick={jalapenoSpicy()}&gt;Jalapeño&lt;/button&gt;\n &lt;p&gt;The food is {this.state.spice} spicy!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Visually, they're very similar. It's difficult to make the case that one is worse than the other.</p>\n<h4 id=\"classnameandhtmlfor\">className and htmlFor</h4>\n<p>Related to the previous point is the use of <strong>className</strong> and <strong>htmlFor</strong>. The JSX designers couldn't use the keywords <strong>class</strong> or <strong>for</strong> since they are also keywords in JavaScript. JSX introduces <strong>className</strong> and <strong>htmlFor</strong> to work around this. Sure, it feels a bit hacky but is it really that big of a deal?</p>\n<h4 id=\"transpilation\">Transpilation</h4>\n<p>JSX has a transpilation step, but isn't transpilation becoming more common anyway? If you're using Typescript or ES6, you'll need to transpile. Why not throw in JSX?</p>\n<p><strong>UPDATE (8/29/2016)</strong> - In my original post, I failed to emphasize a very important point. Unlike the equivalent HTML, JSX is checked for correctness by the transpiler. This eliminates many of the silent binding errors present in native HTML and frameworks like Angular.</p>\n<h4 id=\"mvcisneededfortesting\">MVC Is Needed for Testing</h4>\n<p>Below is an example of a unit test for a React button component that uses <a href=\"https://facebook.github.io/jest/\">Facebook's Jest, a unit testing framework</a>. It supports rendering Font Awesome icons and a wait spinner onto a button. The test is as straightforward as they come. The component is rendered into a string of HTML using <code>ReactDOMServer.renderToStaticMarkup()</code> and then validated against the expected markup.</p>\n<p><strong>How would MVC make this any easier?</strong></p>\n<script src=\"https://gist.github.com/joebuschmann/9e54dd93900df7be4e0110808eb2def3.js\"></script>\n<h4 id=\"longlivejsx\">Long Live JSX</h4>\n<p>Well, not really.</p>\n<p>Eventually JSX critics will get their wish. React along with Angular, Knockout, and other UI libraries will be replaced with a better standards-based approach. <a href=\"https://www.google.com/search?q=web+component\">Web Components</a> is a set of W3C standards currently in working draft status. They include custom elements, HTML templates, HTML imports, and the shadow DOM. The specification is still in progress and <a href=\"http://caniuse.com/#feat=custom-elements\">browser support is patchy</a>. In the meantime, React along with JSX feels like the best choice.</p>\n</div>","amp":"74","plaintext":"JSX is the much maligned JavaScript syntax extension that tells React how to\nbuild the UI. It gets translated into JavaScript which then builds out the\nvirtual DOM. Later the virtual DOM is translated into the real DOM, and you've\ngot a UI.\n\nFor some reason many people don't like JSX. Their criticism usually goes along\nthe lines of: JSX is ugly and you shouldn't mix the view and controller. You\nshould have separation of concerns (aka MVC) for better reuse.  Well, after\nbuilding two medium-sized React apps, I think mixing the view and controller is\nexactly what you should be doing. This approach leads to components which are\nhighly reusable.\n\nSeriously - Why MVC?\nBefore I continue my defense of JSX, a bit about MVC (or MVVM or MVP). The main\ngoal of the MVC pattern is to separate the concerns of the UI into a model,\nview, and controller. The model is the data that drives the UI. The view is what\ngets rendered to the screen. The controller is the glue holding it all together.\n\nLoose coupling is a purported benefit of MVC, but the reality is it leads to\nplenty of coupling between the model, view, and controller. That's been my\nexperience anyway. Maybe I haven't worked on the right projects or with the\nright people. I've only seen views and controllers reused in the most trivial of\ncases. Just because MVC takes all the JavaScript out of the HTML doesn't mean\nthe three parts can exist separately. They still need each other to produce an\napp.\n\nDon't get me wrong. I'm very much for separation of concerns. I just think MVC\ntakes it too far.\n\nWhat about JSX? What are some of the critiques and why are they misguided?\n\nJSX Couples the Model, View, and Controller\nDan Yoder over at Panda Strike wrote a little over a year ago about why React\nis\na terrible idea [https://www.pandastrike.com/posts/20150311-react-bad-idea]. The\npost is well-written, and I recommend reading it. He makes makes good points\nespecially about web components being the future. But I disagree with his\ncriticism of JSX.\n\nSure, you can use JSX if you want, but that's the worst part of React anyway.\nJSX wants you to couple your view with the model and controller. It's a bad\nidea. Don't do that.  - Dan Yoder\n\nLet's for a moment put aside the conventional wisdom of decoupling the model,\nview, and controller. React components, including JSX, can be great examples of\nseparation of concerns. A textbox component is concerned only with rendering a\ntextbox. An address component is concerned only with displaying and editing an\naddress. They can be plugged into the app in any page. Each component defines a\ncontract for receiving data. Breaking components down into MVC parts doesn't add\nmuch. In fact, it makes things worse by adding unnecessary complexity.\n\nI'll take reusable components over getting JavaScript out of my HTML.\n\nJSX Is Ugly\nJSX is essentially XML with some extensions to embed code, otherwise it looks\nmuch like HTML. If JSX is ugly, then so is HTML. To me, JSX isn't any worse than\nHTML littered with ng-* or data-* attributes. Consider this example from the \nAngularJS Developer Guide [https://docs.angularjs.org/guide/controller]. Note \nng-controller, ng-click, and the {{ }}  binding syntax.\n\n<div ng-controller=\"SpicyController\">\n <button ng-click=\"chiliSpicy()\">Chili</button>\n <button ng-click=\"jalapenoSpicy()\">Jalapeño</button>\n <p>The food is {{spice}} spicy!</p>\n</div>\n\n\nThe equivalent JSX looks like this:\n\n<div>\n <button onClick={chiliSpicy()}>Chili</button>\n <button onClick={jalapenoSpicy()}>Jalapeño</button>\n <p>The food is {this.state.spice} spicy!</p>\n</div>\n\n\nVisually, they're very similar. It's difficult to make the case that one is\nworse than the other.\n\nclassName and htmlFor\nRelated to the previous point is the use of className  and htmlFor. The JSX\ndesigners couldn't use the keywords class  or for  since they are also keywords\nin JavaScript. JSX introduces className  and htmlFor  to work around this. Sure,\nit feels a bit hacky but is it really that big of a deal?\n\nTranspilation\nJSX has a transpilation step, but isn't transpilation becoming more common\nanyway? If you're using Typescript or ES6, you'll need to transpile. Why not\nthrow in JSX?\n\nUPDATE (8/29/2016)  - In my original post, I failed to emphasize a very\nimportant point. Unlike the equivalent HTML, JSX is checked for correctness by\nthe transpiler. This eliminates many of the silent binding errors present in\nnative HTML and frameworks like Angular.\n\nMVC Is Needed for Testing\nBelow is an example of a unit test for a React button component that uses \nFacebook's Jest, a unit testing framework [https://facebook.github.io/jest/]. It\nsupports rendering Font Awesome icons and a wait spinner onto a button. The test\nis as straightforward as they come. The component is rendered into a string of\nHTML using ReactDOMServer.renderToStaticMarkup()  and then validated against the\nexpected markup.\n\nHow would MVC make this any easier?\n\nLong Live JSX\nWell, not really.\n\nEventually JSX critics will get their wish. React along with Angular, Knockout,\nand other UI libraries will be replaced with a better standards-based approach. \nWeb Components [https://www.google.com/search?q=web+component]  is a set of W3C\nstandards currently in working draft status. They include custom elements, HTML\ntemplates, HTML imports, and the shadow DOM. The specification is still in\nprogress and browser support is patchy. In the meantime, React along with JSX\nfeels like the best choice.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-07-19T13:08:52.000Z","created_by":"1","updated_at":"2016-10-25T14:24:35.000Z","updated_by":"1","published_at":"2016-07-31T19:30:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b2","uuid":"7356632f-0ba6-43ed-8b74-efa2cbdee083","title":"TaskCompletionSource - Bridging the Gap Between Old and New","slug":"taskcompletionsource-bridging-the-gap-between-old-and-new","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In the latest versions of the .NET Framework, asynchronous work is represented by the **Task** class. A task is similar to a future or promise in other languages. You can create one in many ways the most common being `Task.Run()`. The result of a task is exposed by the `Task.Result` property. If the work is complete, then the property immediately returns a value; otherwise, it blocks until the operation is finished.\\n\\n#### Older Patterns\\n\\nTasks are a powerful addition to the .NET Framework especially when used to create [awaitables](http://blog.stephencleary.com/2012/02/async-and-await.html); however, there is still plenty of code out there using older asynchronous patterns. A good example is the ASP.NET interface **IHttpAsyncHandler**.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9a7f1b648185e915603fbd2f778e5b6a.js\\\"></script>\\n\\nIHttpAsyncHandler predates tasks and is used for implementing asynchronous web request handlers for ASP.NET websites. Note the **IAsyncResult** interface along with the Begin/End methods. This is a variation of a common pattern in early versions of .NET code.\\n\\n#### TaskCompletionSource\\n\\nMixing awaitables and an older asynchronous API can be challenging. In these scenarios we need to create an awaitable that wraps the API. Calling code can then use the async/await keywords.\\n\\nThis is where the **TaskCompletionSource** class can help. It serves as a wrapper around a Task instance and exposes methods to manipulate the task explicitly. Using TaskCompletionSource, you can set a result or exception on the task or cancel it. It provides an nice way to bridge the gap between older async code and newer code using awaitables.\\n\\n#### Asynchronous Calls with IWSTrustChannelContract\\n\\nAn example of an older asynchronous API is the interface `IWSTrustChannelContract`. It defines a contract for interacting with a security token service. The synchronous method `Issue()` takes a token request object and returns a security token or raises an exception for an invalid request. The asynchronous equivalent is the method pair `BeginIssue()` and `EndIssue()` also defined on the interface. BeginIssue takes three arguments, the request object, a callback, and a state object, and kicks off the work. EndIssue is invoked by the callback to retrieve the results.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/7cf72676354e17b7318ad120acf898e1.js\\\"></script>\\n\\nI won't go into the details behind issuing tokens. Instead I'll focus on how TaskCompletionSource can be used to wrap the BeginIssue/EndIssue methods with a task. The example below does just that. The method **IssueAsync** takes four arguments and returns an instance of `Task<SecurityToken>`. The details of invoking BeginIssue and EndIssue are hidden from the caller.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d8388de7a15009fd3e907d8894abeb37.js\\\"></script>\\n\\nThe first line initializes a new instance of `TaskCompletionSource`. It will be used later when invoking the Begin/End methods.\\n\\n```\\nTaskCompletionSource<SecurityToken> tcs = new TaskCompletionSource<SecurityToken>();\\n```\\n\\nThe last line of the method returns the wrapped Task instance.\\n\\n```\\nreturn tcs.Task;\\n```\\n\\nAll the interesting parts are in between. There are a few lines to set up an instance of `IWSTrustChannelContract`, but you can skim through those until you get to `channel.BeginIssue()`. This is where TaskCompletionSource comes into play. BeginIssue is passed the request and a callback to be invoked when the asynchronous work is complete. The state argument isn't relevant in this case so null will suffice.\\n\\n```\\nchannel.BeginIssue(requestSecurityToken, asyncResult =>\\n{\\n    try\\n    {\\n        RequestSecurityTokenResponse requestSecurityTokenResponse;\\n        SecurityToken securityToken = channel.EndIssue(asyncResult, out requestSecurityTokenResponse);\\n        tcs.SetResult(securityToken);\\n    }\\n    catch (Exception e)\\n    {\\n        tcs.SetException(e);\\n    }\\n}, null);\\n```\\n\\nInside the callback lambda expression, the result is obtained by invoking EndIssue. Then the TaskCompletionSource instance is used either to set the result if all goes well, `tcs.SetResult(securityToken)`, or set an exception `tcs.SetException(e)` if something goes awry. These methods manipulate the wrapped Task instance directly. This is the same instance returned asynchronously by the **IssueAsync** method.\\n\\nNow we have a method that exposes the older API as an awaitable. Callers can use the await keyword to invoke it.\\n\\n```\\nSecurityToken securityToken = await IssueAsync(stsAddress, appliesToAddress, httpBinding, clientCredentials);\\n```\\n\\n#### Event-based APIs\\n\\nOther uses for TaskCompletionSource include exposing an event-based API as a Task. Below is a contrived yet simple example of a sleep method. It wraps a timer event as a Task.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/909e3d157b705002e022.js\\\"></script>\\n\\n#### Wrapping Up\\n\\nTaskCompletionSource is useful for bridging the gap between a task-based API and a non-task API. In fact, it is used internally throughout the TPL library.\\n\\nFor further reading, check out [Creating Tasks](http://blog.stephencleary.com/2012/02/creating-tasks.html) by Stephen Cleary and [The Nature of TaskCompletionSource<TResult>](https://blogs.msdn.microsoft.com/pfxteam/2009/06/02/the-nature-of-taskcompletionsourcetresult/) in the Microsoft TPL documentation.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In the latest versions of the .NET Framework, asynchronous work is represented by the <strong>Task</strong> class. A task is similar to a future or promise in other languages. You can create one in many ways the most common being <code>Task.Run()</code>. The result of a task is exposed by the <code>Task.Result</code> property. If the work is complete, then the property immediately returns a value; otherwise, it blocks until the operation is finished.</p>\n<h4 id=\"olderpatterns\">Older Patterns</h4>\n<p>Tasks are a powerful addition to the .NET Framework especially when used to create <a href=\"http://blog.stephencleary.com/2012/02/async-and-await.html\">awaitables</a>; however, there is still plenty of code out there using older asynchronous patterns. A good example is the <a href=\"http://ASP.NET\">ASP.NET</a> interface <strong>IHttpAsyncHandler</strong>.</p>\n<script src=\"https://gist.github.com/joebuschmann/9a7f1b648185e915603fbd2f778e5b6a.js\"></script>\n<p>IHttpAsyncHandler predates tasks and is used for implementing asynchronous web request handlers for <a href=\"http://ASP.NET\">ASP.NET</a> websites. Note the <strong>IAsyncResult</strong> interface along with the Begin/End methods. This is a variation of a common pattern in early versions of .NET code.</p>\n<h4 id=\"taskcompletionsource\">TaskCompletionSource</h4>\n<p>Mixing awaitables and an older asynchronous API can be challenging. In these scenarios we need to create an awaitable that wraps the API. Calling code can then use the async/await keywords.</p>\n<p>This is where the <strong>TaskCompletionSource</strong> class can help. It serves as a wrapper around a Task instance and exposes methods to manipulate the task explicitly. Using TaskCompletionSource, you can set a result or exception on the task or cancel it. It provides an nice way to bridge the gap between older async code and newer code using awaitables.</p>\n<h4 id=\"asynchronouscallswithiwstrustchannelcontract\">Asynchronous Calls with IWSTrustChannelContract</h4>\n<p>An example of an older asynchronous API is the interface <code>IWSTrustChannelContract</code>. It defines a contract for interacting with a security token service. The synchronous method <code>Issue()</code> takes a token request object and returns a security token or raises an exception for an invalid request. The asynchronous equivalent is the method pair <code>BeginIssue()</code> and <code>EndIssue()</code> also defined on the interface. BeginIssue takes three arguments, the request object, a callback, and a state object, and kicks off the work. EndIssue is invoked by the callback to retrieve the results.</p>\n<script src=\"https://gist.github.com/joebuschmann/7cf72676354e17b7318ad120acf898e1.js\"></script>\n<p>I won't go into the details behind issuing tokens. Instead I'll focus on how TaskCompletionSource can be used to wrap the BeginIssue/EndIssue methods with a task. The example below does just that. The method <strong>IssueAsync</strong> takes four arguments and returns an instance of <code>Task&lt;SecurityToken&gt;</code>. The details of invoking BeginIssue and EndIssue are hidden from the caller.</p>\n<script src=\"https://gist.github.com/joebuschmann/d8388de7a15009fd3e907d8894abeb37.js\"></script>\n<p>The first line initializes a new instance of <code>TaskCompletionSource</code>. It will be used later when invoking the Begin/End methods.</p>\n<pre><code>TaskCompletionSource&lt;SecurityToken&gt; tcs = new TaskCompletionSource&lt;SecurityToken&gt;();\n</code></pre>\n<p>The last line of the method returns the wrapped Task instance.</p>\n<pre><code>return tcs.Task;\n</code></pre>\n<p>All the interesting parts are in between. There are a few lines to set up an instance of <code>IWSTrustChannelContract</code>, but you can skim through those until you get to <code>channel.BeginIssue()</code>. This is where TaskCompletionSource comes into play. BeginIssue is passed the request and a callback to be invoked when the asynchronous work is complete. The state argument isn't relevant in this case so null will suffice.</p>\n<pre><code>channel.BeginIssue(requestSecurityToken, asyncResult =&gt;\n{\n    try\n    {\n        RequestSecurityTokenResponse requestSecurityTokenResponse;\n        SecurityToken securityToken = channel.EndIssue(asyncResult, out requestSecurityTokenResponse);\n        tcs.SetResult(securityToken);\n    }\n    catch (Exception e)\n    {\n        tcs.SetException(e);\n    }\n}, null);\n</code></pre>\n<p>Inside the callback lambda expression, the result is obtained by invoking EndIssue. Then the TaskCompletionSource instance is used either to set the result if all goes well, <code>tcs.SetResult(securityToken)</code>, or set an exception <code>tcs.SetException(e)</code> if something goes awry. These methods manipulate the wrapped Task instance directly. This is the same instance returned asynchronously by the <strong>IssueAsync</strong> method.</p>\n<p>Now we have a method that exposes the older API as an awaitable. Callers can use the await keyword to invoke it.</p>\n<pre><code>SecurityToken securityToken = await IssueAsync(stsAddress, appliesToAddress, httpBinding, clientCredentials);\n</code></pre>\n<h4 id=\"eventbasedapis\">Event-based APIs</h4>\n<p>Other uses for TaskCompletionSource include exposing an event-based API as a Task. Below is a contrived yet simple example of a sleep method. It wraps a timer event as a Task.</p>\n<script src=\"https://gist.github.com/joebuschmann/909e3d157b705002e022.js\"></script>\n<h4 id=\"wrappingup\">Wrapping Up</h4>\n<p>TaskCompletionSource is useful for bridging the gap between a task-based API and a non-task API. In fact, it is used internally throughout the TPL library.</p>\n<p>For further reading, check out <a href=\"http://blog.stephencleary.com/2012/02/creating-tasks.html\">Creating Tasks</a> by Stephen Cleary and <a href=\"https://blogs.msdn.microsoft.com/pfxteam/2009/06/02/the-nature-of-taskcompletionsourcetresult/\">The Nature of TaskCompletionSource<TResult></a> in the Microsoft TPL documentation.</p>\n</div>","amp":"75","plaintext":"In the latest versions of the .NET Framework, asynchronous work is represented\nby the Task  class. A task is similar to a future or promise in other languages.\nYou can create one in many ways the most common being Task.Run(). The result of\na task is exposed by the Task.Result  property. If the work is complete, then\nthe property immediately returns a value; otherwise, it blocks until the\noperation is finished.\n\nOlder Patterns\nTasks are a powerful addition to the .NET Framework especially when used to\ncreate awaitables [http://blog.stephencleary.com/2012/02/async-and-await.html];\nhowever, there is still plenty of code out there using older asynchronous\npatterns. A good example is the ASP.NET [http://ASP.NET]  interface \nIHttpAsyncHandler.\n\nIHttpAsyncHandler predates tasks and is used for implementing asynchronous web\nrequest handlers for ASP.NET [http://ASP.NET]  websites. Note the IAsyncResult \ninterface along with the Begin/End methods. This is a variation of a common\npattern in early versions of .NET code.\n\nTaskCompletionSource\nMixing awaitables and an older asynchronous API can be challenging. In these\nscenarios we need to create an awaitable that wraps the API. Calling code can\nthen use the async/await keywords.\n\nThis is where the TaskCompletionSource  class can help. It serves as a wrapper\naround a Task instance and exposes methods to manipulate the task explicitly.\nUsing TaskCompletionSource, you can set a result or exception on the task or\ncancel it. It provides an nice way to bridge the gap between older async code\nand newer code using awaitables.\n\nAsynchronous Calls with IWSTrustChannelContract\nAn example of an older asynchronous API is the interface IWSTrustChannelContract\n. It defines a contract for interacting with a security token service. The\nsynchronous method Issue()  takes a token request object and returns a security\ntoken or raises an exception for an invalid request. The asynchronous equivalent\nis the method pair BeginIssue()  and EndIssue()  also defined on the interface.\nBeginIssue takes three arguments, the request object, a callback, and a state\nobject, and kicks off the work. EndIssue is invoked by the callback to retrieve\nthe results.\n\nI won't go into the details behind issuing tokens. Instead I'll focus on how\nTaskCompletionSource can be used to wrap the BeginIssue/EndIssue methods with a\ntask. The example below does just that. The method IssueAsync  takes four\narguments and returns an instance of Task<SecurityToken>. The details of\ninvoking BeginIssue and EndIssue are hidden from the caller.\n\nThe first line initializes a new instance of TaskCompletionSource. It will be\nused later when invoking the Begin/End methods.\n\nTaskCompletionSource<SecurityToken> tcs = new TaskCompletionSource<SecurityToken>();\n\n\nThe last line of the method returns the wrapped Task instance.\n\nreturn tcs.Task;\n\n\nAll the interesting parts are in between. There are a few lines to set up an\ninstance of IWSTrustChannelContract, but you can skim through those until you\nget to channel.BeginIssue(). This is where TaskCompletionSource comes into play.\nBeginIssue is passed the request and a callback to be invoked when the\nasynchronous work is complete. The state argument isn't relevant in this case so\nnull will suffice.\n\nchannel.BeginIssue(requestSecurityToken, asyncResult =>\n{\n    try\n    {\n        RequestSecurityTokenResponse requestSecurityTokenResponse;\n        SecurityToken securityToken = channel.EndIssue(asyncResult, out requestSecurityTokenResponse);\n        tcs.SetResult(securityToken);\n    }\n    catch (Exception e)\n    {\n        tcs.SetException(e);\n    }\n}, null);\n\n\nInside the callback lambda expression, the result is obtained by invoking\nEndIssue. Then the TaskCompletionSource instance is used either to set the\nresult if all goes well, tcs.SetResult(securityToken), or set an exception \ntcs.SetException(e)  if something goes awry. These methods manipulate the\nwrapped Task instance directly. This is the same instance returned\nasynchronously by the IssueAsync  method.\n\nNow we have a method that exposes the older API as an awaitable. Callers can use\nthe await keyword to invoke it.\n\nSecurityToken securityToken = await IssueAsync(stsAddress, appliesToAddress, httpBinding, clientCredentials);\n\n\nEvent-based APIs\nOther uses for TaskCompletionSource include exposing an event-based API as a\nTask. Below is a contrived yet simple example of a sleep method. It wraps a\ntimer event as a Task.\n\nWrapping Up\nTaskCompletionSource is useful for bridging the gap between a task-based API and\na non-task API. In fact, it is used internally throughout the TPL library.\n\nFor further reading, check out Creating Tasks\n[http://blog.stephencleary.com/2012/02/creating-tasks.html]  by Stephen Cleary\nand The Nature of TaskCompletionSource\n[https://blogs.msdn.microsoft.com/pfxteam/2009/06/02/the-nature-of-taskcompletionsourcetresult/] \n in the Microsoft TPL documentation.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-07-31T19:35:23.000Z","created_by":"1","updated_at":"2016-08-15T13:29:53.000Z","updated_by":"1","published_at":"2016-08-15T13:28:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b4","uuid":"f047a9bf-3d50-4064-a126-05f7c8160657","title":"Forget 100% - A Realistic Guide to Physical Fitness","slug":"forget-100-a-realistic-guide-to-physical-fitness","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Two years ago in July I made a decision that changed my life. After a ten year hiatus, I decided to start working out again. I was in good shape in my twenties, but I was never able to carry out an exercise routine for more than a few months. I would be enthusiastic about it at first and then burn out. Eventually I stopped working out altogether.\\n\\nWhen I hit my late thirties, I was heavier than I wanted to be and felt sluggish most days. My son was on the verge of walking so greater demands on my energy were on the way. As a result, I decided to ease my way into a new exercise routine. I didn't expect it to continue; however, two years later I'm still going strong.\\n\\nWith greater time constraints, a more intense job, and a family, why am I now able to sustain a routine where I couldn't in my carefree twenties? I decided post my thoughts on what I'm doing differently today versus ten years ago. Below are six principles I adhere to, and they have made all the difference.\\n\\n#### Don't Put in 100%\\n\\nYou know those people who always put in 100% at the gym? Forget them. Giving it your all every time will lead to burnout. Instead put in a solid 60%. Occasionally bump that up to 80 for a single day, and rarely, when you're feeling really good, put in 100%. With this approach, you're more likely to turn physical fitness into a habit and at the same time, avoid injuries.\\n\\nNow this may be a hard pill to swallow. American culture tells us to give 100% all the time. Or better yet, 110% - which, if you think about it, doesn't make any damn sense. During every major televised sporting event, we see commercials with athletes flipping tires, pumping ropes, or doing similar bad-ass things.\\n\\nHere's a story to illustrate my point. When I was a kid, around 10 years old or so, I met a man at a Boy Scout function who I was told was a retired Navy Seal. I didn't believe it. This supposed Navy Seal was hobbling around on bad knees, had a messed up back, and his belly was so big he was in danger of tipping over at any moment. But it was true. He used to be a Seal. He was a guy who gave it his all in the military. He gave 100% every day and joined the ranks of the most elite warriors in the world.\\n\\nFast forward to his fifties, and he could barely move. It was hard to imagine him stealthily storming a foreign compound. This is what giving 100% for years gets you. It's unsustainable. Your mind and body will eventually burn out.\\n\\n#### Ditch the Gym\\n\\nWhatever you do, don't join a gym. Let's say you join anyway, and it takes you 10 minutes to drive there. Then another 10 minutes to drive home. That's 20 minutes wasted on a useless activity - driving. That's 20 minutes you could have spent working out. Chances are this extra time will be just enough to discourage you from going to the gym most days, and you've just wasted money on a membership.\\n\\nInstead buy some workout equipment for home. A treadmill, bike trainer, medicine balls, etc. are a much better investment. You'll be able to throw on some clothes and immediately start. You'll save 20+ minutes per workout.\\n\\n#### Watch Netflix and YouTube\\n\\nWhen I'm running on the treadmill, I always watch Netflix or YouTube. And because I'm only putting in 60%, I can focus on the video. Normally a tablet is a bad distraction, but in the case of exercise, it's a good thing. Instead of dreading your workout, you're looking forward to the next episode of [Narcos](https://www.netflix.com/info/80025172).\\n\\nDon't think of it as working out. You're goofing off on the treadmill.\\n\\n#### Habits Instead of Goals\\n\\nFocus on creating habits instead of chasing goals. Goals can be discouraging because most are only attainable in some distant future. However, when you work on building habits, workouts become almost a reflex. The focus is on getting your workout in rather than doing a certain number of reps or running a specific pace. A bad day is perceived as less of a setback. As you build good habits, improvements will come naturally.\\n\\n#### Do It When You Can\\n\\nI once read an anecdote about John Wayne Gacy the famous serial killer. He was out with a shovel at 2 AM one night when his neighbor happened to see him and asked what he was doing out so late. He replied that he was gardening. When asked why he was gardening at night, he said: **you do it when you can**.\\n\\nAnd that's what you should be doing. Not burying bodies but fitting your workout into the nooks and crannies of your day. No matter how busy you are, you've got 10 minutes here, 15 minutes there. If you have time for Twitter, then you have time for push-ups. Divide your workout into smaller chunks and focus on one chunk at a time.\\n\\nWhat does this remind you of? Agile software development? Agile methods break software development work into smaller increments. Iterations are short and can be completed before the next iteration. It's a great approach for your personal life as well and fits in better with our busy routines.\\n\\n#### Back > Abs\\n\\nDon't bother with sit-ups, crunches, or any other abdominal exercise. Most movements activate your abs to some degree. Like push-ups for example. They mainly target the chest, but they're a pretty good abdominal workout as well.\\n\\nInstead focus on your back. How many times have you seen someone hobbling around due to an abdominal injury? Never. Now, how many times have you heard of someone throwing out their back? All the time. You'll be better off with a strong back. Pick a few routines that strengthen the back and add them to your workout.\\n\\nBe careful when starting out though. Our backs are notoriously fragile.\\n\\n#### Where I Am Today\\n\\nToday I feel great. My workout is simple. I start with a light strength routine followed by a 3-5 mile run. I break up the workout as necessary. I have more energy. I don't get sick as often, and when I do, the symptoms aren't as bad.\\n\\nI'm not going to win any gold medals, but that's not my goal. I want to spend middle age kicking a soccer ball around with my kids and not complaining about my back. When I'm retired, I want to do more than play Parcheesi in a nursing home. And if that's what you want too, then these are the guidelines to get you there.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Two years ago in July I made a decision that changed my life. After a ten year hiatus, I decided to start working out again. I was in good shape in my twenties, but I was never able to carry out an exercise routine for more than a few months. I would be enthusiastic about it at first and then burn out. Eventually I stopped working out altogether.</p>\n<p>When I hit my late thirties, I was heavier than I wanted to be and felt sluggish most days. My son was on the verge of walking so greater demands on my energy were on the way. As a result, I decided to ease my way into a new exercise routine. I didn't expect it to continue; however, two years later I'm still going strong.</p>\n<p>With greater time constraints, a more intense job, and a family, why am I now able to sustain a routine where I couldn't in my carefree twenties? I decided post my thoughts on what I'm doing differently today versus ten years ago. Below are six principles I adhere to, and they have made all the difference.</p>\n<h4 id=\"dontputin100\">Don't Put in 100%</h4>\n<p>You know those people who always put in 100% at the gym? Forget them. Giving it your all every time will lead to burnout. Instead put in a solid 60%. Occasionally bump that up to 80 for a single day, and rarely, when you're feeling really good, put in 100%. With this approach, you're more likely to turn physical fitness into a habit and at the same time, avoid injuries.</p>\n<p>Now this may be a hard pill to swallow. American culture tells us to give 100% all the time. Or better yet, 110% - which, if you think about it, doesn't make any damn sense. During every major televised sporting event, we see commercials with athletes flipping tires, pumping ropes, or doing similar bad-ass things.</p>\n<p>Here's a story to illustrate my point. When I was a kid, around 10 years old or so, I met a man at a Boy Scout function who I was told was a retired Navy Seal. I didn't believe it. This supposed Navy Seal was hobbling around on bad knees, had a messed up back, and his belly was so big he was in danger of tipping over at any moment. But it was true. He used to be a Seal. He was a guy who gave it his all in the military. He gave 100% every day and joined the ranks of the most elite warriors in the world.</p>\n<p>Fast forward to his fifties, and he could barely move. It was hard to imagine him stealthily storming a foreign compound. This is what giving 100% for years gets you. It's unsustainable. Your mind and body will eventually burn out.</p>\n<h4 id=\"ditchthegym\">Ditch the Gym</h4>\n<p>Whatever you do, don't join a gym. Let's say you join anyway, and it takes you 10 minutes to drive there. Then another 10 minutes to drive home. That's 20 minutes wasted on a useless activity - driving. That's 20 minutes you could have spent working out. Chances are this extra time will be just enough to discourage you from going to the gym most days, and you've just wasted money on a membership.</p>\n<p>Instead buy some workout equipment for home. A treadmill, bike trainer, medicine balls, etc. are a much better investment. You'll be able to throw on some clothes and immediately start. You'll save 20+ minutes per workout.</p>\n<h4 id=\"watchnetflixandyoutube\">Watch Netflix and YouTube</h4>\n<p>When I'm running on the treadmill, I always watch Netflix or YouTube. And because I'm only putting in 60%, I can focus on the video. Normally a tablet is a bad distraction, but in the case of exercise, it's a good thing. Instead of dreading your workout, you're looking forward to the next episode of <a href=\"https://www.netflix.com/info/80025172\">Narcos</a>.</p>\n<p>Don't think of it as working out. You're goofing off on the treadmill.</p>\n<h4 id=\"habitsinsteadofgoals\">Habits Instead of Goals</h4>\n<p>Focus on creating habits instead of chasing goals. Goals can be discouraging because most are only attainable in some distant future. However, when you work on building habits, workouts become almost a reflex. The focus is on getting your workout in rather than doing a certain number of reps or running a specific pace. A bad day is perceived as less of a setback. As you build good habits, improvements will come naturally.</p>\n<h4 id=\"doitwhenyoucan\">Do It When You Can</h4>\n<p>I once read an anecdote about John Wayne Gacy the famous serial killer. He was out with a shovel at 2 AM one night when his neighbor happened to see him and asked what he was doing out so late. He replied that he was gardening. When asked why he was gardening at night, he said: <strong>you do it when you can</strong>.</p>\n<p>And that's what you should be doing. Not burying bodies but fitting your workout into the nooks and crannies of your day. No matter how busy you are, you've got 10 minutes here, 15 minutes there. If you have time for Twitter, then you have time for push-ups. Divide your workout into smaller chunks and focus on one chunk at a time.</p>\n<p>What does this remind you of? Agile software development? Agile methods break software development work into smaller increments. Iterations are short and can be completed before the next iteration. It's a great approach for your personal life as well and fits in better with our busy routines.</p>\n<h4 id=\"backabs\">Back &gt; Abs</h4>\n<p>Don't bother with sit-ups, crunches, or any other abdominal exercise. Most movements activate your abs to some degree. Like push-ups for example. They mainly target the chest, but they're a pretty good abdominal workout as well.</p>\n<p>Instead focus on your back. How many times have you seen someone hobbling around due to an abdominal injury? Never. Now, how many times have you heard of someone throwing out their back? All the time. You'll be better off with a strong back. Pick a few routines that strengthen the back and add them to your workout.</p>\n<p>Be careful when starting out though. Our backs are notoriously fragile.</p>\n<h4 id=\"whereiamtoday\">Where I Am Today</h4>\n<p>Today I feel great. My workout is simple. I start with a light strength routine followed by a 3-5 mile run. I break up the workout as necessary. I have more energy. I don't get sick as often, and when I do, the symptoms aren't as bad.</p>\n<p>I'm not going to win any gold medals, but that's not my goal. I want to spend middle age kicking a soccer ball around with my kids and not complaining about my back. When I'm retired, I want to do more than play Parcheesi in a nursing home. And if that's what you want too, then these are the guidelines to get you there.</p>\n</div>","amp":"77","plaintext":"Two years ago in July I made a decision that changed my life. After a ten year\nhiatus, I decided to start working out again. I was in good shape in my\ntwenties, but I was never able to carry out an exercise routine for more than a\nfew months. I would be enthusiastic about it at first and then burn out.\nEventually I stopped working out altogether.\n\nWhen I hit my late thirties, I was heavier than I wanted to be and felt sluggish\nmost days. My son was on the verge of walking so greater demands on my energy\nwere on the way. As a result, I decided to ease my way into a new exercise\nroutine. I didn't expect it to continue; however, two years later I'm still\ngoing strong.\n\nWith greater time constraints, a more intense job, and a family, why am I now\nable to sustain a routine where I couldn't in my carefree twenties? I decided\npost my thoughts on what I'm doing differently today versus ten years ago. Below\nare six principles I adhere to, and they have made all the difference.\n\nDon't Put in 100%\nYou know those people who always put in 100% at the gym? Forget them. Giving it\nyour all every time will lead to burnout. Instead put in a solid 60%.\nOccasionally bump that up to 80 for a single day, and rarely, when you're\nfeeling really good, put in 100%. With this approach, you're more likely to turn\nphysical fitness into a habit and at the same time, avoid injuries.\n\nNow this may be a hard pill to swallow. American culture tells us to give 100%\nall the time. Or better yet, 110% - which, if you think about it, doesn't make\nany damn sense. During every major televised sporting event, we see commercials\nwith athletes flipping tires, pumping ropes, or doing similar bad-ass things.\n\nHere's a story to illustrate my point. When I was a kid, around 10 years old or\nso, I met a man at a Boy Scout function who I was told was a retired Navy Seal.\nI didn't believe it. This supposed Navy Seal was hobbling around on bad knees,\nhad a messed up back, and his belly was so big he was in danger of tipping over\nat any moment. But it was true. He used to be a Seal. He was a guy who gave it\nhis all in the military. He gave 100% every day and joined the ranks of the most\nelite warriors in the world.\n\nFast forward to his fifties, and he could barely move. It was hard to imagine\nhim stealthily storming a foreign compound. This is what giving 100% for years\ngets you. It's unsustainable. Your mind and body will eventually burn out.\n\nDitch the Gym\nWhatever you do, don't join a gym. Let's say you join anyway, and it takes you\n10 minutes to drive there. Then another 10 minutes to drive home. That's 20\nminutes wasted on a useless activity - driving. That's 20 minutes you could have\nspent working out. Chances are this extra time will be just enough to discourage\nyou from going to the gym most days, and you've just wasted money on a\nmembership.\n\nInstead buy some workout equipment for home. A treadmill, bike trainer, medicine\nballs, etc. are a much better investment. You'll be able to throw on some\nclothes and immediately start. You'll save 20+ minutes per workout.\n\nWatch Netflix and YouTube\nWhen I'm running on the treadmill, I always watch Netflix or YouTube. And\nbecause I'm only putting in 60%, I can focus on the video. Normally a tablet is\na bad distraction, but in the case of exercise, it's a good thing. Instead of\ndreading your workout, you're looking forward to the next episode of Narcos\n[https://www.netflix.com/info/80025172].\n\nDon't think of it as working out. You're goofing off on the treadmill.\n\nHabits Instead of Goals\nFocus on creating habits instead of chasing goals. Goals can be discouraging\nbecause most are only attainable in some distant future. However, when you work\non building habits, workouts become almost a reflex. The focus is on getting\nyour workout in rather than doing a certain number of reps or running a specific\npace. A bad day is perceived as less of a setback. As you build good habits,\nimprovements will come naturally.\n\nDo It When You Can\nI once read an anecdote about John Wayne Gacy the famous serial killer. He was\nout with a shovel at 2 AM one night when his neighbor happened to see him and\nasked what he was doing out so late. He replied that he was gardening. When\nasked why he was gardening at night, he said: you do it when you can.\n\nAnd that's what you should be doing. Not burying bodies but fitting your workout\ninto the nooks and crannies of your day. No matter how busy you are, you've got\n10 minutes here, 15 minutes there. If you have time for Twitter, then you have\ntime for push-ups. Divide your workout into smaller chunks and focus on one\nchunk at a time.\n\nWhat does this remind you of? Agile software development? Agile methods break\nsoftware development work into smaller increments. Iterations are short and can\nbe completed before the next iteration. It's a great approach for your personal\nlife as well and fits in better with our busy routines.\n\nBack > Abs\nDon't bother with sit-ups, crunches, or any other abdominal exercise. Most\nmovements activate your abs to some degree. Like push-ups for example. They\nmainly target the chest, but they're a pretty good abdominal workout as well.\n\nInstead focus on your back. How many times have you seen someone hobbling around\ndue to an abdominal injury? Never. Now, how many times have you heard of someone\nthrowing out their back? All the time. You'll be better off with a strong back.\nPick a few routines that strengthen the back and add them to your workout.\n\nBe careful when starting out though. Our backs are notoriously fragile.\n\nWhere I Am Today\nToday I feel great. My workout is simple. I start with a light strength routine\nfollowed by a 3-5 mile run. I break up the workout as necessary. I have more\nenergy. I don't get sick as often, and when I do, the symptoms aren't as bad.\n\nI'm not going to win any gold medals, but that's not my goal. I want to spend\nmiddle age kicking a soccer ball around with my kids and not complaining about\nmy back. When I'm retired, I want to do more than play Parcheesi in a nursing\nhome. And if that's what you want too, then these are the guidelines to get you\nthere.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-08-30T02:52:05.000Z","created_by":"1","updated_at":"2017-05-30T20:31:34.000Z","updated_by":"1","published_at":"2016-09-09T14:48:07.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b5","uuid":"acce743b-3662-4412-9846-2ae7baa7adb9","title":"Callbacks As Lightning Component Attributes","slug":"callbacks-as-lightning-component-attributes","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Last week I posed a question on [salesforce.stackexchange.com](http://salesforce.stackexchange.com/questions/144087/how-do-i-pass-a-function-as-a-lightning-component-attribute) asking how to pass a function as an attribute in a Lightning Component. As a newbie to the Lightning Component framework (and the Salesforce platform), I found it odd callbacks were not included as one of the [supported attribute types](https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/ref_aura_attribute.htm). The dearth of responses to my question surprised me. Eventually I found the answer when researching [Component Events](https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/events_component.htm).\\n\\n#### Lightning Events\\n\\nBefore I elaborate, I have to say the Lightning framework's approach to callbacks or events seems excessive. My previous two web apps used React which has no separate concept of an event. React treats callback functions as any other data, and they are passed through the component hierarchy as attributes. The Lightning approach is to separate callbacks and data (strings, integers, arrays, object). Callbacks are encapsulated into events, and data are defined through strongly typed attributes.\\n\\nI would prefer the event concept go away altogether and be replaced with a simple callback or function attribute type. Unfortunately, that's not how Lightning works, so I won't belabor the point any further. Instead I'll focus on how you can pass callbacks to your Lightning components using events.\\n\\n#### myButton.cmp\\n\\nTo help illustrate my thoughts, below is a Lightning component called **myButton**. It's a wrapper around the standard `<button>` element that adds behavior to each click event. The behavior could be tracking for marketing purposes or any other common function. **myButton** exposes a single event named *press*.\\n\\n**pressEvent.evt**\\n\\n```\\n<aura:event type=\\\"COMPONENT\\\" />\\n```\\n\\n**myButton.cmp**\\n\\n```\\n<aura:component>\\n    <aura:attribute name=\\\"label\\\" required=\\\"true\\\" type=\\\"String\\\" />\\n    <aura:attribute name=\\\"class\\\" required=\\\"false\\\" type=\\\"String\\\" />\\n\\n    <!-- Declare the press event of type \\\"pressEvent\\\" -->\\n    <aura:registerEvent name=\\\"press\\\" type=\\\"c:pressEvent\\\"/>\\n\\n    <input type=\\\"button\\\" value=\\\"{!v.label}\\\" class=\\\"{!v.class}\\\" onclick=\\\"{!c.onClick}\\\" />\\n</aura:component>\\n```\\n\\n**myButtonController.js**\\n\\n```\\n({\\n    onClick : function(component, event, helper) {\\n    \\t// Do some cross-cutting function like track clicks for analytics\\n        helper.trackButtonClick(component, event);\\n\\n        var event = component.getEvent('press');\\n        event.fire();\\n    }\\n})\\n```\\n\\n#### &lt;aura:handler&gt;\\n\\nOne way to handle the *press* event is with an instance of the `<aura:handler>` element.\\n\\n**myButtonConsumer.cmp**\\n\\n```\\n<aura:component>\\n\\t<aura:handler name=\\\"press\\\" event=\\\"c:pressEvent\\\" action=\\\"{!c.onPress}\\\"/>\\n\\n    <c:myButton aura:id=\\\"okButton\\\" label=\\\"OK\\\" class=\\\"slds-button\\\" />\\n    <c:myButton aura:id=\\\"cancelButton\\\" label=\\\"Cancel\\\" class=\\\"slds-button\\\" />\\n</aura:component>\\n```\\n\\n**myButtonConsumerController.js**\\n\\n```\\n({\\n    onPress: function(component, event) {\\n        alert('Button pressed!');\\n    }\\n})\\n```\\n\\nIn **myButtonConsumer.cmp**, the handler is declared with a name, event, and action. It wires up the onPress method in the controller to the OK and Cancel buttons' press events.\\n\\nOne disadvantage of `<aura:handler>` is there is no easy way to segment the handler function by the source component. In this example, the same handler action is invoked for both buttons. You have to write additional code to determine which component triggered the event.\\n\\n```\\n({\\n    onPress: function(component, event) {\\n        if (event.getSource() === component.find('okButton')) {\\n        \\talert ('OK pressed!');\\n        } else if (event.getSource() === component.find('cancelButton')) {\\n        \\talert('Cancel pressed!');\\n        }\\n    }\\n})\\n```\\n\\nOf course, there are times when you would want all press events routed through the same handler, but that would be the exception rather than the rule.\\n\\n#### Callbacks As Attributes\\n\\nThe alternative to `<aura:handler>` is to pass a callback as an attribute. Unfortunately, this isn't clear from the official documentation. I discovered it in the answer to [an unrelated Stack Exchange question](http://salesforce.stackexchange.com/questions/89757/aurahandler-has-invalid-name-attribute-value#89759). Essentially, you can pass event handlers to `<aura:registerEvent>` the same way you pass data to `<aura:attribute>`. I'm not sure why the Salesforce documentation doesn't emphasize this more.\\n\\nWith this in mind, you can rewrite **myButtonConsumer** as follows:\\n\\n**myButtonConsumer.cmp**\\n\\n```\\n<aura:component>\\n    <!-- No aura:handler necessary. Just pass the callback as an attribute -->\\n    <!--<aura:handler name=\\\"press\\\" event=\\\"c:pressEvent\\\" action=\\\"{!c.onOk}\\\"/>-->\\n\\n    <c:myButton aura:id=\\\"okButton\\\" label=\\\"OK\\\" class=\\\"slds-button\\\" press=\\\"{!c.onOk}\\\" />\\n    <c:myButton aura:id=\\\"cancelButton\\\" label=\\\"Cancel\\\" class=\\\"slds-button\\\" press=\\\"{!c.onCancel}\\\" />\\n</aura:component>\\n```\\n\\n**myButtonConsumerController.js**\\n\\n```\\n({\\n    onOk: function(component, event) {\\n        alert('OK pressed!');\\n    },\\n\\n    onCancel: function(component, event) {\\n        alert('Cancel pressed!');\\n    }\\n})\\n```\\n\\nThat's it. The `press` event is wired up to the controller via an attribute. The `<aura:handler>` element goes away. I much prefer this approach. It requires one fewer element and better encapsulates component markup.\\n\\n#### Where's the Documentation?\\n\\nI'm not sure why Saleforce chooses not to document the second approach to event handling. Maybe it is deprecated? I doubt it. My best guess is `<aura:handler>` is their preferred way.\\n\\nIf anyone has an answer, I'd love to hear from you in the comments.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Last week I posed a question on <a href=\"http://salesforce.stackexchange.com/questions/144087/how-do-i-pass-a-function-as-a-lightning-component-attribute\">salesforce.stackexchange.com</a> asking how to pass a function as an attribute in a Lightning Component. As a newbie to the Lightning Component framework (and the Salesforce platform), I found it odd callbacks were not included as one of the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/ref_aura_attribute.htm\">supported attribute types</a>. The dearth of responses to my question surprised me. Eventually I found the answer when researching <a href=\"https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/events_component.htm\">Component Events</a>.</p>\n<h4 id=\"lightningevents\">Lightning Events</h4>\n<p>Before I elaborate, I have to say the Lightning framework's approach to callbacks or events seems excessive. My previous two web apps used React which has no separate concept of an event. React treats callback functions as any other data, and they are passed through the component hierarchy as attributes. The Lightning approach is to separate callbacks and data (strings, integers, arrays, object). Callbacks are encapsulated into events, and data are defined through strongly typed attributes.</p>\n<p>I would prefer the event concept go away altogether and be replaced with a simple callback or function attribute type. Unfortunately, that's not how Lightning works, so I won't belabor the point any further. Instead I'll focus on how you can pass callbacks to your Lightning components using events.</p>\n<h4 id=\"mybuttoncmp\">myButton.cmp</h4>\n<p>To help illustrate my thoughts, below is a Lightning component called <strong>myButton</strong>. It's a wrapper around the standard <code>&lt;button&gt;</code> element that adds behavior to each click event. The behavior could be tracking for marketing purposes or any other common function. <strong>myButton</strong> exposes a single event named <em>press</em>.</p>\n<p><strong>pressEvent.evt</strong></p>\n<pre><code>&lt;aura:event type=&quot;COMPONENT&quot; /&gt;\n</code></pre>\n<p><strong>myButton.cmp</strong></p>\n<pre><code>&lt;aura:component&gt;\n    &lt;aura:attribute name=&quot;label&quot; required=&quot;true&quot; type=&quot;String&quot; /&gt;\n    &lt;aura:attribute name=&quot;class&quot; required=&quot;false&quot; type=&quot;String&quot; /&gt;\n\n    &lt;!-- Declare the press event of type &quot;pressEvent&quot; --&gt;\n    &lt;aura:registerEvent name=&quot;press&quot; type=&quot;c:pressEvent&quot;/&gt;\n\n    &lt;input type=&quot;button&quot; value=&quot;{!v.label}&quot; class=&quot;{!v.class}&quot; onclick=&quot;{!c.onClick}&quot; /&gt;\n&lt;/aura:component&gt;\n</code></pre>\n<p><strong>myButtonController.js</strong></p>\n<pre><code>({\n    onClick : function(component, event, helper) {\n    \t// Do some cross-cutting function like track clicks for analytics\n        helper.trackButtonClick(component, event);\n\n        var event = component.getEvent('press');\n        event.fire();\n    }\n})\n</code></pre>\n<h4 id=\"aurahandler\">&lt;aura:handler&gt;</h4>\n<p>One way to handle the <em>press</em> event is with an instance of the <code>&lt;aura:handler&gt;</code> element.</p>\n<p><strong>myButtonConsumer.cmp</strong></p>\n<pre><code>&lt;aura:component&gt;\n\t&lt;aura:handler name=&quot;press&quot; event=&quot;c:pressEvent&quot; action=&quot;{!c.onPress}&quot;/&gt;\n\n    &lt;c:myButton aura:id=&quot;okButton&quot; label=&quot;OK&quot; class=&quot;slds-button&quot; /&gt;\n    &lt;c:myButton aura:id=&quot;cancelButton&quot; label=&quot;Cancel&quot; class=&quot;slds-button&quot; /&gt;\n&lt;/aura:component&gt;\n</code></pre>\n<p><strong>myButtonConsumerController.js</strong></p>\n<pre><code>({\n    onPress: function(component, event) {\n        alert('Button pressed!');\n    }\n})\n</code></pre>\n<p>In <strong>myButtonConsumer.cmp</strong>, the handler is declared with a name, event, and action. It wires up the onPress method in the controller to the OK and Cancel buttons' press events.</p>\n<p>One disadvantage of <code>&lt;aura:handler&gt;</code> is there is no easy way to segment the handler function by the source component. In this example, the same handler action is invoked for both buttons. You have to write additional code to determine which component triggered the event.</p>\n<pre><code>({\n    onPress: function(component, event) {\n        if (event.getSource() === component.find('okButton')) {\n        \talert ('OK pressed!');\n        } else if (event.getSource() === component.find('cancelButton')) {\n        \talert('Cancel pressed!');\n        }\n    }\n})\n</code></pre>\n<p>Of course, there are times when you would want all press events routed through the same handler, but that would be the exception rather than the rule.</p>\n<h4 id=\"callbacksasattributes\">Callbacks As Attributes</h4>\n<p>The alternative to <code>&lt;aura:handler&gt;</code> is to pass a callback as an attribute. Unfortunately, this isn't clear from the official documentation. I discovered it in the answer to <a href=\"http://salesforce.stackexchange.com/questions/89757/aurahandler-has-invalid-name-attribute-value#89759\">an unrelated Stack Exchange question</a>. Essentially, you can pass event handlers to <code>&lt;aura:registerEvent&gt;</code> the same way you pass data to <code>&lt;aura:attribute&gt;</code>. I'm not sure why the Salesforce documentation doesn't emphasize this more.</p>\n<p>With this in mind, you can rewrite <strong>myButtonConsumer</strong> as follows:</p>\n<p><strong>myButtonConsumer.cmp</strong></p>\n<pre><code>&lt;aura:component&gt;\n    &lt;!-- No aura:handler necessary. Just pass the callback as an attribute --&gt;\n    &lt;!--&lt;aura:handler name=&quot;press&quot; event=&quot;c:pressEvent&quot; action=&quot;{!c.onOk}&quot;/&gt;--&gt;\n\n    &lt;c:myButton aura:id=&quot;okButton&quot; label=&quot;OK&quot; class=&quot;slds-button&quot; press=&quot;{!c.onOk}&quot; /&gt;\n    &lt;c:myButton aura:id=&quot;cancelButton&quot; label=&quot;Cancel&quot; class=&quot;slds-button&quot; press=&quot;{!c.onCancel}&quot; /&gt;\n&lt;/aura:component&gt;\n</code></pre>\n<p><strong>myButtonConsumerController.js</strong></p>\n<pre><code>({\n    onOk: function(component, event) {\n        alert('OK pressed!');\n    },\n\n    onCancel: function(component, event) {\n        alert('Cancel pressed!');\n    }\n})\n</code></pre>\n<p>That's it. The <code>press</code> event is wired up to the controller via an attribute. The <code>&lt;aura:handler&gt;</code> element goes away. I much prefer this approach. It requires one fewer element and better encapsulates component markup.</p>\n<h4 id=\"wheresthedocumentation\">Where's the Documentation?</h4>\n<p>I'm not sure why Saleforce chooses not to document the second approach to event handling. Maybe it is deprecated? I doubt it. My best guess is <code>&lt;aura:handler&gt;</code> is their preferred way.</p>\n<p>If anyone has an answer, I'd love to hear from you in the comments.</p>\n</div>","amp":"80","plaintext":"Last week I posed a question on salesforce.stackexchange.com\n[http://salesforce.stackexchange.com/questions/144087/how-do-i-pass-a-function-as-a-lightning-component-attribute] \n asking how to pass a function as an attribute in a Lightning Component. As a\nnewbie to the Lightning Component framework (and the Salesforce platform), I\nfound it odd callbacks were not included as one of the supported attribute types\n[https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/ref_aura_attribute.htm]\n. The dearth of responses to my question surprised me. Eventually I found the\nanswer when researching Component Events\n[https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/events_component.htm]\n.\n\nLightning Events\nBefore I elaborate, I have to say the Lightning framework's approach to\ncallbacks or events seems excessive. My previous two web apps used React which\nhas no separate concept of an event. React treats callback functions as any\nother data, and they are passed through the component hierarchy as attributes.\nThe Lightning approach is to separate callbacks and data (strings, integers,\narrays, object). Callbacks are encapsulated into events, and data are defined\nthrough strongly typed attributes.\n\nI would prefer the event concept go away altogether and be replaced with a\nsimple callback or function attribute type. Unfortunately, that's not how\nLightning works, so I won't belabor the point any further. Instead I'll focus on\nhow you can pass callbacks to your Lightning components using events.\n\nmyButton.cmp\nTo help illustrate my thoughts, below is a Lightning component called myButton.\nIt's a wrapper around the standard <button>  element that adds behavior to each\nclick event. The behavior could be tracking for marketing purposes or any other\ncommon function. myButton  exposes a single event named press.\n\npressEvent.evt\n\n<aura:event type=\"COMPONENT\" />\n\n\nmyButton.cmp\n\n<aura:component>\n    <aura:attribute name=\"label\" required=\"true\" type=\"String\" />\n    <aura:attribute name=\"class\" required=\"false\" type=\"String\" />\n\n    <!-- Declare the press event of type \"pressEvent\" -->\n    <aura:registerEvent name=\"press\" type=\"c:pressEvent\"/>\n\n    <input type=\"button\" value=\"{!v.label}\" class=\"{!v.class}\" onclick=\"{!c.onClick}\" />\n</aura:component>\n\n\nmyButtonController.js\n\n({\n    onClick : function(component, event, helper) {\n    \t// Do some cross-cutting function like track clicks for analytics\n        helper.trackButtonClick(component, event);\n\n        var event = component.getEvent('press');\n        event.fire();\n    }\n})\n\n\n<aura:handler>\nOne way to handle the press  event is with an instance of the <aura:handler> \nelement.\n\nmyButtonConsumer.cmp\n\n<aura:component>\n\t<aura:handler name=\"press\" event=\"c:pressEvent\" action=\"{!c.onPress}\"/>\n\n    <c:myButton aura:id=\"okButton\" label=\"OK\" class=\"slds-button\" />\n    <c:myButton aura:id=\"cancelButton\" label=\"Cancel\" class=\"slds-button\" />\n</aura:component>\n\n\nmyButtonConsumerController.js\n\n({\n    onPress: function(component, event) {\n        alert('Button pressed!');\n    }\n})\n\n\nIn myButtonConsumer.cmp, the handler is declared with a name, event, and action.\nIt wires up the onPress method in the controller to the OK and Cancel buttons'\npress events.\n\nOne disadvantage of <aura:handler>  is there is no easy way to segment the\nhandler function by the source component. In this example, the same handler\naction is invoked for both buttons. You have to write additional code to\ndetermine which component triggered the event.\n\n({\n    onPress: function(component, event) {\n        if (event.getSource() === component.find('okButton')) {\n        \talert ('OK pressed!');\n        } else if (event.getSource() === component.find('cancelButton')) {\n        \talert('Cancel pressed!');\n        }\n    }\n})\n\n\nOf course, there are times when you would want all press events routed through\nthe same handler, but that would be the exception rather than the rule.\n\nCallbacks As Attributes\nThe alternative to <aura:handler>  is to pass a callback as an attribute.\nUnfortunately, this isn't clear from the official documentation. I discovered it\nin the answer to an unrelated Stack Exchange question. Essentially, you can pass\nevent handlers to <aura:registerEvent>  the same way you pass data to \n<aura:attribute>. I'm not sure why the Salesforce documentation doesn't\nemphasize this more.\n\nWith this in mind, you can rewrite myButtonConsumer  as follows:\n\nmyButtonConsumer.cmp\n\n<aura:component>\n    <!-- No aura:handler necessary. Just pass the callback as an attribute -->\n    <!--<aura:handler name=\"press\" event=\"c:pressEvent\" action=\"{!c.onOk}\"/>-->\n\n    <c:myButton aura:id=\"okButton\" label=\"OK\" class=\"slds-button\" press=\"{!c.onOk}\" />\n    <c:myButton aura:id=\"cancelButton\" label=\"Cancel\" class=\"slds-button\" press=\"{!c.onCancel}\" />\n</aura:component>\n\n\nmyButtonConsumerController.js\n\n({\n    onOk: function(component, event) {\n        alert('OK pressed!');\n    },\n\n    onCancel: function(component, event) {\n        alert('Cancel pressed!');\n    }\n})\n\n\nThat's it. The press  event is wired up to the controller via an attribute. The \n<aura:handler>  element goes away. I much prefer this approach. It requires one\nfewer element and better encapsulates component markup.\n\nWhere's the Documentation?\nI'm not sure why Saleforce chooses not to document the second approach to event\nhandling. Maybe it is deprecated? I doubt it. My best guess is <aura:handler> \nis their preferred way.\n\nIf anyone has an answer, I'd love to hear from you in the comments.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2016-10-24T16:26:07.000Z","created_by":"1","updated_at":"2017-01-12T14:46:13.000Z","updated_by":"1","published_at":"2016-10-25T14:15:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b6","uuid":"decb6665-29ab-43bd-8480-ba30787928b5","title":"Salesforce Lightning - Fixing the Built-in Components","slug":"salesforce-lightning-fixing-the-built-in-components","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"If you've developed with the Salesforce Lightning Framework, you're probably familiar with the [Lightning components](https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/aura_compref.htm) available in the UI namespace. They include **ui:button** and **ui:inputText** among others. These out-of-the-box components are intended to get you up and running quickly, but the reality is they're pretty buggy. It can take some tweaking to get them to look right.\\n\\n#### Issues with ui:inputDateTime\\n\\nA prime example of this is **ui:inputDateTime**. If you use it in conjunction with the SLDS classes **slds-input** and **slds-form-element__label**, the component's layout gets out of whack.\\n\\n```\\n<div class=\\\"slds-form-element__control\\\">\\n    <ui:inputDateTime aura:id=\\\"startdate\\\" label=\\\"Start\\\"\\n                      class=\\\"slds-input\\\"\\n                      labelClass=\\\"slds-form-element__label\\\"\\n                      value=\\\"{!v.StartDateTime__c}\\\"\\n                      displayDatePicker=\\\"true\\\" />\\n</div>\\n```\\n\\nThe slds-input class forces a width of 100% on the input textboxes which pushes the calendar icons to the next line.\\n\\n![ui:inputDateTime](http://media.joebuschmann.com/ui-datetime-no-fix-1.png)\\n\\nEven worse, when you click the icon for the time selection, the list doesn't appear under the textbox like it should. Instead it is positioned to the far left.\\n\\n![ui:inputDateTime](http://media.joebuschmann.com/ui-datetime-no-fix-2.png)\\n\\nThe fixes turn out to be straightforward, but there are many annoyances with these components. You'll find yourself tweaking them to get the look just right.\\n\\n#### Component Inheritance\\n\\nAn approach I've been using is to wrap the built-in components using component inheritance. To fix the calendar icons, I extended ui:inputDateTime and included custom CSS to position the icons and the time list. I also included the SLDS classes as defaults. This is a nice way to encapsulate tweaks for the built-in components and make them much easier to use.\\n\\n**inputDateTimeCustom.cmp**\\n\\n```\\n<aura:component extends=\\\"ui:inputDateTime\\\">\\n\\t<!-- Provide SLDS default classes for the input and label.  -->\\n\\t<aura:attribute name=\\\"class\\\" type=\\\"String\\\" default=\\\"slds-input\\\" />\\n\\t<aura:attribute name=\\\"labelClass\\\" type=\\\"String\\\" default=\\\"slds-form-element__label\\\" />\\n\\t<aura:attribute name=\\\"displayDatePicker\\\" type=\\\"Boolean\\\" default=\\\"true\\\" />\\n</aura:component>\\n```\\n\\n**inputDateTimeCustom.css**\\n\\n```\\n.THIS .dateTime-inputDate {\\n\\tposition: relative;\\n}\\n\\n.THIS .datePicker-openIcon {\\n\\tposition: absolute;\\n\\tleft: auto;  /* IE doesn't support initial so use auto instead. */\\n\\tleft: initial; /* Reset the left value so it doesn't interfere with the right. */\\n\\ttop: 7px;\\n\\tright: 13px;\\n}\\n\\n.THIS .dateTime-inputTime {\\n\\tposition: relative;\\n}\\n\\n.THIS .timePicker-openIcon {\\n\\tposition: absolute;\\n\\tleft: auto;  /* IE doesn't support initial so use auto instead. */\\n\\tleft: initial; /* Reset the left value so it doesn't interfere with the right. */\\n\\ttop: 7px;\\n\\tright: 13px;\\n}\\n\\n/* Fix the position of the time picker. */\\n.THIS .uiInputTimePicker {\\n\\ttop: 100%;\\n\\tleft: 51%;\\n}\\n\\n/* Pointer cursor instead of text selector for the time list items. */\\n.THIS .datepicker--time__list li {\\n\\tcursor: pointer;\\n}\\n```\\n\\nUsing the new component gives you the fixes for free, and the default SLDS classes simplifies the markup.\\n\\n```\\n<div class=\\\"slds-form-element\\\">\\n    <c:inputDateTimeCustom aura:id=\\\"startdate\\\" label=\\\"Start\\\"\\n                           value=\\\"{!v.StartDateTime__c}\\\" />\\n</div>\\n```\\n\\nAhhh. Much better!\\n\\n![ui:inputDateTime](http://media.joebuschmann.com/ui-datetime-fix.png)\\n\\n#### The Lightning Namespace\\n\\nIn the Winter '17 release, Salesforce introduced a new namespace called **lightning**. It includes a number of components designed to integrate better with the look and feel of the Lightning experience. I don't know for sure, but my sense is they will eventually supersede the components in the UI namespace. Hopefully, they will provide a better out-of-the-box experience.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>If you've developed with the Salesforce Lightning Framework, you're probably familiar with the <a href=\"https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/aura_compref.htm\">Lightning components</a> available in the UI namespace. They include <strong>ui:button</strong> and <strong>ui:inputText</strong> among others. These out-of-the-box components are intended to get you up and running quickly, but the reality is they're pretty buggy. It can take some tweaking to get them to look right.</p>\n<h4 id=\"issueswithuiinputdatetime\">Issues with ui:inputDateTime</h4>\n<p>A prime example of this is <strong>ui:inputDateTime</strong>. If you use it in conjunction with the SLDS classes <strong>slds-input</strong> and <strong>slds-form-element__label</strong>, the component's layout gets out of whack.</p>\n<pre><code>&lt;div class=&quot;slds-form-element__control&quot;&gt;\n    &lt;ui:inputDateTime aura:id=&quot;startdate&quot; label=&quot;Start&quot;\n                      class=&quot;slds-input&quot;\n                      labelClass=&quot;slds-form-element__label&quot;\n                      value=&quot;{!v.StartDateTime__c}&quot;\n                      displayDatePicker=&quot;true&quot; /&gt;\n&lt;/div&gt;\n</code></pre>\n<p>The slds-input class forces a width of 100% on the input textboxes which pushes the calendar icons to the next line.</p>\n<p><img src=\"http://media.joebuschmann.com/ui-datetime-no-fix-1.png\" alt=\"ui:inputDateTime\"></p>\n<p>Even worse, when you click the icon for the time selection, the list doesn't appear under the textbox like it should. Instead it is positioned to the far left.</p>\n<p><img src=\"http://media.joebuschmann.com/ui-datetime-no-fix-2.png\" alt=\"ui:inputDateTime\"></p>\n<p>The fixes turn out to be straightforward, but there are many annoyances with these components. You'll find yourself tweaking them to get the look just right.</p>\n<h4 id=\"componentinheritance\">Component Inheritance</h4>\n<p>An approach I've been using is to wrap the built-in components using component inheritance. To fix the calendar icons, I extended ui:inputDateTime and included custom CSS to position the icons and the time list. I also included the SLDS classes as defaults. This is a nice way to encapsulate tweaks for the built-in components and make them much easier to use.</p>\n<p><strong>inputDateTimeCustom.cmp</strong></p>\n<pre><code>&lt;aura:component extends=&quot;ui:inputDateTime&quot;&gt;\n\t&lt;!-- Provide SLDS default classes for the input and label.  --&gt;\n\t&lt;aura:attribute name=&quot;class&quot; type=&quot;String&quot; default=&quot;slds-input&quot; /&gt;\n\t&lt;aura:attribute name=&quot;labelClass&quot; type=&quot;String&quot; default=&quot;slds-form-element__label&quot; /&gt;\n\t&lt;aura:attribute name=&quot;displayDatePicker&quot; type=&quot;Boolean&quot; default=&quot;true&quot; /&gt;\n&lt;/aura:component&gt;\n</code></pre>\n<p><strong>inputDateTimeCustom.css</strong></p>\n<pre><code>.THIS .dateTime-inputDate {\n\tposition: relative;\n}\n\n.THIS .datePicker-openIcon {\n\tposition: absolute;\n\tleft: auto;  /* IE doesn't support initial so use auto instead. */\n\tleft: initial; /* Reset the left value so it doesn't interfere with the right. */\n\ttop: 7px;\n\tright: 13px;\n}\n\n.THIS .dateTime-inputTime {\n\tposition: relative;\n}\n\n.THIS .timePicker-openIcon {\n\tposition: absolute;\n\tleft: auto;  /* IE doesn't support initial so use auto instead. */\n\tleft: initial; /* Reset the left value so it doesn't interfere with the right. */\n\ttop: 7px;\n\tright: 13px;\n}\n\n/* Fix the position of the time picker. */\n.THIS .uiInputTimePicker {\n\ttop: 100%;\n\tleft: 51%;\n}\n\n/* Pointer cursor instead of text selector for the time list items. */\n.THIS .datepicker--time__list li {\n\tcursor: pointer;\n}\n</code></pre>\n<p>Using the new component gives you the fixes for free, and the default SLDS classes simplifies the markup.</p>\n<pre><code>&lt;div class=&quot;slds-form-element&quot;&gt;\n    &lt;c:inputDateTimeCustom aura:id=&quot;startdate&quot; label=&quot;Start&quot;\n                           value=&quot;{!v.StartDateTime__c}&quot; /&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Ahhh. Much better!</p>\n<p><img src=\"http://media.joebuschmann.com/ui-datetime-fix.png\" alt=\"ui:inputDateTime\"></p>\n<h4 id=\"thelightningnamespace\">The Lightning Namespace</h4>\n<p>In the Winter '17 release, Salesforce introduced a new namespace called <strong>lightning</strong>. It includes a number of components designed to integrate better with the look and feel of the Lightning experience. I don't know for sure, but my sense is they will eventually supersede the components in the UI namespace. Hopefully, they will provide a better out-of-the-box experience.</p>\n</div>","amp":"81","plaintext":"If you've developed with the Salesforce Lightning Framework, you're probably\nfamiliar with the Lightning components\n[https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/aura_compref.htm] \n available in the UI namespace. They include ui:button  and ui:inputText  among\nothers. These out-of-the-box components are intended to get you up and running\nquickly, but the reality is they're pretty buggy. It can take some tweaking to\nget them to look right.\n\nIssues with ui:inputDateTime\nA prime example of this is ui:inputDateTime. If you use it in conjunction with\nthe SLDS classes slds-input  and slds-form-element__label, the component's\nlayout gets out of whack.\n\n<div class=\"slds-form-element__control\">\n    <ui:inputDateTime aura:id=\"startdate\" label=\"Start\"\n                      class=\"slds-input\"\n                      labelClass=\"slds-form-element__label\"\n                      value=\"{!v.StartDateTime__c}\"\n                      displayDatePicker=\"true\" />\n</div>\n\n\nThe slds-input class forces a width of 100% on the input textboxes which pushes\nthe calendar icons to the next line.\n\n\n\nEven worse, when you click the icon for the time selection, the list doesn't\nappear under the textbox like it should. Instead it is positioned to the far\nleft.\n\n\n\nThe fixes turn out to be straightforward, but there are many annoyances with\nthese components. You'll find yourself tweaking them to get the look just right.\n\nComponent Inheritance\nAn approach I've been using is to wrap the built-in components using component\ninheritance. To fix the calendar icons, I extended ui:inputDateTime and included\ncustom CSS to position the icons and the time list. I also included the SLDS\nclasses as defaults. This is a nice way to encapsulate tweaks for the built-in\ncomponents and make them much easier to use.\n\ninputDateTimeCustom.cmp\n\n<aura:component extends=\"ui:inputDateTime\">\n\t<!-- Provide SLDS default classes for the input and label.  -->\n\t<aura:attribute name=\"class\" type=\"String\" default=\"slds-input\" />\n\t<aura:attribute name=\"labelClass\" type=\"String\" default=\"slds-form-element__label\" />\n\t<aura:attribute name=\"displayDatePicker\" type=\"Boolean\" default=\"true\" />\n</aura:component>\n\n\ninputDateTimeCustom.css\n\n.THIS .dateTime-inputDate {\n\tposition: relative;\n}\n\n.THIS .datePicker-openIcon {\n\tposition: absolute;\n\tleft: auto;  /* IE doesn't support initial so use auto instead. */\n\tleft: initial; /* Reset the left value so it doesn't interfere with the right. */\n\ttop: 7px;\n\tright: 13px;\n}\n\n.THIS .dateTime-inputTime {\n\tposition: relative;\n}\n\n.THIS .timePicker-openIcon {\n\tposition: absolute;\n\tleft: auto;  /* IE doesn't support initial so use auto instead. */\n\tleft: initial; /* Reset the left value so it doesn't interfere with the right. */\n\ttop: 7px;\n\tright: 13px;\n}\n\n/* Fix the position of the time picker. */\n.THIS .uiInputTimePicker {\n\ttop: 100%;\n\tleft: 51%;\n}\n\n/* Pointer cursor instead of text selector for the time list items. */\n.THIS .datepicker--time__list li {\n\tcursor: pointer;\n}\n\n\nUsing the new component gives you the fixes for free, and the default SLDS\nclasses simplifies the markup.\n\n<div class=\"slds-form-element\">\n    <c:inputDateTimeCustom aura:id=\"startdate\" label=\"Start\"\n                           value=\"{!v.StartDateTime__c}\" />\n</div>\n\n\nAhhh. Much better!\n\n\n\nThe Lightning Namespace\nIn the Winter '17 release, Salesforce introduced a new namespace called \nlightning. It includes a number of components designed to integrate better with\nthe look and feel of the Lightning experience. I don't know for sure, but my\nsense is they will eventually supersede the components in the UI namespace.\nHopefully, they will provide a better out-of-the-box experience.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"The built-in Lightning components are buggy and need tweaking. In this post, I demonstrate how to use component inheritance to encapsulate custom fixes.","author_id":"1","created_at":"2016-11-03T18:07:17.000Z","created_by":"1","updated_at":"2017-01-12T14:47:20.000Z","updated_by":"1","published_at":"2016-11-28T14:21:45.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b7","uuid":"b78b19d1-8cb5-4683-833f-602359966fa7","title":"Salesforce Lightning - The Bad Parts","slug":"salesforce-lightning-the-bad-parts","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I try to avoid writing rants, but after a rough day, I needed to get this out. For the last two months, I've been working with the Salesforce Lightning Framework. It is the most frustrating JavaScript framework I've ever used. Unlike my experiences with Angular, React, and Knockout, I feel like Lightning is constantly fighting me. Technically it is built on the open source Aura framework, so this is an Aura critique as well. In my mind though the two are one and the same.\\n\\nSo here are my gripes with Lightning in no particular order.\\n\\n#### Local Variables as Attributes\\n\\nLightning requires you to create state variables for a component in a declarative manner. The **&lt;aura:attribute /&gt;** markup declares which types of data can be passed into a component. With an access modifier value of \\\"private\\\", an attribute essentially becomes a local variable whose value is only visible to the component. Manupulating an attribute's value is restricted to the `component.get()` and `component.set()` methods. The result is a very awkward way of manipulating data.\\n\\nI tried to avoid attributes by storing data in the helper object until I realized a single helper instance is shared across all instances of a component. This can be useful in scenarios that call for static data, but if you need a private variable, you're stuck with attributes.\\n\\n```\\n\\t<!-- State is declared as Aura attributes. -->\\n\\t<!-- Attributes passed into the component via markup. -->\\n\\t<!-- They are accessed in code using component.get() and component.set(). -->\\n\\t<aura:attribute name=\\\"suggestions\\\" type=\\\"Object[]\\\" default=\\\"[]\\\" />\\n\\t<aura:attribute name=\\\"value\\\" type=\\\"Object\\\" />\\n\\t<aura:attribute name=\\\"text\\\" type=\\\"String\\\" />\\n\\t\\n\\t<!-- This is a private to the component. -->\\n\\t<!-- Even if you're not using it in an expression within markup, you still need to do this. -->\\n\\t<aura:attribute name=\\\"cache\\\" type=\\\"Object\\\" access=\\\"private\\\" />\\n```\\n\\n#### Too Much Declarative Coding\\n\\nIn addition to declaring attributes, Lightning markup also comes with an [expression language](https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/expr_overview.htm) (that is not JavaScript) and constructs like `<aura:if />`, `<aura:iteration />`, `<aura:handler />`, etc. You have to learn this expression language and the markup in order to do things that are trivial in JavaScript.\\n\\nAll this declarative coding gets messy fast, and it doesn't build on what you already know. I much prefer React's approach which is to incorporate JavaScript into the framework as much as possible. Sure you have JSX, but the expression language in JSX *is* JavaScript. React builds on the language and constructs you know rather than inventing new ones.\\n\\n#### Renderer Methods\\n\\nTo make things more confusing, overriding renderer methods involves no markup at all. Salesforce decided to do away with the declarative style and go with JavaScript for rendering. Renderer overrides are simply JavaScript methods in the component's renderer.js file. I like this approach but would have preferred consistency. Why not this: `<aura:handler name=\\\"render\\\" value=\\\"{!this}\\\" action=\\\"{!c.doRender}\\\"/>`? Ugly but consistent.\\n\\n#### Explicit Typing\\n\\nLightning requires explicit types for attribute declarations which is odd considering it runs in a non-explicit dynamic environment. I mentioned earlier that the React UI library builds on JavaScript. React embraces its runtime environment rather than trying to fix it. With Lightning, I get the opposite feeling. Its approach is to try to fix JavaScript.\\n\\n#### Superficial Separation into a Controller and Helper\\n\\nI don't know what the point of the helper file is. The Lightning documentation encourages developers to keep the controller lean and put the bulk of a component's logic into the helper file. In practice the controller becomes a useless middle-man that just passes stuff to the helper. And you know what they say about cutting out the middle-man. Why not just have one file?\\n\\n#### No Common JS Modules\\n\\nSalesforce decided to ignore Common JS and just about every other modern JavaScript construct. Lightning components are wrapped in IIFEs at runtime, but it would have been nice if Saleforce embraced Common JS as a way of encapsulating component code.\\n\\n#### No Callbacks as Attributes\\n\\nHigher order functions are common in JavaScript, and as a result, callbacks are fundamental to pretty much every library I've used. Lightning replaces the simple callback with the more complex component event idea. Events certainly have their place in pub-sub scenarios, but sometimes a callback is more appropriate. It would be nice if attributes had an additional type of \\\"callback\\\" or \\\"function\\\". Unfortunately, this doesn't exist. You have to declare an event type and register an event of this type before you can pass a callback as an attribute. This is too much code for what is a simple concept in other frameworks.\\n\\n#### Embracing the Lightning Way\\n\\nWhile I don't enjoy Lightning, I will be using it for the foreseeable future. I'm a big believer in providing value. Salesforce is a significant investment for my company, and that's where I can best provide value. So I'll continue plugging away and embrace the Lightning way.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I try to avoid writing rants, but after a rough day, I needed to get this out. For the last two months, I've been working with the Salesforce Lightning Framework. It is the most frustrating JavaScript framework I've ever used. Unlike my experiences with Angular, React, and Knockout, I feel like Lightning is constantly fighting me. Technically it is built on the open source Aura framework, so this is an Aura critique as well. In my mind though the two are one and the same.</p>\n<p>So here are my gripes with Lightning in no particular order.</p>\n<h4 id=\"localvariablesasattributes\">Local Variables as Attributes</h4>\n<p>Lightning requires you to create state variables for a component in a declarative manner. The <strong>&lt;aura:attribute /&gt;</strong> markup declares which types of data can be passed into a component. With an access modifier value of &quot;private&quot;, an attribute essentially becomes a local variable whose value is only visible to the component. Manupulating an attribute's value is restricted to the <code>component.get()</code> and <code>component.set()</code> methods. The result is a very awkward way of manipulating data.</p>\n<p>I tried to avoid attributes by storing data in the helper object until I realized a single helper instance is shared across all instances of a component. This can be useful in scenarios that call for static data, but if you need a private variable, you're stuck with attributes.</p>\n<pre><code>\t&lt;!-- State is declared as Aura attributes. --&gt;\n\t&lt;!-- Attributes passed into the component via markup. --&gt;\n\t&lt;!-- They are accessed in code using component.get() and component.set(). --&gt;\n\t&lt;aura:attribute name=&quot;suggestions&quot; type=&quot;Object[]&quot; default=&quot;[]&quot; /&gt;\n\t&lt;aura:attribute name=&quot;value&quot; type=&quot;Object&quot; /&gt;\n\t&lt;aura:attribute name=&quot;text&quot; type=&quot;String&quot; /&gt;\n\t\n\t&lt;!-- This is a private to the component. --&gt;\n\t&lt;!-- Even if you're not using it in an expression within markup, you still need to do this. --&gt;\n\t&lt;aura:attribute name=&quot;cache&quot; type=&quot;Object&quot; access=&quot;private&quot; /&gt;\n</code></pre>\n<h4 id=\"toomuchdeclarativecoding\">Too Much Declarative Coding</h4>\n<p>In addition to declaring attributes, Lightning markup also comes with an <a href=\"https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/expr_overview.htm\">expression language</a> (that is not JavaScript) and constructs like <code>&lt;aura:if /&gt;</code>, <code>&lt;aura:iteration /&gt;</code>, <code>&lt;aura:handler /&gt;</code>, etc. You have to learn this expression language and the markup in order to do things that are trivial in JavaScript.</p>\n<p>All this declarative coding gets messy fast, and it doesn't build on what you already know. I much prefer React's approach which is to incorporate JavaScript into the framework as much as possible. Sure you have JSX, but the expression language in JSX <em>is</em> JavaScript. React builds on the language and constructs you know rather than inventing new ones.</p>\n<h4 id=\"renderermethods\">Renderer Methods</h4>\n<p>To make things more confusing, overriding renderer methods involves no markup at all. Salesforce decided to do away with the declarative style and go with JavaScript for rendering. Renderer overrides are simply JavaScript methods in the component's renderer.js file. I like this approach but would have preferred consistency. Why not this: <code>&lt;aura:handler name=&quot;render&quot; value=&quot;{!this}&quot; action=&quot;{!c.doRender}&quot;/&gt;</code>? Ugly but consistent.</p>\n<h4 id=\"explicittyping\">Explicit Typing</h4>\n<p>Lightning requires explicit types for attribute declarations which is odd considering it runs in a non-explicit dynamic environment. I mentioned earlier that the React UI library builds on JavaScript. React embraces its runtime environment rather than trying to fix it. With Lightning, I get the opposite feeling. Its approach is to try to fix JavaScript.</p>\n<h4 id=\"superficialseparationintoacontrollerandhelper\">Superficial Separation into a Controller and Helper</h4>\n<p>I don't know what the point of the helper file is. The Lightning documentation encourages developers to keep the controller lean and put the bulk of a component's logic into the helper file. In practice the controller becomes a useless middle-man that just passes stuff to the helper. And you know what they say about cutting out the middle-man. Why not just have one file?</p>\n<h4 id=\"nocommonjsmodules\">No Common JS Modules</h4>\n<p>Salesforce decided to ignore Common JS and just about every other modern JavaScript construct. Lightning components are wrapped in IIFEs at runtime, but it would have been nice if Saleforce embraced Common JS as a way of encapsulating component code.</p>\n<h4 id=\"nocallbacksasattributes\">No Callbacks as Attributes</h4>\n<p>Higher order functions are common in JavaScript, and as a result, callbacks are fundamental to pretty much every library I've used. Lightning replaces the simple callback with the more complex component event idea. Events certainly have their place in pub-sub scenarios, but sometimes a callback is more appropriate. It would be nice if attributes had an additional type of &quot;callback&quot; or &quot;function&quot;. Unfortunately, this doesn't exist. You have to declare an event type and register an event of this type before you can pass a callback as an attribute. This is too much code for what is a simple concept in other frameworks.</p>\n<h4 id=\"embracingthelightningway\">Embracing the Lightning Way</h4>\n<p>While I don't enjoy Lightning, I will be using it for the foreseeable future. I'm a big believer in providing value. Salesforce is a significant investment for my company, and that's where I can best provide value. So I'll continue plugging away and embrace the Lightning way.</p>\n</div>","amp":"82","plaintext":"I try to avoid writing rants, but after a rough day, I needed to get this out.\nFor the last two months, I've been working with the Salesforce Lightning\nFramework. It is the most frustrating JavaScript framework I've ever used.\nUnlike my experiences with Angular, React, and Knockout, I feel like Lightning\nis constantly fighting me. Technically it is built on the open source Aura\nframework, so this is an Aura critique as well. In my mind though the two are\none and the same.\n\nSo here are my gripes with Lightning in no particular order.\n\nLocal Variables as Attributes\nLightning requires you to create state variables for a component in a\ndeclarative manner. The <aura:attribute />  markup declares which types of data\ncan be passed into a component. With an access modifier value of \"private\", an\nattribute essentially becomes a local variable whose value is only visible to\nthe component. Manupulating an attribute's value is restricted to the \ncomponent.get()  and component.set()  methods. The result is a very awkward way\nof manipulating data.\n\nI tried to avoid attributes by storing data in the helper object until I\nrealized a single helper instance is shared across all instances of a component.\nThis can be useful in scenarios that call for static data, but if you need a\nprivate variable, you're stuck with attributes.\n\n\t<!-- State is declared as Aura attributes. -->\n\t<!-- Attributes passed into the component via markup. -->\n\t<!-- They are accessed in code using component.get() and component.set(). -->\n\t<aura:attribute name=\"suggestions\" type=\"Object[]\" default=\"[]\" />\n\t<aura:attribute name=\"value\" type=\"Object\" />\n\t<aura:attribute name=\"text\" type=\"String\" />\n\t\n\t<!-- This is a private to the component. -->\n\t<!-- Even if you're not using it in an expression within markup, you still need to do this. -->\n\t<aura:attribute name=\"cache\" type=\"Object\" access=\"private\" />\n\n\nToo Much Declarative Coding\nIn addition to declaring attributes, Lightning markup also comes with an \nexpression language\n[https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/expr_overview.htm] \n (that is not JavaScript) and constructs like <aura:if />, <aura:iteration />, \n<aura:handler />, etc. You have to learn this expression language and the markup\nin order to do things that are trivial in JavaScript.\n\nAll this declarative coding gets messy fast, and it doesn't build on what you\nalready know. I much prefer React's approach which is to incorporate JavaScript\ninto the framework as much as possible. Sure you have JSX, but the expression\nlanguage in JSX is  JavaScript. React builds on the language and constructs you\nknow rather than inventing new ones.\n\nRenderer Methods\nTo make things more confusing, overriding renderer methods involves no markup at\nall. Salesforce decided to do away with the declarative style and go with\nJavaScript for rendering. Renderer overrides are simply JavaScript methods in\nthe component's renderer.js file. I like this approach but would have preferred\nconsistency. Why not this: <aura:handler name=\"render\" value=\"{!this}\"\naction=\"{!c.doRender}\"/>? Ugly but consistent.\n\nExplicit Typing\nLightning requires explicit types for attribute declarations which is odd\nconsidering it runs in a non-explicit dynamic environment. I mentioned earlier\nthat the React UI library builds on JavaScript. React embraces its runtime\nenvironment rather than trying to fix it. With Lightning, I get the opposite\nfeeling. Its approach is to try to fix JavaScript.\n\nSuperficial Separation into a Controller and Helper\nI don't know what the point of the helper file is. The Lightning documentation\nencourages developers to keep the controller lean and put the bulk of a\ncomponent's logic into the helper file. In practice the controller becomes a\nuseless middle-man that just passes stuff to the helper. And you know what they\nsay about cutting out the middle-man. Why not just have one file?\n\nNo Common JS Modules\nSalesforce decided to ignore Common JS and just about every other modern\nJavaScript construct. Lightning components are wrapped in IIFEs at runtime, but\nit would have been nice if Saleforce embraced Common JS as a way of\nencapsulating component code.\n\nNo Callbacks as Attributes\nHigher order functions are common in JavaScript, and as a result, callbacks are\nfundamental to pretty much every library I've used. Lightning replaces the\nsimple callback with the more complex component event idea. Events certainly\nhave their place in pub-sub scenarios, but sometimes a callback is more\nappropriate. It would be nice if attributes had an additional type of \"callback\"\nor \"function\". Unfortunately, this doesn't exist. You have to declare an event\ntype and register an event of this type before you can pass a callback as an\nattribute. This is too much code for what is a simple concept in other\nframeworks.\n\nEmbracing the Lightning Way\nWhile I don't enjoy Lightning, I will be using it for the foreseeable future.\nI'm a big believer in providing value. Salesforce is a significant investment\nfor my company, and that's where I can best provide value. So I'll continue\nplugging away and embrace the Lightning way.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"A rant about the bad parts of the Salesforce Lightning framework. After working with Lightning for about two months, I have a few gripes to discuss.","author_id":"1","created_at":"2016-11-10T15:20:08.000Z","created_by":"1","updated_at":"2017-01-12T14:46:42.000Z","updated_by":"1","published_at":"2016-11-18T14:25:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b8","uuid":"a7ef3385-455a-49e8-994a-c537a0221fc2","title":"Salesforce Lightning - Hosting a Component in Visualforce","slug":"salesforce-lightning-hosting-a-component-in-visualforce","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"You may be familiar with overriding the editing experience for a Salesforce object with a custom Visualforce (VF) page. When users choose the new or edit actions for an object record, they get a customized view rather than the standard Salesforce view. I wanted to convert a custom edit view written in Visualforce over to Lightning. What I thought would take a day ended up consuming the better part of a week.\\n\\nThe problem is Salesforce doesn't yet allow you to override with a Lightning view. If you configure an sObject in Object Manager, there's a section labelled **Buttons, Links, and Actions**. There you can choose to override the new and edit actions with a VF page, but there is no option to select a Lightning Page or Component.\\n\\n#### Hosting a Lightning Component in Visualforce\\n\\nThe solution that worked for me was to host the Lightning component in a VF page which could used to override the default views. Visualforce uses a feature called [Lightning Out](https://developer.salesforce.com/blogs/developer-relations/2016/02/lightning-components-visualforce-lightning.html) which acts as a bridge between a Lightning component and any web container. In this case, the container is the VF page.\\n\\nThe Salesforce documentation contains an excellent guide for [using Lightning Components in Visualforce pages](https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_visualforce.htm). I recommend reading it if you haven't already. I won't go into the details except to summarize the steps below.\\n\\n1. Include the Lightning JavaScript library in the Visualforce page by adding the `<apex:includeLightning/>` markup.\\n2. Create a Lightning App with the component dependencies.\\n3. Load the dependency app in the VF page.\\n4. Create the component and load it into a `<div>` element.\\n\\nHere's what the Visualforce markup looks like for the generic sObject *customObject__c* and the component *customObjectEdit.cmp*. Note the invocation of `$Lightning.use()` to load the dependencies and `$Lightning.createComponent()` to initialize the component.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/96b80a18688cd0bd1c3a3a7b4797fbde.js\\\"></script>\\n\\nBelow is the markup for the component's dependency app. It exists solely to declare top-level dependencies which are read and loaded by `$Lightning.use()`.  Only one dependency `c:customObjectEdit` is explicitly listed, and its child dependencies are inferred from its markup.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/b17710980c7a5bdd361b92e627a0f5f4.js\\\"></script>\\n\\n#### Passing the Record ID\\n\\nIn order for the page to display the correct record, the record ID needs to be passed to the Lightning component. *CustomObjectEdit.cmp* implements `force:hasRecordId` which specifies an attribute named *recordId* with a type of *Id*.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/e802bb8140f4ea15c1211a0dd26167de.js\\\"></script>\\n\\nThe VF page will need to supply the record ID as an attribute so the component knows what to load. Since the page declares a standard controller for `customObject__c`, the record ID can be accessed via the APEX markup `{!customObject__c.id}` and passed to the component when it is created.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/83a583664c500deb456787601ffc9a80.js\\\"></script>\\n\\n#### Wiring Up the VF Host Page\\n\\nOne final configuration step is necessary to display the page. In the Lightning Experience setup under **Objects and Fields > Object Manager**, the Edit and New actions need to be configured to display the VF page for `customObject__c`.\\n\\nNow the Lightning component will appear when editing or creating a record.\\n\\n#### Issues with Force Events\\n\\nThere is one issue with this approach. If the Lightning component uses events like **force:showToast** or **force:navigateToObjectHome**, they will not fire in VisualForce. The code to load an application event `$A.get('e.force:navigateToObjectHome')` returns null. Force events are common in Lightning apps so this is a serious issue. Fortunately, there is a work-around which is the subject of my [next post](http://joebuschmann.com/salesforce-lightning-navigation-events-in-a-visualforce-page).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>You may be familiar with overriding the editing experience for a Salesforce object with a custom Visualforce (VF) page. When users choose the new or edit actions for an object record, they get a customized view rather than the standard Salesforce view. I wanted to convert a custom edit view written in Visualforce over to Lightning. What I thought would take a day ended up consuming the better part of a week.</p>\n<p>The problem is Salesforce doesn't yet allow you to override with a Lightning view. If you configure an sObject in Object Manager, there's a section labelled <strong>Buttons, Links, and Actions</strong>. There you can choose to override the new and edit actions with a VF page, but there is no option to select a Lightning Page or Component.</p>\n<h4 id=\"hostingalightningcomponentinvisualforce\">Hosting a Lightning Component in Visualforce</h4>\n<p>The solution that worked for me was to host the Lightning component in a VF page which could used to override the default views. Visualforce uses a feature called <a href=\"https://developer.salesforce.com/blogs/developer-relations/2016/02/lightning-components-visualforce-lightning.html\">Lightning Out</a> which acts as a bridge between a Lightning component and any web container. In this case, the container is the VF page.</p>\n<p>The Salesforce documentation contains an excellent guide for <a href=\"https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_visualforce.htm\">using Lightning Components in Visualforce pages</a>. I recommend reading it if you haven't already. I won't go into the details except to summarize the steps below.</p>\n<ol>\n<li>Include the Lightning JavaScript library in the Visualforce page by adding the <code>&lt;apex:includeLightning/&gt;</code> markup.</li>\n<li>Create a Lightning App with the component dependencies.</li>\n<li>Load the dependency app in the VF page.</li>\n<li>Create the component and load it into a <code>&lt;div&gt;</code> element.</li>\n</ol>\n<p>Here's what the Visualforce markup looks like for the generic sObject <em>customObject__c</em> and the component <em>customObjectEdit.cmp</em>. Note the invocation of <code>$Lightning.use()</code> to load the dependencies and <code>$Lightning.createComponent()</code> to initialize the component.</p>\n<script src=\"https://gist.github.com/joebuschmann/96b80a18688cd0bd1c3a3a7b4797fbde.js\"></script>\n<p>Below is the markup for the component's dependency app. It exists solely to declare top-level dependencies which are read and loaded by <code>$Lightning.use()</code>.  Only one dependency <code>c:customObjectEdit</code> is explicitly listed, and its child dependencies are inferred from its markup.</p>\n<script src=\"https://gist.github.com/joebuschmann/b17710980c7a5bdd361b92e627a0f5f4.js\"></script>\n<h4 id=\"passingtherecordid\">Passing the Record ID</h4>\n<p>In order for the page to display the correct record, the record ID needs to be passed to the Lightning component. <em>CustomObjectEdit.cmp</em> implements <code>force:hasRecordId</code> which specifies an attribute named <em>recordId</em> with a type of <em>Id</em>.</p>\n<script src=\"https://gist.github.com/joebuschmann/e802bb8140f4ea15c1211a0dd26167de.js\"></script>\n<p>The VF page will need to supply the record ID as an attribute so the component knows what to load. Since the page declares a standard controller for <code>customObject__c</code>, the record ID can be accessed via the APEX markup <code>{!customObject__c.id}</code> and passed to the component when it is created.</p>\n<script src=\"https://gist.github.com/joebuschmann/83a583664c500deb456787601ffc9a80.js\"></script>\n<h4 id=\"wiringupthevfhostpage\">Wiring Up the VF Host Page</h4>\n<p>One final configuration step is necessary to display the page. In the Lightning Experience setup under <strong>Objects and Fields &gt; Object Manager</strong>, the Edit and New actions need to be configured to display the VF page for <code>customObject__c</code>.</p>\n<p>Now the Lightning component will appear when editing or creating a record.</p>\n<h4 id=\"issueswithforceevents\">Issues with Force Events</h4>\n<p>There is one issue with this approach. If the Lightning component uses events like <strong>force:showToast</strong> or <strong>force:navigateToObjectHome</strong>, they will not fire in VisualForce. The code to load an application event <code>$A.get('e.force:navigateToObjectHome')</code> returns null. Force events are common in Lightning apps so this is a serious issue. Fortunately, there is a work-around which is the subject of my <a href=\"http://joebuschmann.com/salesforce-lightning-navigation-events-in-a-visualforce-page\">next post</a>.</p>\n</div>","amp":"87","plaintext":"You may be familiar with overriding the editing experience for a Salesforce\nobject with a custom Visualforce (VF) page. When users choose the new or edit\nactions for an object record, they get a customized view rather than the\nstandard Salesforce view. I wanted to convert a custom edit view written in\nVisualforce over to Lightning. What I thought would take a day ended up\nconsuming the better part of a week.\n\nThe problem is Salesforce doesn't yet allow you to override with a Lightning\nview. If you configure an sObject in Object Manager, there's a section labelled \nButtons, Links, and Actions. There you can choose to override the new and edit\nactions with a VF page, but there is no option to select a Lightning Page or\nComponent.\n\nHosting a Lightning Component in Visualforce\nThe solution that worked for me was to host the Lightning component in a VF page\nwhich could used to override the default views. Visualforce uses a feature\ncalled Lightning Out\n[https://developer.salesforce.com/blogs/developer-relations/2016/02/lightning-components-visualforce-lightning.html] \n which acts as a bridge between a Lightning component and any web container. In\nthis case, the container is the VF page.\n\nThe Salesforce documentation contains an excellent guide for using Lightning\nComponents in Visualforce pages\n[https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/components_visualforce.htm]\n. I recommend reading it if you haven't already. I won't go into the details\nexcept to summarize the steps below.\n\n 1. Include the Lightning JavaScript library in the Visualforce page by adding\n    the <apex:includeLightning/>  markup.\n 2. Create a Lightning App with the component dependencies.\n 3. Load the dependency app in the VF page.\n 4. Create the component and load it into a <div>  element.\n\nHere's what the Visualforce markup looks like for the generic sObject \ncustomObject__c  and the component customObjectEdit.cmp. Note the invocation of \n$Lightning.use()  to load the dependencies and $Lightning.createComponent()  to\ninitialize the component.\n\nBelow is the markup for the component's dependency app. It exists solely to\ndeclare top-level dependencies which are read and loaded by $Lightning.use().\nOnly one dependency c:customObjectEdit  is explicitly listed, and its child\ndependencies are inferred from its markup.\n\nPassing the Record ID\nIn order for the page to display the correct record, the record ID needs to be\npassed to the Lightning component. CustomObjectEdit.cmp  implements \nforce:hasRecordId  which specifies an attribute named recordId  with a type of \nId.\n\nThe VF page will need to supply the record ID as an attribute so the component\nknows what to load. Since the page declares a standard controller for \ncustomObject__c, the record ID can be accessed via the APEX markup \n{!customObject__c.id}  and passed to the component when it is created.\n\nWiring Up the VF Host Page\nOne final configuration step is necessary to display the page. In the Lightning\nExperience setup under Objects and Fields > Object Manager, the Edit and New\nactions need to be configured to display the VF page for customObject__c.\n\nNow the Lightning component will appear when editing or creating a record.\n\nIssues with Force Events\nThere is one issue with this approach. If the Lightning component uses events\nlike force:showToast  or force:navigateToObjectHome, they will not fire in\nVisualForce. The code to load an application event \n$A.get('e.force:navigateToObjectHome')  returns null. Force events are common in\nLightning apps so this is a serious issue. Fortunately, there is a work-around\nwhich is the subject of my next post\n[http://joebuschmann.com/salesforce-lightning-navigation-events-in-a-visualforce-page]\n.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"An example of how to host a Lightning component in a Visualforce page. Includes code to pass the record ID from VF to a Lightning component.","author_id":"1","created_at":"2016-12-13T18:11:18.000Z","created_by":"1","updated_at":"2017-01-16T16:01:04.000Z","updated_by":"1","published_at":"2017-01-16T08:40:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4b9","uuid":"f1c75010-78d2-4498-8e6f-20025aa9594f","title":"Salesforce Lightning - Navigation Events in a Visualforce Page","slug":"salesforce-lightning-navigation-events-in-a-visualforce-page","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"In my [previous post](http://joebuschmann.com/salesforce-lightning-hosting-a-component-in-visualforce), I covered how to use a Lightning component in a Visualforce (VF) page and mentioned an issue with navigation events. These events no longer work. The problem is VF pages are loaded into an iframe element in the Lightning Experience. Navigation events like *force:navigateToObjectHome* are handled by the one.app container in the parent frame. Events raised in the VF page stop at the iframe boundary and don't bubble up into the parent frame.\\n\\nIn this post, I discuss how to get navigation events working in a Lightning Out host like a VF page. My approach avoids the need to detect the host environment inside of a component. Instead, components continue to raise events as usual and are still decoupled from the environment. Events are handled explicitly in the Lightning Out host where the environment detection logic is isolated.\\n\\n#### Raising Navigation Events\\n\\nThe first step is to get the navigation events firing properly. The Lightning code below will throw an error when run in a VF page.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/e8e41873cbd9c24de8697a6758b501f9.js\\\"></script>\\n\\nThe event variable is null because `$A.get()` can't find the event type. The issue is the *force.\\\\** events are not recognized as a dependency by Lightning Out. Fortunately, the fix is straightforward. Add the force dependency to your Lightning dependency app.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1ff0f3302b9031d92a8e10a1abc3168e.js\\\"></script>\\n\\nWith this change, the navigation events will fire properly in your components; however, there's still a problem. Nothing happens. This brings us to the second step which is to add event handlers in the VF host page.\\n\\n#### Handling Navigation Events\\n\\nAt this point, events are firing, but nothing is listening. The app.one host comes with built-in listeners that properly handle all the force events, but a VF page is either isolated in its own iframe (Lightning Experience) or running outside of Lightning (Salesforce Classic). This means any VF page hosting a Lightning component will have to explicitly handle navigation events raised by the component and any dependencies. How it handles these events depends on whether the page is running in the Lightning Experience or Salesforce Classic.\\n\\nThe **Lightning Experience** (and Salesforce1) provides a JavaScript helper library called **sforce.one**. This library provides [methods for navigation](https://developer.salesforce.com/docs/atlas.en-us.salesforce1.meta/salesforce1/salesforce1_dev_jsapi_sforce_one.htm). Internally sforce.one uses [window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to send messages to the parent frame which in turn forwards the events to the app.one container.\\n\\n**Salesforce Classic**, on the other hand, does not run app.one. Handlers have to detect this scenario and provide an alternate means to navigate. For example, `window.location` may be set with the proper URL corresponding to the type of event.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/ed2d5569a18e85981b1668756093c88e.js\\\"></script>\\n\\nThe code snippet above is from a VF page hosting a component named *customObjectEdit*. It adds a handler for *force:navigateToObjectHome* which detects the presence of the sforce.one object. If the object exists, `sforce.one.navigateToObjectHome` is invoked to go to the given sObject's home page. If it doesn't exist, the page is running in Classic mode, and `window.location` is used instead.\\n\\nI like this approach because the Lightning component is decoupled from the host and communicates via events. The VF host page handles the events and reacts appropriately.\\n\\n#### What About Other Events?\\n\\nThe sforce.one object is a nice wrapper library for navigation, but it doesn't include all the events available in the force namespace. For example, **force:showToast** has no corresponding method in sforce.one. You could provide a simple JavaScript alert, but an alert makes for a jarring user experience when a nice toast is expected.\\n\\nThere is a work-around for this that is not supported by Salesforce in any way. I discovered it while looking at the implementation of sforce.one. It uses an object **SfdcApp** which calls [window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to forward events to the app.one container. SfdcApp is not intended for public consumption, so Salesforce may change its implementation between releases.\\n\\n#### Displaying a Toast Message\\n\\nWith this in mind, a new event handler can be added to the VF page to handle **force:showToast**.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/7a2d15146aae92ee290aed4bb1fe3f52.js\\\"></script>\\n\\nJust add the snippet above to the `$Lightning.createComponent()` callback. The `postEventToOneApp` method will forward the event to the app.one container if the SfdcApp object exists (Lightning Experience) or invoke a fallback action when SfdcApp is not available (Salesforce Classic).\\n\\n#### Wrapping Up\\n\\nTo sum things up, a VF page has to handle force events explicitly when hosting Lightning components. The sforce.one library makes this easier when running in the Lightning Experience or Salesforce1. In Classic mode, you'll need to write custom code for each event. Digging deeper, you can use the SfdcApp object to forward events to the one.app container, but this isn't supported by Salesforce.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>In my <a href=\"http://joebuschmann.com/salesforce-lightning-hosting-a-component-in-visualforce\">previous post</a>, I covered how to use a Lightning component in a Visualforce (VF) page and mentioned an issue with navigation events. These events no longer work. The problem is VF pages are loaded into an iframe element in the Lightning Experience. Navigation events like <em>force:navigateToObjectHome</em> are handled by the one.app container in the parent frame. Events raised in the VF page stop at the iframe boundary and don't bubble up into the parent frame.</p>\n<p>In this post, I discuss how to get navigation events working in a Lightning Out host like a VF page. My approach avoids the need to detect the host environment inside of a component. Instead, components continue to raise events as usual and are still decoupled from the environment. Events are handled explicitly in the Lightning Out host where the environment detection logic is isolated.</p>\n<h4 id=\"raisingnavigationevents\">Raising Navigation Events</h4>\n<p>The first step is to get the navigation events firing properly. The Lightning code below will throw an error when run in a VF page.</p>\n<script src=\"https://gist.github.com/joebuschmann/e8e41873cbd9c24de8697a6758b501f9.js\"></script>\n<p>The event variable is null because <code>$A.get()</code> can't find the event type. The issue is the <em>force.*</em> events are not recognized as a dependency by Lightning Out. Fortunately, the fix is straightforward. Add the force dependency to your Lightning dependency app.</p>\n<script src=\"https://gist.github.com/joebuschmann/1ff0f3302b9031d92a8e10a1abc3168e.js\"></script>\n<p>With this change, the navigation events will fire properly in your components; however, there's still a problem. Nothing happens. This brings us to the second step which is to add event handlers in the VF host page.</p>\n<h4 id=\"handlingnavigationevents\">Handling Navigation Events</h4>\n<p>At this point, events are firing, but nothing is listening. The app.one host comes with built-in listeners that properly handle all the force events, but a VF page is either isolated in its own iframe (Lightning Experience) or running outside of Lightning (Salesforce Classic). This means any VF page hosting a Lightning component will have to explicitly handle navigation events raised by the component and any dependencies. How it handles these events depends on whether the page is running in the Lightning Experience or Salesforce Classic.</p>\n<p>The <strong>Lightning Experience</strong> (and Salesforce1) provides a JavaScript helper library called <strong>sforce.one</strong>. This library provides <a href=\"https://developer.salesforce.com/docs/atlas.en-us.salesforce1.meta/salesforce1/salesforce1_dev_jsapi_sforce_one.htm\">methods for navigation</a>. Internally sforce.one uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\">window.postMessage()</a> to send messages to the parent frame which in turn forwards the events to the app.one container.</p>\n<p><strong>Salesforce Classic</strong>, on the other hand, does not run app.one. Handlers have to detect this scenario and provide an alternate means to navigate. For example, <code>window.location</code> may be set with the proper URL corresponding to the type of event.</p>\n<script src=\"https://gist.github.com/joebuschmann/ed2d5569a18e85981b1668756093c88e.js\"></script>\n<p>The code snippet above is from a VF page hosting a component named <em>customObjectEdit</em>. It adds a handler for <em>force:navigateToObjectHome</em> which detects the presence of the sforce.one object. If the object exists, <code>sforce.one.navigateToObjectHome</code> is invoked to go to the given sObject's home page. If it doesn't exist, the page is running in Classic mode, and <code>window.location</code> is used instead.</p>\n<p>I like this approach because the Lightning component is decoupled from the host and communicates via events. The VF host page handles the events and reacts appropriately.</p>\n<h4 id=\"whataboutotherevents\">What About Other Events?</h4>\n<p>The sforce.one object is a nice wrapper library for navigation, but it doesn't include all the events available in the force namespace. For example, <strong>force:showToast</strong> has no corresponding method in sforce.one. You could provide a simple JavaScript alert, but an alert makes for a jarring user experience when a nice toast is expected.</p>\n<p>There is a work-around for this that is not supported by Salesforce in any way. I discovered it while looking at the implementation of sforce.one. It uses an object <strong>SfdcApp</strong> which calls <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\">window.postMessage()</a> to forward events to the app.one container. SfdcApp is not intended for public consumption, so Salesforce may change its implementation between releases.</p>\n<h4 id=\"displayingatoastmessage\">Displaying a Toast Message</h4>\n<p>With this in mind, a new event handler can be added to the VF page to handle <strong>force:showToast</strong>.</p>\n<script src=\"https://gist.github.com/joebuschmann/7a2d15146aae92ee290aed4bb1fe3f52.js\"></script>\n<p>Just add the snippet above to the <code>$Lightning.createComponent()</code> callback. The <code>postEventToOneApp</code> method will forward the event to the app.one container if the SfdcApp object exists (Lightning Experience) or invoke a fallback action when SfdcApp is not available (Salesforce Classic).</p>\n<h4 id=\"wrappingup\">Wrapping Up</h4>\n<p>To sum things up, a VF page has to handle force events explicitly when hosting Lightning components. The sforce.one library makes this easier when running in the Lightning Experience or Salesforce1. In Classic mode, you'll need to write custom code for each event. Digging deeper, you can use the SfdcApp object to forward events to the one.app container, but this isn't supported by Salesforce.</p>\n</div>","amp":"88","plaintext":"In my previous post\n[http://joebuschmann.com/salesforce-lightning-hosting-a-component-in-visualforce]\n, I covered how to use a Lightning component in a Visualforce (VF) page and\nmentioned an issue with navigation events. These events no longer work. The\nproblem is VF pages are loaded into an iframe element in the Lightning\nExperience. Navigation events like force:navigateToObjectHome  are handled by\nthe one.app container in the parent frame. Events raised in the VF page stop at\nthe iframe boundary and don't bubble up into the parent frame.\n\nIn this post, I discuss how to get navigation events working in a Lightning Out\nhost like a VF page. My approach avoids the need to detect the host environment\ninside of a component. Instead, components continue to raise events as usual and\nare still decoupled from the environment. Events are handled explicitly in the\nLightning Out host where the environment detection logic is isolated.\n\nRaising Navigation Events\nThe first step is to get the navigation events firing properly. The Lightning\ncode below will throw an error when run in a VF page.\n\nThe event variable is null because $A.get()  can't find the event type. The\nissue is the force.*  events are not recognized as a dependency by Lightning\nOut. Fortunately, the fix is straightforward. Add the force dependency to your\nLightning dependency app.\n\nWith this change, the navigation events will fire properly in your components;\nhowever, there's still a problem. Nothing happens. This brings us to the second\nstep which is to add event handlers in the VF host page.\n\nHandling Navigation Events\nAt this point, events are firing, but nothing is listening. The app.one host\ncomes with built-in listeners that properly handle all the force events, but a\nVF page is either isolated in its own iframe (Lightning Experience) or running\noutside of Lightning (Salesforce Classic). This means any VF page hosting a\nLightning component will have to explicitly handle navigation events raised by\nthe component and any dependencies. How it handles these events depends on\nwhether the page is running in the Lightning Experience or Salesforce Classic.\n\nThe Lightning Experience  (and Salesforce1) provides a JavaScript helper library\ncalled sforce.one. This library provides methods for navigation\n[https://developer.salesforce.com/docs/atlas.en-us.salesforce1.meta/salesforce1/salesforce1_dev_jsapi_sforce_one.htm]\n. Internally sforce.one uses window.postMessage()\n[https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage]  to send\nmessages to the parent frame which in turn forwards the events to the app.one\ncontainer.\n\nSalesforce Classic, on the other hand, does not run app.one. Handlers have to\ndetect this scenario and provide an alternate means to navigate. For example, \nwindow.location  may be set with the proper URL corresponding to the type of\nevent.\n\nThe code snippet above is from a VF page hosting a component named \ncustomObjectEdit. It adds a handler for force:navigateToObjectHome  which\ndetects the presence of the sforce.one object. If the object exists, \nsforce.one.navigateToObjectHome  is invoked to go to the given sObject's home\npage. If it doesn't exist, the page is running in Classic mode, and \nwindow.location  is used instead.\n\nI like this approach because the Lightning component is decoupled from the host\nand communicates via events. The VF host page handles the events and reacts\nappropriately.\n\nWhat About Other Events?\nThe sforce.one object is a nice wrapper library for navigation, but it doesn't\ninclude all the events available in the force namespace. For example, \nforce:showToast  has no corresponding method in sforce.one. You could provide a\nsimple JavaScript alert, but an alert makes for a jarring user experience when a\nnice toast is expected.\n\nThere is a work-around for this that is not supported by Salesforce in any way.\nI discovered it while looking at the implementation of sforce.one. It uses an\nobject SfdcApp  which calls window.postMessage()\n[https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage]  to\nforward events to the app.one container. SfdcApp is not intended for public\nconsumption, so Salesforce may change its implementation between releases.\n\nDisplaying a Toast Message\nWith this in mind, a new event handler can be added to the VF page to handle \nforce:showToast.\n\nJust add the snippet above to the $Lightning.createComponent()  callback. The \npostEventToOneApp  method will forward the event to the app.one container if the\nSfdcApp object exists (Lightning Experience) or invoke a fallback action when\nSfdcApp is not available (Salesforce Classic).\n\nWrapping Up\nTo sum things up, a VF page has to handle force events explicitly when hosting\nLightning components. The sforce.one library makes this easier when running in\nthe Lightning Experience or Salesforce1. In Classic mode, you'll need to write\ncustom code for each event. Digging deeper, you can use the SfdcApp object to\nforward events to the one.app container, but this isn't supported by Salesforce.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"In this post I show you how to get Lightning force events working when hosting a Lightning Component in a Visualforce page.","author_id":"1","created_at":"2017-01-09T16:59:09.000Z","created_by":"1","updated_at":"2017-01-16T16:00:25.000Z","updated_by":"1","published_at":"2017-01-16T10:00:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4ba","uuid":"3f475278-f1dc-40df-af89-762c02ddf5c4","title":"A Normal Everyday Sociopath","slug":"a-normal-everyday-sociopath","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"During the run-up to the 2016 election, one word was often used to describe Donald Trump: **sociopath**. Just Google [*donald trump sociopath*](https://www.google.com/search?q=donald+trump+sociopath), and you'll find the results full of articles asking if he really is a sociopath. His former ghostwriter Tony Schwartz [thinks so](http://www.newyorker.com/magazine/2016/07/25/donald-trumps-ghostwriter-tells-all).\\n\\nAmid all the sociopath talk, I realized I didn't know what the word meant. To me it just described a horrible person. I decided to fix that and read up on sociopathy and its close cousin psychopathy. By election day I had read several books on what psychologists call [anti-social personality disorder](https://en.wikipedia.org/wiki/Antisocial_personality_disorder) but what we commonly know as sociopathy.\\n\\nIn particular one book stood out. **Confessions of a Sociopath: A Life Spent Hiding in Plain Sight** by M. E. Thomas (a pseudonym) is not a particularly well-written book, but I challenge you to try to put it down. It is a memoir of a normal everyday sociopath. There are no murders, suicide cults, or prison sentences - just a high-functioning diagnosed sociopath who manages to integrate herself into mainstream society. It offers insight into a mind so different from my own that it seems impossible such people could exist. But they do.\\n\\n> The reality is that I have nothing of what people refer to as a conscience or remorse. The concept of morality, when defined as an emotional understanding of right and wrong, goes right over my head like an inside joke of which I am not a part...Still, I often wonder what life would be like to feel that things were right or wrong, to have an internal compass to direct me to my moral north (p. 134).\\n\\nThe book begins with a disturbing incident with a baby opossum drowning in a pool which sets the tone for the remaining pages. The author covers her life as a young sociopath trying to figure out why others were behaving so strangely. Eventually she would learn their behavior was driven by emotions - something she didn't experience herself except in muted distant ways. True joy, sorrow, and compassion were absent from her inner world leading to anti-social behavior. To cope, she copied the words and actions of those around her in an effort to fit in. She grew her bangs long to cover her empty eyes. Over time, she developed a mask of normalcy and rarely let it slip. Thus the subtitle, \\\"A Life Spent Hiding in Plain Sight.\\\"\\n\\nEventually she would graduate from law school, a place she described as teeming with sociopaths, and hold various positions as a prosecutor, law firm associate, and finally law professor. She writes about how she enjoys ruining people - her term for manipulating people to the point of destroying their lives. Intellectually she knows society disapproves of such behavior, but with no conscience to hold her back, she proceeds with glee. In particular, the story of how she ruined the career of a colleague turned lover is as fascinating as it is disturbing.\\n\\n> **Ruining people**. I love the way the phrase rolls around on my tongue and inside my mouth. Ruining people is delicious...I like people. I like people so much that I want to touch them, mold them, or ruin them however I'd like. Not because I want to witness the results, necessarily, but simply because I want to exercise my power (p. 216).\\n\\nFor me, the best parts of the book are the glimpses she gives into the mind of a sociopath. Because their emotions are muted or completely missing, sociopaths try to fill the void in superficial ways like ruining people. The author seems to have more self-awareness than most sociopaths and works to understand herself and others. This isn't due to any feelings of empathy which she lacks. It's a matter of self-preservation.\\n\\nLater in the book, the author writes about how she takes on religion as a way to guide her through life. She is beginning to self-destruct due to her impulses, and religion, with its clear rules regarding behavior, offers a path forward. She becomes a strict adherent to her childhood faith, Mormonism, and even teaches Sunday school.\\n\\n> [Some] sociopaths, and I am one of these, have settled on a more \\\"principled\\\" approach to life and act according to religious or ethical beliefs, or, at the minimum, for their self-interest or preservation. We decide on standards of behavior or a code that we can refer to when faced with decisions (\\\"I've decided not to kill people, so I won't stab this jerk\\\") (p. 141).\\n\\nIn *Confessions of a Sociopath*, M. E. Thomas gives an unvarnished account of her life and seems to have a genuine interest in educating the reader on what makes a sociopath tick. She asks for understanding and compassion from the neurotypical world. One almost has sympathy for her by the end - which is exactly what she wants.\\n\\n**Does any of this sound like Donald Trump?** I would say he certainly has some symptoms of anti-social personality disorder. Deception, manipulation, superficial charm. But is he a full-blown sociopath? We have four years to find out.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>During the run-up to the 2016 election, one word was often used to describe Donald Trump: <strong>sociopath</strong>. Just Google <a href=\"https://www.google.com/search?q=donald+trump+sociopath\"><em>donald trump sociopath</em></a>, and you'll find the results full of articles asking if he really is a sociopath. His former ghostwriter Tony Schwartz <a href=\"http://www.newyorker.com/magazine/2016/07/25/donald-trumps-ghostwriter-tells-all\">thinks so</a>.</p>\n<p>Amid all the sociopath talk, I realized I didn't know what the word meant. To me it just described a horrible person. I decided to fix that and read up on sociopathy and its close cousin psychopathy. By election day I had read several books on what psychologists call <a href=\"https://en.wikipedia.org/wiki/Antisocial_personality_disorder\">anti-social personality disorder</a> but what we commonly know as sociopathy.</p>\n<p>In particular one book stood out. <strong>Confessions of a Sociopath: A Life Spent Hiding in Plain Sight</strong> by M. E. Thomas (a pseudonym) is not a particularly well-written book, but I challenge you to try to put it down. It is a memoir of a normal everyday sociopath. There are no murders, suicide cults, or prison sentences - just a high-functioning diagnosed sociopath who manages to integrate herself into mainstream society. It offers insight into a mind so different from my own that it seems impossible such people could exist. But they do.</p>\n<blockquote>\n<p>The reality is that I have nothing of what people refer to as a conscience or remorse. The concept of morality, when defined as an emotional understanding of right and wrong, goes right over my head like an inside joke of which I am not a part...Still, I often wonder what life would be like to feel that things were right or wrong, to have an internal compass to direct me to my moral north (p. 134).</p>\n</blockquote>\n<p>The book begins with a disturbing incident with a baby opossum drowning in a pool which sets the tone for the remaining pages. The author covers her life as a young sociopath trying to figure out why others were behaving so strangely. Eventually she would learn their behavior was driven by emotions - something she didn't experience herself except in muted distant ways. True joy, sorrow, and compassion were absent from her inner world leading to anti-social behavior. To cope, she copied the words and actions of those around her in an effort to fit in. She grew her bangs long to cover her empty eyes. Over time, she developed a mask of normalcy and rarely let it slip. Thus the subtitle, &quot;A Life Spent Hiding in Plain Sight.&quot;</p>\n<p>Eventually she would graduate from law school, a place she described as teeming with sociopaths, and hold various positions as a prosecutor, law firm associate, and finally law professor. She writes about how she enjoys ruining people - her term for manipulating people to the point of destroying their lives. Intellectually she knows society disapproves of such behavior, but with no conscience to hold her back, she proceeds with glee. In particular, the story of how she ruined the career of a colleague turned lover is as fascinating as it is disturbing.</p>\n<blockquote>\n<p><strong>Ruining people</strong>. I love the way the phrase rolls around on my tongue and inside my mouth. Ruining people is delicious...I like people. I like people so much that I want to touch them, mold them, or ruin them however I'd like. Not because I want to witness the results, necessarily, but simply because I want to exercise my power (p. 216).</p>\n</blockquote>\n<p>For me, the best parts of the book are the glimpses she gives into the mind of a sociopath. Because their emotions are muted or completely missing, sociopaths try to fill the void in superficial ways like ruining people. The author seems to have more self-awareness than most sociopaths and works to understand herself and others. This isn't due to any feelings of empathy which she lacks. It's a matter of self-preservation.</p>\n<p>Later in the book, the author writes about how she takes on religion as a way to guide her through life. She is beginning to self-destruct due to her impulses, and religion, with its clear rules regarding behavior, offers a path forward. She becomes a strict adherent to her childhood faith, Mormonism, and even teaches Sunday school.</p>\n<blockquote>\n<p>[Some] sociopaths, and I am one of these, have settled on a more &quot;principled&quot; approach to life and act according to religious or ethical beliefs, or, at the minimum, for their self-interest or preservation. We decide on standards of behavior or a code that we can refer to when faced with decisions (&quot;I've decided not to kill people, so I won't stab this jerk&quot;) (p. 141).</p>\n</blockquote>\n<p>In <em>Confessions of a Sociopath</em>, M. E. Thomas gives an unvarnished account of her life and seems to have a genuine interest in educating the reader on what makes a sociopath tick. She asks for understanding and compassion from the neurotypical world. One almost has sympathy for her by the end - which is exactly what she wants.</p>\n<p><strong>Does any of this sound like Donald Trump?</strong> I would say he certainly has some symptoms of anti-social personality disorder. Deception, manipulation, superficial charm. But is he a full-blown sociopath? We have four years to find out.</p>\n</div>","amp":"89","plaintext":"During the run-up to the 2016 election, one word was often used to describe\nDonald Trump: sociopath. Just Google donald trump sociopath\n[https://www.google.com/search?q=donald+trump+sociopath], and you'll find the\nresults full of articles asking if he really is a sociopath. His former\nghostwriter Tony Schwartz thinks so\n[http://www.newyorker.com/magazine/2016/07/25/donald-trumps-ghostwriter-tells-all]\n.\n\nAmid all the sociopath talk, I realized I didn't know what the word meant. To me\nit just described a horrible person. I decided to fix that and read up on\nsociopathy and its close cousin psychopathy. By election day I had read several\nbooks on what psychologists call anti-social personality disorder\n[https://en.wikipedia.org/wiki/Antisocial_personality_disorder]  but what we\ncommonly know as sociopathy.\n\nIn particular one book stood out. Confessions of a Sociopath: A Life Spent\nHiding in Plain Sight  by M. E. Thomas (a pseudonym) is not a particularly\nwell-written book, but I challenge you to try to put it down. It is a memoir of\na normal everyday sociopath. There are no murders, suicide cults, or prison\nsentences - just a high-functioning diagnosed sociopath who manages to integrate\nherself into mainstream society. It offers insight into a mind so different from\nmy own that it seems impossible such people could exist. But they do.\n\nThe reality is that I have nothing of what people refer to as a conscience or\nremorse. The concept of morality, when defined as an emotional understanding of\nright and wrong, goes right over my head like an inside joke of which I am not a\npart...Still, I often wonder what life would be like to feel that things were\nright or wrong, to have an internal compass to direct me to my moral north (p.\n134).\n\nThe book begins with a disturbing incident with a baby opossum drowning in a\npool which sets the tone for the remaining pages. The author covers her life as\na young sociopath trying to figure out why others were behaving so strangely.\nEventually she would learn their behavior was driven by emotions - something she\ndidn't experience herself except in muted distant ways. True joy, sorrow, and\ncompassion were absent from her inner world leading to anti-social behavior. To\ncope, she copied the words and actions of those around her in an effort to fit\nin. She grew her bangs long to cover her empty eyes. Over time, she developed a\nmask of normalcy and rarely let it slip. Thus the subtitle, \"A Life Spent Hiding\nin Plain Sight.\"\n\nEventually she would graduate from law school, a place she described as teeming\nwith sociopaths, and hold various positions as a prosecutor, law firm associate,\nand finally law professor. She writes about how she enjoys ruining people - her\nterm for manipulating people to the point of destroying their lives.\nIntellectually she knows society disapproves of such behavior, but with no\nconscience to hold her back, she proceeds with glee. In particular, the story of\nhow she ruined the career of a colleague turned lover is as fascinating as it is\ndisturbing.\n\nRuining people. I love the way the phrase rolls around on my tongue and inside\nmy mouth. Ruining people is delicious...I like people. I like people so much\nthat I want to touch them, mold them, or ruin them however I'd like. Not because\nI want to witness the results, necessarily, but simply because I want to\nexercise my power (p. 216).\n\nFor me, the best parts of the book are the glimpses she gives into the mind of a\nsociopath. Because their emotions are muted or completely missing, sociopaths\ntry to fill the void in superficial ways like ruining people. The author seems\nto have more self-awareness than most sociopaths and works to understand herself\nand others. This isn't due to any feelings of empathy which she lacks. It's a\nmatter of self-preservation.\n\nLater in the book, the author writes about how she takes on religion as a way to\nguide her through life. She is beginning to self-destruct due to her impulses,\nand religion, with its clear rules regarding behavior, offers a path forward.\nShe becomes a strict adherent to her childhood faith, Mormonism, and even\nteaches Sunday school.\n\n[Some] sociopaths, and I am one of these, have settled on a more \"principled\"\napproach to life and act according to religious or ethical beliefs, or, at the\nminimum, for their self-interest or preservation. We decide on standards of\nbehavior or a code that we can refer to when faced with decisions (\"I've decided\nnot to kill people, so I won't stab this jerk\") (p. 141).\n\nIn Confessions of a Sociopath, M. E. Thomas gives an unvarnished account of her\nlife and seems to have a genuine interest in educating the reader on what makes\na sociopath tick. She asks for understanding and compassion from the\nneurotypical world. One almost has sympathy for her by the end - which is\nexactly what she wants.\n\nDoes any of this sound like Donald Trump?  I would say he certainly has some\nsymptoms of anti-social personality disorder. Deception, manipulation,\nsuperficial charm. But is he a full-blown sociopath? We have four years to find\nout.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Book review of Confessions of a Sociopath: A Life Spend Hiding in Plain Sight by M. E. Thomas - a memoir of a normal everyday sociopath","author_id":"1","created_at":"2017-02-05T03:53:09.000Z","created_by":"1","updated_at":"2017-02-10T14:33:58.000Z","updated_by":"1","published_at":"2017-02-10T14:33:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4bb","uuid":"a2f77fdf-8722-406d-baa7-8c562fc969fe","title":"Row-Level Security in SQL Server","slug":"row-level-security-in-sql-server","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Up until version 2016, Microsoft's SQL Server didn't support row-level security (RLS) - a feature that's been around in Oracle and IBM's offerings for a while. If you ran SQL Server and needed RLS, you had to build your own scheme which is exactly what I had to do for a recent project. I needed RLS for a new data warehouse I was building using SQL Server 2014. The requirements called for storing sensitive financial and sales data from multiple users in the same tables. I needed a scheme where a user could connect and extract just their data without seeing information for any others. Without native RLS, it is doable but takes some work.\\n\\nIn this post, I'll cover the approach I settled on and then discuss my plan for migrating to native RLS in SQL Server 2016.\\n\\n#### Table Structure\\n\\nMy first step was to add a column to each table named **UserId** to identify the owner of the row. Its value could be used to filter out rows belonging to other users. For example, the **baseAccount** table below represents a typical setup.\\n\\n```\\nCREATE TABLE [dbo].[baseAccount](  \\n    [UserId] [dbo].[UserId] NOT NULL,\\n    [Id] [varchar](18) NOT NULL,\\n    [Name] [nvarchar](100) NOT NULL,\\n    [CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_baseAccount_CreatedDate]  DEFAULT (getdate()),\\n CONSTRAINT [PK_Account] PRIMARY KEY CLUSTERED\\n(\\n    [UserId] ASC,\\n    [Id] ASC\\n))\\n```\\n\\nI left out most of the columns, but this gives you a general idea of how each table was structured. I added the prefix **base** to distinguish each table from its corresponding view. I also created a simple user-defined data type for the UserId column to enforce consistency.\\n\\n```\\nCREATE TYPE [dbo].[UserId] FROM [nvarchar](10) NOT NULL\\nGO\\n```\\n\\n#### Views\\n\\nWith the tables in place, the next task was to create a view for each table. This is were the UserId column comes into play. It is used to filter data by the current user and ensure the user can see only their data. The where condition makes an exception for database owners who have access to all data.\\n\\n```\\nCREATE VIEW [dbo].[Account]\\nAS\\nSELECT * FROM dbo.baseAccount\\nWHERE USER_NAME() = 'dbo' OR dbo.baseAccount.UserId = USER_NAME()\\n```\\n\\n#### Restricting Access\\n\\nNext I restricted database access by creating a common role for all of the users in the data warehouse. This new role was granted SELECT rights to the views but not their corresponding tables. This forced all data access to go through the views where the RLS filtering took place.\\n\\n```\\nCREATE ROLE [useraccess];\\n\\n-- Allow access to the view but not the table\\nGRANT SELECT ON [Account] TO [useraccess];\\n```\\n\\nWith the new role in place, it was time to create the logins and users. Each user had a dedicated SQL Server login. For example, if John Smith had the Windows login **somedomain\\\\jsmith**, then his login was mapped to a user in the database named **jsmith**.\\n\\n```\\n-- Create a new login\\nCREATE LOGIN [somedomain\\\\jsmith] FROM WINDOWS;\\n\\n-- Map a user to the login\\nCREATE USER [jsmith] FOR LOGIN [somedomain\\\\jsmith] WITH DEFAULT_SCHEMA=[dbo];\\n\\n-- Add him to useraccess role to access the views\\nALTER ROLE [useraccess] ADD MEMBER [jsmith];\\n```\\n\\nAt this point I had a simple row-level security scheme. When John Smith queries the database with his Windows account, he will only see data for his user. All other rows will be filtered out by the views.\\n\\n#### Native RLS in SQL Server 2016\\n\\nThis was a lot of work for something that should be native to any mainstream DBMS. SQL Server 2016 fixes this problem with the introduction of security policies for row-level security. Fortunately, the RLS setup I've described so far can be changed fairly easily to use security policies. The logins, users, and roles remain the same, but the views are replaced with a security policy per table. Each security policy uses a function to determine row-level access.\\n\\n###### Views and Tables\\n\\nThe views are no longer needed and can be dropped. The **base** prefix is removed from each table name, and SELECT permission is granted for the **useraccess** role.\\n\\n```\\nDROP VIEW dbo.[Account];\\n\\nEXEC sp_rename 'dbo.baseAccount', 'Account';\\n\\nGRANT SELECT ON [Account] TO [useraccess];\\n```\\n\\n###### Filter Predicate\\n\\nSQL Server 2016 uses a function to determine access to a row. In this case, the function checks the value for the UserId column against the current user name. Oddly, instead of returning a boolean value, it needs to return a table with a single row with a value of 1 for a match and nothing otherwise.\\n\\n```\\nCREATE FUNCTION dbo.UserAccess\\n( @userId AS [nvarchar](10) )\\nRETURNS TABLE\\nWITH SCHEMABINDING\\nAS\\nRETURN SELECT 1 AS AccessRight\\n    WHERE USER_NAME() = 'dbo' OR USER_NAME() = @userId\\n```\\n\\n###### Security Policy\\n\\nFinally, a security policy is applied per table to implement RLS.\\n\\n```\\nCREATE SECURITY POLICY AccountSecurityPolicy\\nADD FILTER PREDICATE dbo.UserAccess(UserId) ON dbo.Account\\nWITH (STATE = ON)\\n```\\n\\n<hr />\\n\\nSo that's a example of RLS implemented with and without security policies. I have yet to use SQL Server 2016 in production, but I'm looking forward to the simplicity that native RLS will bring.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Up until version 2016, Microsoft's SQL Server didn't support row-level security (RLS) - a feature that's been around in Oracle and IBM's offerings for a while. If you ran SQL Server and needed RLS, you had to build your own scheme which is exactly what I had to do for a recent project. I needed RLS for a new data warehouse I was building using SQL Server 2014. The requirements called for storing sensitive financial and sales data from multiple users in the same tables. I needed a scheme where a user could connect and extract just their data without seeing information for any others. Without native RLS, it is doable but takes some work.</p>\n<p>In this post, I'll cover the approach I settled on and then discuss my plan for migrating to native RLS in SQL Server 2016.</p>\n<h4 id=\"tablestructure\">Table Structure</h4>\n<p>My first step was to add a column to each table named <strong>UserId</strong> to identify the owner of the row. Its value could be used to filter out rows belonging to other users. For example, the <strong>baseAccount</strong> table below represents a typical setup.</p>\n<pre><code>CREATE TABLE [dbo].[baseAccount](  \n    [UserId] [dbo].[UserId] NOT NULL,\n    [Id] [varchar](18) NOT NULL,\n    [Name] [nvarchar](100) NOT NULL,\n    [CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_baseAccount_CreatedDate]  DEFAULT (getdate()),\n CONSTRAINT [PK_Account] PRIMARY KEY CLUSTERED\n(\n    [UserId] ASC,\n    [Id] ASC\n))\n</code></pre>\n<p>I left out most of the columns, but this gives you a general idea of how each table was structured. I added the prefix <strong>base</strong> to distinguish each table from its corresponding view. I also created a simple user-defined data type for the UserId column to enforce consistency.</p>\n<pre><code>CREATE TYPE [dbo].[UserId] FROM [nvarchar](10) NOT NULL\nGO\n</code></pre>\n<h4 id=\"views\">Views</h4>\n<p>With the tables in place, the next task was to create a view for each table. This is were the UserId column comes into play. It is used to filter data by the current user and ensure the user can see only their data. The where condition makes an exception for database owners who have access to all data.</p>\n<pre><code>CREATE VIEW [dbo].[Account]\nAS\nSELECT * FROM dbo.baseAccount\nWHERE USER_NAME() = 'dbo' OR dbo.baseAccount.UserId = USER_NAME()\n</code></pre>\n<h4 id=\"restrictingaccess\">Restricting Access</h4>\n<p>Next I restricted database access by creating a common role for all of the users in the data warehouse. This new role was granted SELECT rights to the views but not their corresponding tables. This forced all data access to go through the views where the RLS filtering took place.</p>\n<pre><code>CREATE ROLE [useraccess];\n\n-- Allow access to the view but not the table\nGRANT SELECT ON [Account] TO [useraccess];\n</code></pre>\n<p>With the new role in place, it was time to create the logins and users. Each user had a dedicated SQL Server login. For example, if John Smith had the Windows login <strong>somedomain\\jsmith</strong>, then his login was mapped to a user in the database named <strong>jsmith</strong>.</p>\n<pre><code>-- Create a new login\nCREATE LOGIN [somedomain\\jsmith] FROM WINDOWS;\n\n-- Map a user to the login\nCREATE USER [jsmith] FOR LOGIN [somedomain\\jsmith] WITH DEFAULT_SCHEMA=[dbo];\n\n-- Add him to useraccess role to access the views\nALTER ROLE [useraccess] ADD MEMBER [jsmith];\n</code></pre>\n<p>At this point I had a simple row-level security scheme. When John Smith queries the database with his Windows account, he will only see data for his user. All other rows will be filtered out by the views.</p>\n<h4 id=\"nativerlsinsqlserver2016\">Native RLS in SQL Server 2016</h4>\n<p>This was a lot of work for something that should be native to any mainstream DBMS. SQL Server 2016 fixes this problem with the introduction of security policies for row-level security. Fortunately, the RLS setup I've described so far can be changed fairly easily to use security policies. The logins, users, and roles remain the same, but the views are replaced with a security policy per table. Each security policy uses a function to determine row-level access.</p>\n<h6 id=\"viewsandtables\">Views and Tables</h6>\n<p>The views are no longer needed and can be dropped. The <strong>base</strong> prefix is removed from each table name, and SELECT permission is granted for the <strong>useraccess</strong> role.</p>\n<pre><code>DROP VIEW dbo.[Account];\n\nEXEC sp_rename 'dbo.baseAccount', 'Account';\n\nGRANT SELECT ON [Account] TO [useraccess];\n</code></pre>\n<h6 id=\"filterpredicate\">Filter Predicate</h6>\n<p>SQL Server 2016 uses a function to determine access to a row. In this case, the function checks the value for the UserId column against the current user name. Oddly, instead of returning a boolean value, it needs to return a table with a single row with a value of 1 for a match and nothing otherwise.</p>\n<pre><code>CREATE FUNCTION dbo.UserAccess\n( @userId AS [nvarchar](10) )\nRETURNS TABLE\nWITH SCHEMABINDING\nAS\nRETURN SELECT 1 AS AccessRight\n    WHERE USER_NAME() = 'dbo' OR USER_NAME() = @userId\n</code></pre>\n<h6 id=\"securitypolicy\">Security Policy</h6>\n<p>Finally, a security policy is applied per table to implement RLS.</p>\n<pre><code>CREATE SECURITY POLICY AccountSecurityPolicy\nADD FILTER PREDICATE dbo.UserAccess(UserId) ON dbo.Account\nWITH (STATE = ON)\n</code></pre>\n<hr />\n<p>So that's a example of RLS implemented with and without security policies. I have yet to use SQL Server 2016 in production, but I'm looking forward to the simplicity that native RLS will bring.</p>\n</div>","amp":"90","plaintext":"Up until version 2016, Microsoft's SQL Server didn't support row-level security\n(RLS) - a feature that's been around in Oracle and IBM's offerings for a while.\nIf you ran SQL Server and needed RLS, you had to build your own scheme which is\nexactly what I had to do for a recent project. I needed RLS for a new data\nwarehouse I was building using SQL Server 2014. The requirements called for\nstoring sensitive financial and sales data from multiple users in the same\ntables. I needed a scheme where a user could connect and extract just their data\nwithout seeing information for any others. Without native RLS, it is doable but\ntakes some work.\n\nIn this post, I'll cover the approach I settled on and then discuss my plan for\nmigrating to native RLS in SQL Server 2016.\n\nTable Structure\nMy first step was to add a column to each table named UserId  to identify the\nowner of the row. Its value could be used to filter out rows belonging to other\nusers. For example, the baseAccount  table below represents a typical setup.\n\nCREATE TABLE [dbo].[baseAccount](  \n    [UserId] [dbo].[UserId] NOT NULL,\n    [Id] [varchar](18) NOT NULL,\n    [Name] [nvarchar](100) NOT NULL,\n    [CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_baseAccount_CreatedDate]  DEFAULT (getdate()),\n CONSTRAINT [PK_Account] PRIMARY KEY CLUSTERED\n(\n    [UserId] ASC,\n    [Id] ASC\n))\n\n\nI left out most of the columns, but this gives you a general idea of how each\ntable was structured. I added the prefix base  to distinguish each table from\nits corresponding view. I also created a simple user-defined data type for the\nUserId column to enforce consistency.\n\nCREATE TYPE [dbo].[UserId] FROM [nvarchar](10) NOT NULL\nGO\n\n\nViews\nWith the tables in place, the next task was to create a view for each table.\nThis is were the UserId column comes into play. It is used to filter data by the\ncurrent user and ensure the user can see only their data. The where condition\nmakes an exception for database owners who have access to all data.\n\nCREATE VIEW [dbo].[Account]\nAS\nSELECT * FROM dbo.baseAccount\nWHERE USER_NAME() = 'dbo' OR dbo.baseAccount.UserId = USER_NAME()\n\n\nRestricting Access\nNext I restricted database access by creating a common role for all of the users\nin the data warehouse. This new role was granted SELECT rights to the views but\nnot their corresponding tables. This forced all data access to go through the\nviews where the RLS filtering took place.\n\nCREATE ROLE [useraccess];\n\n-- Allow access to the view but not the table\nGRANT SELECT ON [Account] TO [useraccess];\n\n\nWith the new role in place, it was time to create the logins and users. Each\nuser had a dedicated SQL Server login. For example, if John Smith had the\nWindows login somedomain\\jsmith, then his login was mapped to a user in the\ndatabase named jsmith.\n\n-- Create a new login\nCREATE LOGIN [somedomain\\jsmith] FROM WINDOWS;\n\n-- Map a user to the login\nCREATE USER [jsmith] FOR LOGIN [somedomain\\jsmith] WITH DEFAULT_SCHEMA=[dbo];\n\n-- Add him to useraccess role to access the views\nALTER ROLE [useraccess] ADD MEMBER [jsmith];\n\n\nAt this point I had a simple row-level security scheme. When John Smith queries\nthe database with his Windows account, he will only see data for his user. All\nother rows will be filtered out by the views.\n\nNative RLS in SQL Server 2016\nThis was a lot of work for something that should be native to any mainstream\nDBMS. SQL Server 2016 fixes this problem with the introduction of security\npolicies for row-level security. Fortunately, the RLS setup I've described so\nfar can be changed fairly easily to use security policies. The logins, users,\nand roles remain the same, but the views are replaced with a security policy per\ntable. Each security policy uses a function to determine row-level access.\n\nViews and Tables\nThe views are no longer needed and can be dropped. The base  prefix is removed\nfrom each table name, and SELECT permission is granted for the useraccess  role.\n\nDROP VIEW dbo.[Account];\n\nEXEC sp_rename 'dbo.baseAccount', 'Account';\n\nGRANT SELECT ON [Account] TO [useraccess];\n\n\nFilter Predicate\nSQL Server 2016 uses a function to determine access to a row. In this case, the\nfunction checks the value for the UserId column against the current user name.\nOddly, instead of returning a boolean value, it needs to return a table with a\nsingle row with a value of 1 for a match and nothing otherwise.\n\nCREATE FUNCTION dbo.UserAccess\n( @userId AS [nvarchar](10) )\nRETURNS TABLE\nWITH SCHEMABINDING\nAS\nRETURN SELECT 1 AS AccessRight\n    WHERE USER_NAME() = 'dbo' OR USER_NAME() = @userId\n\n\nSecurity Policy\nFinally, a security policy is applied per table to implement RLS.\n\nCREATE SECURITY POLICY AccountSecurityPolicy\nADD FILTER PREDICATE dbo.UserAccess(UserId) ON dbo.Account\nWITH (STATE = ON)\n\n\n\n--------------------------------------------------------------------------------\n\nSo that's a example of RLS implemented with and without security policies. I\nhave yet to use SQL Server 2016 in production, but I'm looking forward to the\nsimplicity that native RLS will bring.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"In this post I cover an approach for implementing row-level security in SQL Server and how to migrate to native RLS in version 2016.","author_id":"1","created_at":"2017-02-17T14:13:44.000Z","created_by":"1","updated_at":"2017-04-07T21:02:13.000Z","updated_by":"1","published_at":"2017-03-01T14:18:28.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4bc","uuid":"f692e3fe-57f3-4b3f-956b-8d8807af3d5d","title":"Workplace Trends: What's In and What's Out","slug":"workplace-trends-whats-in-and-whats-out","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\\"To every thing there is a season\\\" begins Ecclesiastes 3, and if the phase's writer were alive today, he might have had the modern workplace in mind (not really but it makes a good intro). On April 21, I celebrated my 40th birthday, and I've been reflecting on the fads and trends I've seen during my career. What were they? Why did they become popular? Why did they fade away? And, ultimately, what took their place?\\n\\n<style>\\n  span.out, span.in {\\n    display: inline-block;\\n    width: 50px;\\n    text-align: right;\\n    font-size: larger;\\n    font-weight: bold;\\n  }\\n\\n  span.in-out-text {\\n    font-size: larger;\\n    font-weight: bold;\\n    margin-left: 10px;\\n  }\\n</style>\\n\\n<span class=\\\"out\\\">Out:</span><span class=\\\"in-out-text\\\">MultiTasking</span>\\n<span class=\\\"in\\\">In:</span><span class=\\\"in-out-text\\\">Deep Work</span>\\n\\nAt the beginning of my career, it seemed like every interview and performance review included a question about my multitasking skills. \\\"Can you multitask well?\\\", they asked. Even though I couldn't, I knew the answer had to be yes. The implication was the business world was moving fast with many different facets. Multitasking was essential to get things done.\\n\\nFast forward to today. Multitasking is [out](https://www.psychologytoday.com/blog/creativity-without-borders/201405/the-myth-multitasking) and [deep work](https://www.amazon.com/dp/B00X47ZVXM) is in. The number of distractions competing for our attention has gotten out of hand. Children, work, email, devices, etc. Increasing productivity through multitasking is a myth. I've always been a fan of focus and concentration, and I welcome the deep work movement.\\n\\n<span class=\\\"out\\\">Out:</span><span class=\\\"in-out-text\\\">Cubicles and Open Offices</span>\\n<span class=\\\"in\\\">In:</span><span class=\\\"in-out-text\\\">Remote Work</span>\\n\\nThe cubicle. It's the embodiment of the soulless workplace. The much maligned cubicle has been mocked for years. They reduce employee productivity and increase stress levels. Together with the multitasking trend, they led to more distractions.\\n\\nTo solve this problem, companies, led by Google and Facebook, tore down cubicle walls and constructed open offices. Wait, what? At least cubicles had walls. Open offices effectively remove everything that encourages privacy and concentration. The argument in favor of open offices is they lead to more collaboration, but in my experience, the increase in \\\"collaboration\\\" is mostly people chatting about their weekends.\\n\\nLuckily, there's an [emerging trend for people to work remotely](https://37signals.com/remote) at home, in a coffee shop, or even on a beach in sunny Florida. Finally! A work environment with no distractions! Wait a minute...\\n\\n<span class=\\\"out\\\">Out:</span><span class=\\\"in-out-text\\\">Always Connected</span>\\n<span class=\\\"in\\\">In:</span><span class=\\\"in-out-text\\\">Work-life Balance</span>\\n\\nThere's a reason why Google provides free gourmet food, massages, rides, and laundry service to its employees. The company wants its workers always on, always connected, and always available.\\n\\nHowever, [evidence is mounting](https://www.google.com/search?q=long+work+hours+and+productivity) that this approach may not increase productivity. 16 hour days may not be any more productive than 8 hour days. Today, work-life balance is making a comeback. More people are taking the time to put down their devices and make real connections at home and in their communities.\\n\\n<span class=\\\"out\\\">Out:</span><span class=\\\"in-out-text\\\">Social Media</span>\\n<span class=\\\"in\\\">In:</span><span class=\\\"in-out-text\\\">Books and Newspapers</span>\\n\\nSocial media is not out by any stretch, but more people are recognizing the harm it does to our personal lives and society. At best, it's a time-wasting distraction. At worst, it spreads disinformation like wildfire. More and more people are rediscovering books and newspapers (print or online) for real information. Speaking for myself, I spend more time in my Kindle app than in Twitter, Facebook, and LinkedIn combined. The knowledge gained from books seems more substantial and satisfying.\\n\\nThe modern office is a dynamic place with fads coming and going. Overall I think workplace trends are moving in a healthy direction. Deep work and remote work combine to make work-life balance realistic for many professionals. Social media is here to stay, but people are recognizing that like junk food, it's best consumed in small quantities. I'm looking forward to seeing how present trends pan out and writing another article in 15 years.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>&quot;To every thing there is a season&quot; begins Ecclesiastes 3, and if the phase's writer were alive today, he might have had the modern workplace in mind (not really but it makes a good intro). On April 21, I celebrated my 40th birthday, and I've been reflecting on the fads and trends I've seen during my career. What were they? Why did they become popular? Why did they fade away? And, ultimately, what took their place?</p>\n<style>\n  span.out, span.in {\n    display: inline-block;\n    width: 50px;\n    text-align: right;\n    font-size: larger;\n    font-weight: bold;\n  }\n\n  span.in-out-text {\n    font-size: larger;\n    font-weight: bold;\n    margin-left: 10px;\n  }\n</style>\n<p><span class=\"out\">Out:</span><span class=\"in-out-text\">MultiTasking</span><br>\n<span class=\"in\">In:</span><span class=\"in-out-text\">Deep Work</span></p>\n<p>At the beginning of my career, it seemed like every interview and performance review included a question about my multitasking skills. &quot;Can you multitask well?&quot;, they asked. Even though I couldn't, I knew the answer had to be yes. The implication was the business world was moving fast with many different facets. Multitasking was essential to get things done.</p>\n<p>Fast forward to today. Multitasking is <a href=\"https://www.psychologytoday.com/blog/creativity-without-borders/201405/the-myth-multitasking\">out</a> and <a href=\"https://www.amazon.com/dp/B00X47ZVXM\">deep work</a> is in. The number of distractions competing for our attention has gotten out of hand. Children, work, email, devices, etc. Increasing productivity through multitasking is a myth. I've always been a fan of focus and concentration, and I welcome the deep work movement.</p>\n<p><span class=\"out\">Out:</span><span class=\"in-out-text\">Cubicles and Open Offices</span><br>\n<span class=\"in\">In:</span><span class=\"in-out-text\">Remote Work</span></p>\n<p>The cubicle. It's the embodiment of the soulless workplace. The much maligned cubicle has been mocked for years. They reduce employee productivity and increase stress levels. Together with the multitasking trend, they led to more distractions.</p>\n<p>To solve this problem, companies, led by Google and Facebook, tore down cubicle walls and constructed open offices. Wait, what? At least cubicles had walls. Open offices effectively remove everything that encourages privacy and concentration. The argument in favor of open offices is they lead to more collaboration, but in my experience, the increase in &quot;collaboration&quot; is mostly people chatting about their weekends.</p>\n<p>Luckily, there's an <a href=\"https://37signals.com/remote\">emerging trend for people to work remotely</a> at home, in a coffee shop, or even on a beach in sunny Florida. Finally! A work environment with no distractions! Wait a minute...</p>\n<p><span class=\"out\">Out:</span><span class=\"in-out-text\">Always Connected</span><br>\n<span class=\"in\">In:</span><span class=\"in-out-text\">Work-life Balance</span></p>\n<p>There's a reason why Google provides free gourmet food, massages, rides, and laundry service to its employees. The company wants its workers always on, always connected, and always available.</p>\n<p>However, <a href=\"https://www.google.com/search?q=long+work+hours+and+productivity\">evidence is mounting</a> that this approach may not increase productivity. 16 hour days may not be any more productive than 8 hour days. Today, work-life balance is making a comeback. More people are taking the time to put down their devices and make real connections at home and in their communities.</p>\n<p><span class=\"out\">Out:</span><span class=\"in-out-text\">Social Media</span><br>\n<span class=\"in\">In:</span><span class=\"in-out-text\">Books and Newspapers</span></p>\n<p>Social media is not out by any stretch, but more people are recognizing the harm it does to our personal lives and society. At best, it's a time-wasting distraction. At worst, it spreads disinformation like wildfire. More and more people are rediscovering books and newspapers (print or online) for real information. Speaking for myself, I spend more time in my Kindle app than in Twitter, Facebook, and LinkedIn combined. The knowledge gained from books seems more substantial and satisfying.</p>\n<p>The modern office is a dynamic place with fads coming and going. Overall I think workplace trends are moving in a healthy direction. Deep work and remote work combine to make work-life balance realistic for many professionals. Social media is here to stay, but people are recognizing that like junk food, it's best consumed in small quantities. I'm looking forward to seeing how present trends pan out and writing another article in 15 years.</p>\n</div>","amp":"91","plaintext":"\"To every thing there is a season\" begins Ecclesiastes 3, and if the phase's\nwriter were alive today, he might have had the modern workplace in mind (not\nreally but it makes a good intro). On April 21, I celebrated my 40th birthday,\nand I've been reflecting on the fads and trends I've seen during my career. What\nwere they? Why did they become popular? Why did they fade away? And, ultimately,\nwhat took their place?\n\nOut:MultiTasking\nIn:Deep Work\n\nAt the beginning of my career, it seemed like every interview and performance\nreview included a question about my multitasking skills. \"Can you multitask\nwell?\", they asked. Even though I couldn't, I knew the answer had to be yes. The\nimplication was the business world was moving fast with many different facets.\nMultitasking was essential to get things done.\n\nFast forward to today. Multitasking is out\n[https://www.psychologytoday.com/blog/creativity-without-borders/201405/the-myth-multitasking] \n and deep work [https://www.amazon.com/dp/B00X47ZVXM]  is in. The number of\ndistractions competing for our attention has gotten out of hand. Children, work,\nemail, devices, etc. Increasing productivity through multitasking is a myth.\nI've always been a fan of focus and concentration, and I welcome the deep work\nmovement.\n\nOut:Cubicles and Open Offices\nIn:Remote Work\n\nThe cubicle. It's the embodiment of the soulless workplace. The much maligned\ncubicle has been mocked for years. They reduce employee productivity and\nincrease stress levels. Together with the multitasking trend, they led to more\ndistractions.\n\nTo solve this problem, companies, led by Google and Facebook, tore down cubicle\nwalls and constructed open offices. Wait, what? At least cubicles had walls.\nOpen offices effectively remove everything that encourages privacy and\nconcentration. The argument in favor of open offices is they lead to more\ncollaboration, but in my experience, the increase in \"collaboration\" is mostly\npeople chatting about their weekends.\n\nLuckily, there's an emerging trend for people to work remotely\n[https://37signals.com/remote]  at home, in a coffee shop, or even on a beach in\nsunny Florida. Finally! A work environment with no distractions! Wait a\nminute...\n\nOut:Always Connected\nIn:Work-life Balance\n\nThere's a reason why Google provides free gourmet food, massages, rides, and\nlaundry service to its employees. The company wants its workers always on,\nalways connected, and always available.\n\nHowever, evidence is mounting\n[https://www.google.com/search?q=long+work+hours+and+productivity]  that this\napproach may not increase productivity. 16 hour days may not be any more\nproductive than 8 hour days. Today, work-life balance is making a comeback. More\npeople are taking the time to put down their devices and make real connections\nat home and in their communities.\n\nOut:Social Media\nIn:Books and Newspapers\n\nSocial media is not out by any stretch, but more people are recognizing the harm\nit does to our personal lives and society. At best, it's a time-wasting\ndistraction. At worst, it spreads disinformation like wildfire. More and more\npeople are rediscovering books and newspapers (print or online) for real\ninformation. Speaking for myself, I spend more time in my Kindle app than in\nTwitter, Facebook, and LinkedIn combined. The knowledge gained from books seems\nmore substantial and satisfying.\n\nThe modern office is a dynamic place with fads coming and going. Overall I think\nworkplace trends are moving in a healthy direction. Deep work and remote work\ncombine to make work-life balance realistic for many professionals. Social media\nis here to stay, but people are recognizing that like junk food, it's best\nconsumed in small quantities. I'm looking forward to seeing how present trends\npan out and writing another article in 15 years.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"A look at what's in and what's out in the modern workplace. Multitasking vs deep work. Cubicles vs remote. Always connected vs work-life balance.","author_id":"1","created_at":"2017-04-27T13:09:34.000Z","created_by":"1","updated_at":"2017-05-03T13:23:18.000Z","updated_by":"1","published_at":"2017-05-03T13:17:21.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4bd","uuid":"c2ac517a-25ad-453e-8eef-cc9c34e75bf7","title":"Getting Started with Selenium, SpecFlow, and .NET","slug":"getting-started-with-selenium-specflow-and-dot-net","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Selenium is a library used to automate web browsers. It uses a common web driver interface, and each web browser, Chrome, Firefox, IE, has a corresponding implementation that takes advantage of the browser's native API.\\n\\nI don't have much experience with browser automation. In fact, I try to avoid it as much as possible in favor of testing at the unit and service level. Tests running through the browser tend to be brittle due to the non-deterministic nature of web pages. Despite this, familiarity with Selenium is still valuable due to its popularity.\\n\\nThe following is a guide to get newcomers up and running with Selenium in .NET. It includes project setup, a simple scenario, and refactoring for more maintainable code.\\n\\n#### NuGet Packages\\n\\nBefore we get into the details of Selenium, you'll need to create a new project in Visual Studio and add some dependencies from NuGet. Below are the NuGet packages I typically include.\\n\\n1. NUnit (or any other unit testing framework supported by SpecFlow)\\n2. SpecFlow\\n3. Selenium.WebDriver\\n4. Selenium.WebDriver.ChromeDriver (or any other browser driver)\\n5. Selenium.Support (optional)\\n6. NUnit.ConsoleRunner (optional)\\n\\n**Selenium.Support** is optional but highly recommended. It contains useful helper methods that complement the Selenium.WebDriver API. For example, the Selenium API is asynchronous and non-deterministic, and Selenium.Support's waiting methods make using it much easier.\\n\\nNUnit.ConsoleRunner is also optional if you're using NUnit and need a test runner. Other options include using Resharper's test runner or NUnit's CLI.\\n\\n#### Google Search\\n\\nNow that the project is set up, the next step is to choose a simple example to demonstrate the basics of Selenium. I went with validating a Google search. The SpecFlow feature definition below includes Gherkin for validating a search for the keyword *kittens*.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/53ab562884b47378fe577dc9a70a205a.js\\\"></script>\\n\\nNext I added a SpecFlow step definition file.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a919a84a75081008151ef7da71bbb428.js\\\"></script>\\n\\n#### IWebDriver\\n\\nAt this point the test should run and pass. Let's take a closer look at how Selenium works. The core of its architecture includes the `IWebDriver` interface and an implementation for each of the major browsers. In this example, I went with the Chrome driver; however, a more robust test suite would include the other browsers and the ability to switch between them.\\n\\n```\\nprivate readonly IWebDriver _webDriver;\\n```\\n\\nThe web driver field is declared as `IWebDriver` and is assigned in the constructor.\\n\\n```\\n_webDriver = new ChromeDriver();\\n```\\n\\nIt will be used by the test to launch the browser, navigate to a web page, and manipulate the elements on the page.\\n\\n#### IWait\\n\\nThe `WebDriver.Support` library is technically optional, but the reality is its helper classes make Selenium much easier to use. The most useful of these helpers are the implementations of `IWait`.\\n\\n```\\nprivate readonly IWait<IWebDriver> _defaultWait;\\n```\\n\\nI included a default wait configuration in the step bindings with a timeout of five seconds and a polling interval of 100 milliseconds.\\n\\n```\\n_defaultWait = new WebDriverWait(_webDriver, TimeSpan.FromSeconds(5))\\n{\\n    PollingInterval = TimeSpan.FromMilliseconds(100)\\n};\\n```\\n\\nThe `WebDriverWait` class is useful when you need to find dynamic HTML elements on a page like those created after an XHR request. You don't know when the elements will appear, so the test steps need to poll until they load.\\n\\n```\\nIWebElement searchResultsHeader = _defaultWait.Until(d =>\\n{\\n    var results = d.FindElements(By.CssSelector(\\\"h2\\\"));\\n    return results.FirstOrDefault(h => h.GetAttribute(\\\"innerText\\\") == \\\"Search Results\\\");\\n});\\n\\nAssert.IsNotNull(searchResultsHeader);\\n\\nIWebElement resultsDiv =\\n    _defaultWait.Until(\\n        ExpectedConditions.ElementExists(By.CssSelector($\\\"div[data-async-context=\\\\\\\"query:{_searchTerm}\\\\\\\"]\\\")));\\n\\nAssert.IsNotEmpty(resultsDiv.Text);\\n```\\n\\nThe validation step uses `_defaultWait.Until()` to find the search results header and the `<div />` element containing the results. The Until method repeatedly invokes the callback argument until a non-null value is returned or the timeout expires. `ExpectedConditions.ElementExists` and `By.CssSelector` are useful helpers that build out the `Func<IWebDriver, IWebElement>` argument.\\n\\n#### Cleaning Up\\n\\nOnce the test scenario has completed, the browser and accompanying command window need to be shut down. This is implemented as an AfterScenario hook.\\n\\n```\\n[AfterScenario]\\npublic void CleanUp()\\n{\\n    _webDriver.Quit();\\n}\\n```\\n\\n#### Refactoring for Composition\\n\\nAt this point, the test runs well as an isolated example, but it could be improved to make it more [composable](https://en.wikipedia.org/wiki/Composability). Design choices like setting the browser and default wait parameters within the class make it difficult to reuse. What if we wanted to do a test run with Firefox? Or change the timeout to 10 seconds for a particular environment? One option is to create a base class with subclasses for  each browser. Another is to take advantage of SpecFlow's DI framework to inject dependencies like the IWebDriver implementation.\\n\\nI decided to go with DI over subclassing. I pulled the web driver setup and tear-down code out of the `GoogleSearch` class and into its own class called `BootstrapSelenium`. I also moved the default wait code. In addition I added some application settings to make the web driver type and wait timeout/poll interval configurable. As more tests are added, they will not need to configure their own web drivers.\\n\\nAnother advantage of this change is `GoogleSearch` becomes solely focused on providing the step implementations for the Gherkin, and the bootstrap class handles test setup and tear-down. Each class is simpler and more in line with the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle).\\n\\nBelow are the two refactored classes. You can find the [full source on GitHub](https://github.com/joebuschmann/selenium-demo).\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4fffd1bd7934eeac402c66fdbdf8cde0.js\\\"></script>\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a4b81045917c5359dfb13d9403b6a202.js\\\"></script>\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Selenium is a library used to automate web browsers. It uses a common web driver interface, and each web browser, Chrome, Firefox, IE, has a corresponding implementation that takes advantage of the browser's native API.</p>\n<p>I don't have much experience with browser automation. In fact, I try to avoid it as much as possible in favor of testing at the unit and service level. Tests running through the browser tend to be brittle due to the non-deterministic nature of web pages. Despite this, familiarity with Selenium is still valuable due to its popularity.</p>\n<p>The following is a guide to get newcomers up and running with Selenium in .NET. It includes project setup, a simple scenario, and refactoring for more maintainable code.</p>\n<h4 id=\"nugetpackages\">NuGet Packages</h4>\n<p>Before we get into the details of Selenium, you'll need to create a new project in Visual Studio and add some dependencies from NuGet. Below are the NuGet packages I typically include.</p>\n<ol>\n<li>NUnit (or any other unit testing framework supported by SpecFlow)</li>\n<li>SpecFlow</li>\n<li>Selenium.WebDriver</li>\n<li>Selenium.WebDriver.ChromeDriver (or any other browser driver)</li>\n<li>Selenium.Support (optional)</li>\n<li>NUnit.ConsoleRunner (optional)</li>\n</ol>\n<p><strong>Selenium.Support</strong> is optional but highly recommended. It contains useful helper methods that complement the Selenium.WebDriver API. For example, the Selenium API is asynchronous and non-deterministic, and Selenium.Support's waiting methods make using it much easier.</p>\n<p>NUnit.ConsoleRunner is also optional if you're using NUnit and need a test runner. Other options include using Resharper's test runner or NUnit's CLI.</p>\n<h4 id=\"googlesearch\">Google Search</h4>\n<p>Now that the project is set up, the next step is to choose a simple example to demonstrate the basics of Selenium. I went with validating a Google search. The SpecFlow feature definition below includes Gherkin for validating a search for the keyword <em>kittens</em>.</p>\n<script src=\"https://gist.github.com/joebuschmann/53ab562884b47378fe577dc9a70a205a.js\"></script>\n<p>Next I added a SpecFlow step definition file.</p>\n<script src=\"https://gist.github.com/joebuschmann/a919a84a75081008151ef7da71bbb428.js\"></script>\n<h4 id=\"iwebdriver\">IWebDriver</h4>\n<p>At this point the test should run and pass. Let's take a closer look at how Selenium works. The core of its architecture includes the <code>IWebDriver</code> interface and an implementation for each of the major browsers. In this example, I went with the Chrome driver; however, a more robust test suite would include the other browsers and the ability to switch between them.</p>\n<pre><code>private readonly IWebDriver _webDriver;\n</code></pre>\n<p>The web driver field is declared as <code>IWebDriver</code> and is assigned in the constructor.</p>\n<pre><code>_webDriver = new ChromeDriver();\n</code></pre>\n<p>It will be used by the test to launch the browser, navigate to a web page, and manipulate the elements on the page.</p>\n<h4 id=\"iwait\">IWait</h4>\n<p>The <code>WebDriver.Support</code> library is technically optional, but the reality is its helper classes make Selenium much easier to use. The most useful of these helpers are the implementations of <code>IWait</code>.</p>\n<pre><code>private readonly IWait&lt;IWebDriver&gt; _defaultWait;\n</code></pre>\n<p>I included a default wait configuration in the step bindings with a timeout of five seconds and a polling interval of 100 milliseconds.</p>\n<pre><code>_defaultWait = new WebDriverWait(_webDriver, TimeSpan.FromSeconds(5))\n{\n    PollingInterval = TimeSpan.FromMilliseconds(100)\n};\n</code></pre>\n<p>The <code>WebDriverWait</code> class is useful when you need to find dynamic HTML elements on a page like those created after an XHR request. You don't know when the elements will appear, so the test steps need to poll until they load.</p>\n<pre><code>IWebElement searchResultsHeader = _defaultWait.Until(d =&gt;\n{\n    var results = d.FindElements(By.CssSelector(&quot;h2&quot;));\n    return results.FirstOrDefault(h =&gt; h.GetAttribute(&quot;innerText&quot;) == &quot;Search Results&quot;);\n});\n\nAssert.IsNotNull(searchResultsHeader);\n\nIWebElement resultsDiv =\n    _defaultWait.Until(\n        ExpectedConditions.ElementExists(By.CssSelector($&quot;div[data-async-context=\\&quot;query:{_searchTerm}\\&quot;]&quot;)));\n\nAssert.IsNotEmpty(resultsDiv.Text);\n</code></pre>\n<p>The validation step uses <code>_defaultWait.Until()</code> to find the search results header and the <code>&lt;div /&gt;</code> element containing the results. The Until method repeatedly invokes the callback argument until a non-null value is returned or the timeout expires. <code>ExpectedConditions.ElementExists</code> and <code>By.CssSelector</code> are useful helpers that build out the <code>Func&lt;IWebDriver, IWebElement&gt;</code> argument.</p>\n<h4 id=\"cleaningup\">Cleaning Up</h4>\n<p>Once the test scenario has completed, the browser and accompanying command window need to be shut down. This is implemented as an AfterScenario hook.</p>\n<pre><code>[AfterScenario]\npublic void CleanUp()\n{\n    _webDriver.Quit();\n}\n</code></pre>\n<h4 id=\"refactoringforcomposition\">Refactoring for Composition</h4>\n<p>At this point, the test runs well as an isolated example, but it could be improved to make it more <a href=\"https://en.wikipedia.org/wiki/Composability\">composable</a>. Design choices like setting the browser and default wait parameters within the class make it difficult to reuse. What if we wanted to do a test run with Firefox? Or change the timeout to 10 seconds for a particular environment? One option is to create a base class with subclasses for  each browser. Another is to take advantage of SpecFlow's DI framework to inject dependencies like the IWebDriver implementation.</p>\n<p>I decided to go with DI over subclassing. I pulled the web driver setup and tear-down code out of the <code>GoogleSearch</code> class and into its own class called <code>BootstrapSelenium</code>. I also moved the default wait code. In addition I added some application settings to make the web driver type and wait timeout/poll interval configurable. As more tests are added, they will not need to configure their own web drivers.</p>\n<p>Another advantage of this change is <code>GoogleSearch</code> becomes solely focused on providing the step implementations for the Gherkin, and the bootstrap class handles test setup and tear-down. Each class is simpler and more in line with the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility principle</a>.</p>\n<p>Below are the two refactored classes. You can find the <a href=\"https://github.com/joebuschmann/selenium-demo\">full source on GitHub</a>.</p>\n<script src=\"https://gist.github.com/joebuschmann/4fffd1bd7934eeac402c66fdbdf8cde0.js\"></script>\n<script src=\"https://gist.github.com/joebuschmann/a4b81045917c5359dfb13d9403b6a202.js\"></script></div>","amp":"92","plaintext":"Selenium is a library used to automate web browsers. It uses a common web driver\ninterface, and each web browser, Chrome, Firefox, IE, has a corresponding\nimplementation that takes advantage of the browser's native API.\n\nI don't have much experience with browser automation. In fact, I try to avoid it\nas much as possible in favor of testing at the unit and service level. Tests\nrunning through the browser tend to be brittle due to the non-deterministic\nnature of web pages. Despite this, familiarity with Selenium is still valuable\ndue to its popularity.\n\nThe following is a guide to get newcomers up and running with Selenium in .NET.\nIt includes project setup, a simple scenario, and refactoring for more\nmaintainable code.\n\nNuGet Packages\nBefore we get into the details of Selenium, you'll need to create a new project\nin Visual Studio and add some dependencies from NuGet. Below are the NuGet\npackages I typically include.\n\n 1. NUnit (or any other unit testing framework supported by Specflow)\n 2. Specflow\n 3. Selenium.WebDriver\n 4. Selenium.WebDriver.ChromeDriver (or any other browser driver)\n 5. Selenium.Support (optional)\n 6. NUnit.ConsoleRunner (optional)\n\nSelenium.Support  is optional but highly recommended. It contains useful helper\nmethods that complement the Selenium.WebDriver API. For example, the Selenium\nAPI is asynchronous and non-deterministic, and Selenium.Support's waiting\nmethods make using it much easier.\n\nNUnit.ConsoleRunner is also optional if you're using NUnit and need a test\nrunner. Other options include using Resharper's test runner or NUnit's CLI.\n\nGoogle Search\nNow that the project is set up, the next step is to choose a simple example to\ndemonstrate the basics of Selenium. I went with validating a Google search. The\nSpecflow feature definition below includes Gherkin for validating a search for\nthe keyword kittens.\n\nNext I added a Specflow step definition file.\n\nIWebDriver\nAt this point the test should run and pass. Let's take a closer look at how\nSelenium works. The core of its architecture includes the IWebDriver  interface\nand an implementation for each of the major browsers. In this example, I went\nwith the Chrome driver; however, a more robust test suite would include the\nother browsers and the ability to switch between them.\n\nprivate readonly IWebDriver _webDriver;\n\n\nThe web driver field is declared as IWebDriver  and is assigned in the\nconstructor.\n\n_webDriver = new ChromeDriver();\n\n\nIt will be used by the test to launch the browser, navigate to a web page, and\nmanipulate the elements on the page.\n\nIWait\nThe WebDriver.Support  library is technically optional, but the reality is its\nhelper classes make Selenium much easier to use. The most useful of these\nhelpers are the implementations of IWait.\n\nprivate readonly IWait<IWebDriver> _defaultWait;\n\n\nI included a default wait configuration in the step bindings with a timeout of\nfive seconds and a polling interval of 100 milliseconds.\n\n_defaultWait = new WebDriverWait(_webDriver, TimeSpan.FromSeconds(5))\n{\n    PollingInterval = TimeSpan.FromMilliseconds(100)\n};\n\n\nThe WebDriverWait  class is useful when you need to find dynamic HTML elements\non a page like those created after an XHR request. You don't know when the\nelements will appear, so the test steps need to poll until they load.\n\nIWebElement searchResultsHeader = _defaultWait.Until(d =>\n{\n    var results = d.FindElements(By.CssSelector(\"h2\"));\n    return results.FirstOrDefault(h => h.GetAttribute(\"innerText\") == \"Search Results\");\n});\n\nAssert.IsNotNull(searchResultsHeader);\n\nIWebElement resultsDiv =\n    _defaultWait.Until(\n        ExpectedConditions.ElementExists(By.CssSelector($\"div[data-async-context=\\\"query:{_searchTerm}\\\"]\")));\n\nAssert.IsNotEmpty(resultsDiv.Text);\n\n\nThe validation step uses _defaultWait.Until()  to find the search results header\nand the <div />  element containing the results. The Until method repeatedly\ninvokes the callback argument until a non-null value is returned or the timeout\nexpires. ExpectedConditions.ElementExists  and By.CssSelector  are useful\nhelpers that build out the Func<IWebDriver, IWebElement>  argument.\n\nCleaning Up\nOnce the test scenario has completed, the browser and accompanying command\nwindow need to be shut down. This is implemented as an AfterScenario hook.\n\n[AfterScenario]\npublic void CleanUp()\n{\n    _webDriver.Quit();\n}\n\n\nRefactoring for Composition\nAt this point, the test runs well as an isolated example, but it could be\nimproved to make it more composable\n[https://en.wikipedia.org/wiki/Composability]. Design choices like setting the\nbrowser and default wait parameters within the class make it difficult to reuse.\nWhat if we wanted to do a test run with Firefox? Or change the timeout to 10\nseconds for a particular environment? One option is to create a base class with\nsubclasses for each browser. Another is to take advantage of Specflow's DI\nframework to inject dependencies like the IWebDriver implementation.\n\nI decided to go with DI over subclassing. I pulled the web driver setup and\ntear-down code out of the GoogleSearch  class and into its own class called \nBootstrapSelenium. I also moved the default wait code. In addition I added some\napplication settings to make the web driver type and wait timeout/poll interval\nconfigurable. As more tests are added, they will not need to configure their own\nweb drivers.\n\nAnother advantage of this change is GoogleSearch  becomes solely focused on\nproviding the step implementations for the Gherkin, and the bootstrap class\nhandles test setup and tear-down. Each class is simpler and more in line with\nthe single responsibility principle\n[https://en.wikipedia.org/wiki/Single_responsibility_principle].\n\nBelow are the two refactored classes. You can find the full source on GitHub\n[https://github.com/joebuschmann/selenium-demo].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"A guide to get newcomers up and running with Selenium in .NET. It includes project setup, a simple scenario, and refactoring for more maintainable code.","author_id":"1","created_at":"2017-04-27T13:19:03.000Z","created_by":"1","updated_at":"2017-10-22T03:15:35.000Z","updated_by":"1","published_at":"2017-05-30T19:54:01.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59ba7e6c0e5e5d0019f7b4be","uuid":"3f9f9e7a-89e2-4a06-86bf-2b2342504d52","title":"How to Win Friends and Influence People (In a Nutshell)","slug":"how-to-win-friends-and-influence-people-in-a-nutshell","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently finished the famous book [How to Win Friends and Influence People](https://www.amazon.com/How-Win-Friends-Influence-People-ebook/dp/B003WEAI4E) by Dale Carnegie. It was first published in 1937 and continues to be a best seller today. The following is a cheat sheet which summarizes the points Carnegie makes in the book.\\n\\n###### PART ONE: Fundamental Techniques of Handling People\\n\\n1. Don't criticize, condemn, or complain.\\n2. Give honest and sincere appreciation.\\n3. Arouse in the other person an eager want.\\n\\n###### PART TWO: Six Ways to Make People Like You\\n\\n1. Become genuinely interested in other people.\\n2. Smile.\\n3. Remember that a person's name is to that person the sweetest and most important sound in any language.\\n4. Be a good listener. Encourage others to talk about themselves.\\n5. Talk in terms of the other person's interests.\\n6. Make the other person feel important--and do it sincerely.\\n\\n###### PART THREE: How to Win People to Your Way of Thinking\\n\\n1. The only way to get the best of an argument is to avoid it.\\n2. Show respect for the other person's opinions. Never say, \\\"You're wrong.\\\"\\n3. If you are wrong, admit it quickly and emphatically.\\n4. Begin in a friendly way.\\n5. Get the other person saying \\\"yes, yes\\\" immediately.\\n6. Let the other person do a great deal of the talking.\\n7. Let the other person feel that the idea is his or hers.\\n8. Try honestly to see things from the other person's point of view.\\n9. Be sympathetic with the other person's ideas and desires.\\n10. Appeal to the nobler motives.\\n11. Dramatize your ideas.\\n12. Throw down a challenge.\\n\\n###### PART FOUR: Be a Leader: How to Change People Without Giving Offense or Arousing Resentment\\n\\n1. Begin with praise and honest appreciation.\\n2. Call attention to people's mistakes indirectly.\\n3. Talk about your own mistakes before criticizing the other person.\\n4. Ask questions instead of giving direct orders.\\n5. Let the other person save face.\\n6. Praise the slightest improvement and praise every improvement. Be \\\"hearty in your approbation and lavish in your praise.\\\"\\n7. Give the other person a fine reputation to live up to.\\n8. Use encouragement. Make the fault seem easy to correct.\\n9. Make the other person happy about doing the thing you suggest.\\n\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I recently finished the famous book <a href=\"https://www.amazon.com/How-Win-Friends-Influence-People-ebook/dp/B003WEAI4E\">How to Win Friends and Influence People</a> by Dale Carnegie. It was first published in 1937 and continues to be a best seller today. The following is a cheat sheet which summarizes the points Carnegie makes in the book.</p>\n<h6 id=\"partonefundamentaltechniquesofhandlingpeople\">PART ONE: Fundamental Techniques of Handling People</h6>\n<ol>\n<li>Don't criticize, condemn, or complain.</li>\n<li>Give honest and sincere appreciation.</li>\n<li>Arouse in the other person an eager want.</li>\n</ol>\n<h6 id=\"parttwosixwaystomakepeoplelikeyou\">PART TWO: Six Ways to Make People Like You</h6>\n<ol>\n<li>Become genuinely interested in other people.</li>\n<li>Smile.</li>\n<li>Remember that a person's name is to that person the sweetest and most important sound in any language.</li>\n<li>Be a good listener. Encourage others to talk about themselves.</li>\n<li>Talk in terms of the other person's interests.</li>\n<li>Make the other person feel important--and do it sincerely.</li>\n</ol>\n<h6 id=\"partthreehowtowinpeopletoyourwayofthinking\">PART THREE: How to Win People to Your Way of Thinking</h6>\n<ol>\n<li>The only way to get the best of an argument is to avoid it.</li>\n<li>Show respect for the other person's opinions. Never say, &quot;You're wrong.&quot;</li>\n<li>If you are wrong, admit it quickly and emphatically.</li>\n<li>Begin in a friendly way.</li>\n<li>Get the other person saying &quot;yes, yes&quot; immediately.</li>\n<li>Let the other person do a great deal of the talking.</li>\n<li>Let the other person feel that the idea is his or hers.</li>\n<li>Try honestly to see things from the other person's point of view.</li>\n<li>Be sympathetic with the other person's ideas and desires.</li>\n<li>Appeal to the nobler motives.</li>\n<li>Dramatize your ideas.</li>\n<li>Throw down a challenge.</li>\n</ol>\n<h6 id=\"partfourbealeaderhowtochangepeoplewithoutgivingoffenseorarousingresentment\">PART FOUR: Be a Leader: How to Change People Without Giving Offense or Arousing Resentment</h6>\n<ol>\n<li>Begin with praise and honest appreciation.</li>\n<li>Call attention to people's mistakes indirectly.</li>\n<li>Talk about your own mistakes before criticizing the other person.</li>\n<li>Ask questions instead of giving direct orders.</li>\n<li>Let the other person save face.</li>\n<li>Praise the slightest improvement and praise every improvement. Be &quot;hearty in your approbation and lavish in your praise.&quot;</li>\n<li>Give the other person a fine reputation to live up to.</li>\n<li>Use encouragement. Make the fault seem easy to correct.</li>\n<li>Make the other person happy about doing the thing you suggest.</li>\n</ol>\n</div>","amp":"93","plaintext":"I recently finished the famous book How to Win Friends and Influence People\n[https://www.amazon.com/How-Win-Friends-Influence-People-ebook/dp/B003WEAI4E] \nby Dale Carnegie. It was first published in 1937 and continues to be a best\nseller today. The following is a cheat sheet which summarizes the points\nCarnegie makes in the book.\n\nPART ONE: Fundamental Techniques of Handling People\n 1. Don't criticize, condemn, or complain.\n 2. Give honest and sincere appreciation.\n 3. Arouse in the other person an eager want.\n\nPART TWO: Six Ways to Make People Like You\n 1. Become genuinely interested in other people.\n 2. Smile.\n 3. Remember that a person's name is to that person the sweetest and most\n    important sound in any language.\n 4. Be a good listener. Encourage others to talk about themselves.\n 5. Talk in terms of the other person's interests.\n 6. Make the other person feel important--and do it sincerely.\n\nPART THREE: How to Win People to Your Way of Thinking\n 1.  The only way to get the best of an argument is to avoid it.\n 2.  Show respect for the other person's opinions. Never say, \"You're wrong.\"\n 3.  If you are wrong, admit it quickly and emphatically.\n 4.  Begin in a friendly way.\n 5.  Get the other person saying \"yes, yes\" immediately.\n 6.  Let the other person do a great deal of the talking.\n 7.  Let the other person feel that the idea is his or hers.\n 8.  Try honestly to see things from the other person's point of view.\n 9.  Be sympathetic with the other person's ideas and desires.\n 10. Appeal to the nobler motives.\n 11. Dramatize your ideas.\n 12. Throw down a challenge.\n\nPART FOUR: Be a Leader: How to Change People Without Giving Offense or Arousing\nResentment\n 1. Begin with praise and honest appreciation.\n 2. Call attention to people's mistakes indirectly.\n 3. Talk about your own mistakes before criticizing the other person.\n 4. Ask questions instead of giving direct orders.\n 5. Let the other person save face.\n 6. Praise the slightest improvement and praise every improvement. Be \"hearty in\n    your approbation and lavish in your praise.\"\n 7. Give the other person a fine reputation to live up to.\n 8. Use encouragement. Make the fault seem easy to correct.\n 9. Make the other person happy about doing the thing you suggest.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"A cheat sheet which summarizes the book How to Win Friends and Influence People by Dale Carnegie.","author_id":"1","created_at":"2017-05-30T19:57:15.000Z","created_by":"1","updated_at":"2017-05-30T20:30:44.000Z","updated_by":"1","published_at":"2017-05-30T20:30:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"59e683b46eb54f00239ec0f8","uuid":"cc65726b-95d9-4eda-adb5-a1c3cc1eac60","title":"SpecFlow NUnit3 Generator Plugin","slug":"specflow-nunit3-generator-plugin","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I recently created a SpecFlow plugin to solve a peculiar problem with NUnit test code generation. The issue is SpecFlow will generate test code that doesn't compile when the .NET project containing the SpecFlow scenarios has a default namespace with the word NUnit. For example, if your project has the namespace `IntegrationTests.NUnit`, then you'll receive the following error when trying to build.\\n\\n>The type or namespace name 'Framework' does not exist in the namespace 'IntegrationTests.NUnit' (are you missing an assembly reference?)\\n>\\n>Cannot resolve symbol 'Framework'\\n\\nThe conflict arises in the NUnit attributes in the test code. They are all qualified by the namespace `NUnit.Framework`, but because the project contains the default namespace `IntegrationTests.NUnit`, the compiler will expect the NUnit library types to be under `IntegrationTests.NUnit.Framework`. The work-around is either 1) to change the project's default namespace and update all of its types or 2) to qualify the NUnit attributes with C#'s `global` keyword. I recommend approach one when possible, but approach two is more fun and makes for a good blog post.\\n\\nTo implement approach two, I created a SpecFlow plugin to alter the behavior of the default NUnit3 code generator to qualify namespaces with `global`.\\n\\nFor example:\\n\\n```\\n[NUnit.Framework.TestFixtureAttribute()]\\n```\\n\\nbecomes\\n\\n```\\n[global::NUnit.Framework.TestFixtureAttribute()]\\n```\\n\\nNow the compiler knows to resolve the attribute type starting at the global namespace instead of the project namespace.\\n\\n### The Plugin Implementation\\n\\nThere are three types of SpecFlow plugins (Runtime, Generator, and Runtime-Generator). For this scenario, I needed to create a Generator plugin which is made of two parts. The first is an implementation of `IGeneratorPlugin` which allows you to alter the behavior of SpecFlow by updating the dependencies in its container. The snippet below replaces the implementation of `IUnitTestGeneratorProvider` with a new one that adds the global keyword.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/34573c6f0f2fea71421db5fb61c79c9c.js\\\"></script>\\n\\nThe second part is the new implemenation of `IUnitTestGeneratorProvider`. It augments the behavior of the default NUnit3 code generator to prefix each attribute's fully qualified type declaration with `global::`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/78b2861edce869ae1375896531b4a5c6.js\\\"></script>\\n\\nThese two classes complete the plugin. You can compile them into an assembly and configure the SpecFlow Visual Studio extension to load it. For more details on creating and configuring plugins, check out the [SpecFlow documentation](https://specflow.org/documentation/Plugins/). Also, you can find [the full source](https://github.com/joebuschmann/specflow-plugin-nunit3-with-global) on GitHub.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>I recently created a SpecFlow plugin to solve a peculiar problem with NUnit test code generation. The issue is SpecFlow will generate test code that doesn't compile when the .NET project containing the SpecFlow scenarios has a default namespace with the word NUnit. For example, if your project has the namespace <code>IntegrationTests.NUnit</code>, then you'll receive the following error when trying to build.</p>\n<blockquote>\n<p>The type or namespace name 'Framework' does not exist in the namespace 'IntegrationTests.NUnit' (are you missing an assembly reference?)</p>\n<p>Cannot resolve symbol 'Framework'</p>\n</blockquote>\n<p>The conflict arises in the NUnit attributes in the test code. They are all qualified by the namespace <code>NUnit.Framework</code>, but because the project contains the default namespace <code>IntegrationTests.NUnit</code>, the compiler will expect the NUnit library types to be under <code>IntegrationTests.NUnit.Framework</code>. The work-around is either 1) to change the project's default namespace and update all of its types or 2) to qualify the NUnit attributes with C#'s <code>global</code> keyword. I recommend approach one when possible, but approach two is more fun and makes for a good blog post.</p>\n<p>To implement approach two, I created a SpecFlow plugin to alter the behavior of the default NUnit3 code generator to qualify namespaces with <code>global</code>.</p>\n<p>For example:</p>\n<pre><code>[NUnit.Framework.TestFixtureAttribute()]\n</code></pre>\n<p>becomes</p>\n<pre><code>[global::NUnit.Framework.TestFixtureAttribute()]\n</code></pre>\n<p>Now the compiler knows to resolve the attribute type starting at the global namespace instead of the project namespace.</p>\n<h3 id=\"thepluginimplementation\">The Plugin Implementation</h3>\n<p>There are three types of SpecFlow plugins (Runtime, Generator, and Runtime-Generator). For this scenario, I needed to create a Generator plugin which is made of two parts. The first is an implementation of <code>IGeneratorPlugin</code> which allows you to alter the behavior of SpecFlow by updating the dependencies in its container. The snippet below replaces the implementation of <code>IUnitTestGeneratorProvider</code> with a new one that adds the global keyword.</p>\n<script src=\"https://gist.github.com/joebuschmann/34573c6f0f2fea71421db5fb61c79c9c.js\"></script>\n<p>The second part is the new implemenation of <code>IUnitTestGeneratorProvider</code>. It augments the behavior of the default NUnit3 code generator to prefix each attribute's fully qualified type declaration with <code>global::</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/78b2861edce869ae1375896531b4a5c6.js\"></script>\n<p>These two classes complete the plugin. You can compile them into an assembly and configure the SpecFlow Visual Studio extension to load it. For more details on creating and configuring plugins, check out the <a href=\"https://specflow.org/documentation/Plugins/\">SpecFlow documentation</a>. Also, you can find <a href=\"https://github.com/joebuschmann/specflow-plugin-nunit3-with-global\">the full source</a> on GitHub.</p>\n</div>","amp":null,"plaintext":"I recently created a SpecFlow plugin to solve a peculiar problem with NUnit test\ncode generation. The issue is SpecFlow will generate test code that doesn't\ncompile when the .NET project containing the SpecFlow scenarios has a default\nnamespace with the word NUnit. For example, if your project has the namespace \nIntegrationTests.NUnit, then you'll receive the following error when trying to\nbuild.\n\nThe type or namespace name 'Framework' does not exist in the namespace\n'IntegrationTests.NUnit' (are you missing an assembly reference?)\n\nCannot resolve symbol 'Framework'\n\nThe conflict arises in the NUnit attributes in the test code. They are all\nqualified by the namespace NUnit.Framework, but because the project contains the\ndefault namespace IntegrationTests.NUnit, the compiler will expect the NUnit\nlibrary types to be under IntegrationTests.NUnit.Framework. The work-around is\neither 1) to change the project's default namespace and update all of its types\nor 2) to qualify the NUnit attributes with C#'s global  keyword. I recommend\napproach one when possible, but approach two is more fun and makes for a good\nblog post.\n\nTo implement approach two, I created a SpecFlow plugin to alter the behavior of\nthe default NUnit3 code generator to qualify namespaces with global.\n\nFor example:\n\n[NUnit.Framework.TestFixtureAttribute()]\n\n\nbecomes\n\n[global::NUnit.Framework.TestFixtureAttribute()]\n\n\nNow the compiler knows to resolve the attribute type starting at the global\nnamespace instead of the project namespace.\n\nThe Plugin Implementation\nThere are three types of SpecFlow plugins (Runtime, Generator, and\nRuntime-Generator). For this scenario, I needed to create a Generator plugin\nwhich is made of two parts. The first is an implementation of IGeneratorPlugin \nwhich allows you to alter the behavior of SpecFlow by updating the dependencies\nin its container. The snippet below replaces the implementation of \nIUnitTestGeneratorProvider  with a new one that adds the global keyword.\n\nThe second part is the new implemenation of IUnitTestGeneratorProvider. It\naugments the behavior of the default NUnit3 code generator to prefix each\nattribute's fully qualified type declaration with global::.\n\nThese two classes complete the plugin. You can compile them into an assembly and\nconfigure the SpecFlow Visual Studio extension to load it. For more details on\ncreating and configuring plugins, check out the SpecFlow documentation\n[https://specflow.org/documentation/Plugins/]. Also, you can find the full\nsource [https://github.com/joebuschmann/specflow-plugin-nunit3-with-global]  on\nGitHub.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"This post details how to create a SpecFlow plugin to add the global keyword to NUnit attributes generated by SpecFlow's test code generator.","author_id":"1","created_at":"2017-10-17T22:27:00.000Z","created_by":"1","updated_at":"2018-05-22T22:45:32.000Z","updated_by":"1","published_at":"2017-10-22T02:44:18.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5a2e87b22552670022da7f37","uuid":"39fb5d4a-e1b4-4e2c-b564-4289a0984ab6","title":"The C# Language - Overflow Checking for Integral Operations","slug":"the-csharp-language-overflow-checking-for-integral-operations","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The C# language has been around for over 15 years. It started off as a Java ripoff and evolved into its own language. Some parts of the language I use daily: enumerators, generics, async/await. Other parts lurk in the shadows until the rare moment when I need to put them to use.\\n\\nOne such part is overflow checking for integral operations.\\n\\n#### Compiler Option\\nBy default, integral operations are not checked for overflows either by the C# compiler or at runtime. The reason is unchecked operations are faster than their checked counterparts. You can control this behavior with the `/checked[+|-]` compiler option or with the *Check for arithmetic overflow/underflow* property in a Visual Studio project's advanced build settings.\\n\\nWith overflow checking off (default), adding 1 to an integer's max value will yield its min value.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/3b6ceeb8223d90fe2dfb51eab06e746e.js\\\"></script>\\n\\nAn exception of type `OverflowException` is thrown at runtime if the checked option is enabled.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/97c7633be94602ed996ca8f90ca2b41a.js\\\"></script>\\n\\n#### Checked Blocks\\n\\nThese options work well for an entire assembly, but what if you need to enable overflow checking for some code blocks but leave it off for others? This is where the `checked` and `unchecked` keywords are useful. Assuming overflow checking is disabled by default, you can enable it for a section of code by adding `checked { }`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1648ac707bb9ca96f304960931affe31.js\\\"></script>\\n\\nSimilarly, you can disable checking with `unchecked { }`. Constant overflows inside an unchecked block are permitted.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/855331e55689cc01ffe6421553ceb11b.js\\\"></script>\\n\\n#### Type Conversions\\n\\nOverflow checking also applies to type conversions. Below a large 64-bit integer is cast to a 32-bit integer in a checked block and causes an `OverflowException` to be thrown.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c6e2112eb126a72823950ca5f908075f.js\\\"></script>\\n\\nIn an unchecked block, the cast succeeds for variables as well as constants.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0e18d793d67ad43e56fccc548aa8682b.js\\\"></script>\\n\\nTo wrap up, overflow checking is turned off for integers by default except for constants. You can override this behavior using the `/checked[+|-]` compiler option or the `checked` and `unchecked` keywords. Interestingly, constants can overflow inside of an unchecked block although that doesn't seem very useful.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The C# language has been around for over 15 years. It started off as a Java ripoff and evolved into its own language. Some parts of the language I use daily: enumerators, generics, async/await. Other parts lurk in the shadows until the rare moment when I need to put them to use.</p>\n<p>One such part is overflow checking for integral operations.</p>\n<h4 id=\"compileroption\">Compiler Option</h4>\n<p>By default, integral operations are not checked for overflows either by the C# compiler or at runtime. The reason is unchecked operations are faster than their checked counterparts. You can control this behavior with the <code>/checked[+|-]</code> compiler option or with the <em>Check for arithmetic overflow/underflow</em> property in a Visual Studio project's advanced build settings.</p>\n<p>With overflow checking off (default), adding 1 to an integer's max value will yield its min value.</p>\n<script src=\"https://gist.github.com/joebuschmann/3b6ceeb8223d90fe2dfb51eab06e746e.js\"></script>\n<p>An exception of type <code>OverflowException</code> is thrown at runtime if the checked option is enabled.</p>\n<script src=\"https://gist.github.com/joebuschmann/97c7633be94602ed996ca8f90ca2b41a.js\"></script>\n<h4 id=\"checkedblocks\">Checked Blocks</h4>\n<p>These options work well for an entire assembly, but what if you need to enable overflow checking for some code blocks but leave it off for others? This is where the <code>checked</code> and <code>unchecked</code> keywords are useful. Assuming overflow checking is disabled by default, you can enable it for a section of code by adding <code>checked { }</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/1648ac707bb9ca96f304960931affe31.js\"></script>\n<p>Similarly, you can disable checking with <code>unchecked { }</code>. Constant overflows inside an unchecked block are permitted.</p>\n<script src=\"https://gist.github.com/joebuschmann/855331e55689cc01ffe6421553ceb11b.js\"></script>\n<h4 id=\"typeconversions\">Type Conversions</h4>\n<p>Overflow checking also applies to type conversions. Below a large 64-bit integer is cast to a 32-bit integer in a checked block and causes an <code>OverflowException</code> to be thrown.</p>\n<script src=\"https://gist.github.com/joebuschmann/c6e2112eb126a72823950ca5f908075f.js\"></script>\n<p>In an unchecked block, the cast succeeds for variables as well as constants.</p>\n<script src=\"https://gist.github.com/joebuschmann/0e18d793d67ad43e56fccc548aa8682b.js\"></script>\n<p>To wrap up, overflow checking is turned off for integers by default except for constants. You can override this behavior using the <code>/checked[+|-]</code> compiler option or the <code>checked</code> and <code>unchecked</code> keywords. Interestingly, constants can overflow inside of an unchecked block although that doesn't seem very useful.</p>\n</div>","amp":null,"plaintext":"The C# language has been around for over 15 years. It started off as a Java\nripoff and evolved into its own language. Some parts of the language I use\ndaily: enumerators, generics, async/await. Other parts lurk in the shadows until\nthe rare day when I need to put them to use.\n\nBelow are five C# language features you may not know about but are nonetheless\nuseful.\n\nChecked/Unchecked\nIn the majority of scenarios, integral operations are not checked for overflows\neither by the C# compiler or at runtime. The reason is unchecked operations are\nfaster than their checked counterparts. You can control this behavior with the \n/checked[+|-]  compiler option or with the \"Check for arithmetic\noverflow/underflow\" property in a Visual Studio project's advanced build\nsettings.\n\nCode sample here\n\n\nThese options work well for an entire assembly, but what if you need to enable\noverflow checking for some areas of code but leave it off for others? This is\nwhere the checked  and unchecked  keywords are useful.\n\nVolatile","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"An overview of integral overflow checking in C# and .NET including the /checked[+|-] compiler option and checked/unchecked code blocks.","author_id":"1","created_at":"2017-12-11T13:27:14.000Z","created_by":"1","updated_at":"2017-12-14T23:06:59.000Z","updated_by":"1","published_at":"2017-12-14T23:06:59.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5ac620fa8f12a6002205e0b9","uuid":"52bc1985-5db0-46ef-b95c-cd238be63ab9","title":"There is No Such Thing as a Responsible Gun Owner","slug":"there-is-no-such-thing-as-a-responsible-gun-owner","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\">It's just like a mule. A mule is a docile, patient beast, and he will give you power to pull a plow for decades, but he wants to kill you. He waits for years and years for that rare, opportune moment when he can turn your lights out with a simple kick to the head.\\n>Jerry Poole, referring to a nuclear power reactor\\n>Quoted from Atomic Accidents by James Mahaffey\\n\\nThe responsible gun owner is a trite idea that gets thrown out into the gun debate after each mass shooting. Pro-gun activists lament that responsible gun owners are punished for the sins of others. If only we had better training, if only people took personal responsibility, then there would be fewer shootings. Every accident gets poo-pooed by pro-gun advocates because the vicitms were not **Responsible Gun Owners**&trade;.\\n\\nWell, I'm convinced there's no such thing as a responsible gun owner. Sure, there are gun owners who are more responsible than others, but there's no one who's perfect. No one who deserves the title Responsible Gun Owner. The problem with guns is they are so dangerous that they require perfection, and no one is perfect.\\n\\nRecently I finished the book _Atomic Accidents: A History of Nuclear Meltdowns and Disasters_ by James Mahaffey. It's a facinating book that covers the details of nuclear accidents and why they occurred. As I was reading it, I was struck by how easily billiant engineers and physicists could make sloppy mistakes. They worked with materials they knew to be dangerous, but in many cases were very cavalier about how they handled them. These were men (literally, they were all men) at the top of their game who occasionally managed to injure and sometimes kill themselves due to careless mistakes.\\n\\nTake the case of Harry Daghlian, a physicist with the Manhattan Project at Los Alamos. On August 21, 1945, he was working on a criticality experiment that involved tungsten carbide bricks stacked around a plutonium core. He inadvertently dropped a brick onto the core, and it went prompt critical, meaning it released a dangerous dose of radiation. He was irradiated with a fatal dose of neutron radiation. Twenty-five days later he passed away. His death due to acute radiation syndrome was not pleasant.\\n\\nThese brilliant well-trained physicists are the responsible gun owners of the nuclear world. Owning a gun, much like working with plutonium, can be routine. Years go by and nothing happens. The gun becomes routine. The responsible gun owner grows complacent until *boom*, the gun reveals its violent nature.\\n\\nWe're all human. We all make mistakes. If you own a gun long enough, you're gonna screw up. Take [the case of a Florida mother](https://www.cnn.com/2016/03/09/us/gun-activist-shot-florida/index.html) who was accidentally shot by her young son. By all accounts she was the prototypical responsible gun owner. She was well trained, kept her guns locked up, taught her son about the dangers of guns. Then one day she is rushing about and forgets to store her handgun safely. As she is driving, the gun slides under her seat into the back of the truck. Her son picks it up and shoots her in the back.\\n\\nOr consider the [death of Lana Ray Meisner](https://www.cnn.com/2016/03/07/entertainment/randy-meisner-wife-shooting-feat/), the wife of Eagles co-founder Randy Meisner. She was moving a rifle in its case, and it accidentally discharged. These tragedies have one thing in common. Responsible gun owners died due to a careless mistake.\\n\\nThe funny thing about guns is they don't care that you're sick or tired or busy. They don't care about your training. As a gun owner, you don't have the luxury of an off day because simple mistakes come with serious consequences. You cannot make a mistake, ever, or people can die.\\n\\nThere's no such thing as a responsible gun owner.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><blockquote>\n<p>It's just like a mule. A mule is a docile, patient beast, and he will give you power to pull a plow for decades, but he wants to kill you. He waits for years and years for that rare, opportune moment when he can turn your lights out with a simple kick to the head.<br>\nJerry Poole, referring to a nuclear power reactor<br>\nQuoted from Atomic Accidents by James Mahaffey</p>\n</blockquote>\n<p>The responsible gun owner is a trite idea that gets thrown out into the gun debate after each mass shooting. Pro-gun activists lament that responsible gun owners are punished for the sins of others. If only we had better training, if only people took personal responsibility, then there would be fewer shootings. Every accident gets poo-pooed by pro-gun advocates because the vicitms were not <strong>Responsible Gun Owners</strong>™.</p>\n<p>Well, I'm convinced there's no such thing as a responsible gun owner. Sure, there are gun owners who are more responsible than others, but there's no one who's perfect. No one who deserves the title Responsible Gun Owner. The problem with guns is they are so dangerous that they require perfection, and no one is perfect.</p>\n<p>Recently I finished the book <em>Atomic Accidents: A History of Nuclear Meltdowns and Disasters</em> by James Mahaffey. It's a facinating book that covers the details of nuclear accidents and why they occurred. As I was reading it, I was struck by how easily billiant engineers and physicists could make sloppy mistakes. They worked with materials they knew to be dangerous, but in many cases were very cavalier about how they handled them. These were men (literally, they were all men) at the top of their game who occasionally managed to injure and sometimes kill themselves due to careless mistakes.</p>\n<p>Take the case of Harry Daghlian, a physicist with the Manhattan Project at Los Alamos. On August 21, 1945, he was working on a criticality experiment that involved tungsten carbide bricks stacked around a plutonium core. He inadvertently dropped a brick onto the core, and it went prompt critical, meaning it released a dangerous dose of radiation. He was irradiated with a fatal dose of neutron radiation. Twenty-five days later he passed away. His death due to acute radiation syndrome was not pleasant.</p>\n<p>These brilliant well-trained physicists are the responsible gun owners of the nuclear world. Owning a gun, much like working with plutonium, can be routine. Years go by and nothing happens. The gun becomes routine. The responsible gun owner grows complacent until <em>boom</em>, the gun reveals its violent nature.</p>\n<p>We're all human. We all make mistakes. If you own a gun long enough, you're gonna screw up. Take <a href=\"https://www.cnn.com/2016/03/09/us/gun-activist-shot-florida/index.html\">the case of a Florida mother</a> who was accidentally shot by her young son. By all accounts she was the prototypical responsible gun owner. She was well trained, kept her guns locked up, taught her son about the dangers of guns. Then one day she is rushing about and forgets to store her handgun safely. As she is driving, the gun slides under her seat into the back of the truck. Her son picks it up and shoots her in the back.</p>\n<p>Or consider the <a href=\"https://www.cnn.com/2016/03/07/entertainment/randy-meisner-wife-shooting-feat/\">death of Lana Ray Meisner</a>, the wife of Eagles co-founder Randy Meisner. She was moving a rifle in its case, and it accidentally discharged. These tragedies have one thing in common. Responsible gun owners died due to a careless mistake.</p>\n<p>The funny thing about guns is they don't care that you're sick or tired or busy. They don't care about your training. As a gun owner, you don't have the luxury of an off day because simple mistakes come with serious consequences. You cannot make a mistake, ever, or people can die.</p>\n<p>There's no such thing as a responsible gun owner.</p>\n</div>","amp":null,"plaintext":"It's just like a mule. A mule is a docile, patient beast, and he will give you\npower to pull a plow for decades, but he wants to kill you. He waits for years\nand years for that rare, opportune moment when he can turn your lights out with\na simple kick to the head.\nJerry Poole, referring to a nuclear power reactor\nQuoted from Atomic Accidents by James Mahaffey\n\nThe responsible gun owner is a trite idea that gets thrown out into the gun\ndebate after each mass shooting. Pro-gun activists lament that responsible gun\nowners are punished for the sins of others. If only we had better training, if\nonly people took personal responsibility, then there would be fewer shootings.\nEvery accident gets poo-pooed by pro-gun advocates because the vicitms were not \nResponsible Gun Owners™.\n\nWell, I'm convinced there's no such thing as a responsible gun owner. Sure,\nthere are gun owners who are more responsible than others, but there's no one\nwho's perfect. No one who deserves the title Responsible Gun Owner. The problem\nwith guns is they are so dangerous that they require perfection, and no one is\nperfect.\n\nRecently I finished the book Atomic Accidents: A History of Nuclear Meltdowns\nand Disasters  by James Mahaffey. It's a facinating book that covers the details\nof nuclear accidents and why they occurred. As I was reading it, I was struck by\nhow easily billiant engineers and physicists could make sloppy mistakes. They\nworked with materials they knew to be dangerous, but in many cases were very\ncavalier about how they handled them. These were men (literally, they were all\nmen) at the top of their game who occasionally managed to injure and sometimes\nkill themselves due to careless mistakes.\n\nTake the case of Harry Daghlian, a physicist with the Manhattan Project at Los\nAlamos. On August 21, 1945, he was working on a criticality experiment that\ninvolved tungsten carbide bricks stacked around a plutonium core. He\ninadvertently dropped a brick onto the core, and it went prompt critical,\nmeaning it released a dangerous dose of radiation. He was irradiated with a\nfatal dose of neutron radiation. Twenty-five days later he passed away. His\ndeath due to acute radiation syndrome was not pleasant.\n\nThese brilliant well-trained physicists are the responsible gun owners of the\nnuclear world. Owning a gun, much like working with plutonium, can be routine.\nYears go by and nothing happens. The gun becomes routine. The responsible gun\nowner grows complacent until boom, the gun reveals its violent nature.\n\nWe're all human. We all make mistakes. If you own a gun long enough, you're\ngonna screw up. Take the case of a Florida mother\n[https://www.cnn.com/2016/03/09/us/gun-activist-shot-florida/index.html]  who\nwas accidentally shot by her young son. By all accounts she was the prototypical\nresponsible gun owner. She was well trained, kept her guns locked up, taught her\nson about the dangers of guns. Then one day she is rushing about and forgets to\nstore her handgun safely. As she is driving, the gun slides under her seat into\nthe back of the truck. Her son picks it up and shoots her in the back.\n\nOr consider the death of Lana Ray Meisner\n[https://www.cnn.com/2016/03/07/entertainment/randy-meisner-wife-shooting-feat/]\n, the wife of Eagles co-founder Randy Meisner. She was moving a rifle in its\ncase, and it accidentally discharged. These tragedies have one thing in common.\nResponsible gun owners died due to a careless mistake.\n\nThe funny thing about guns is they don't care that you're sick or tired or busy.\nThey don't care about your training. As a gun owner, you don't have the luxury\nof an off day because simple mistakes come with serious consequences. You cannot\nmake a mistake, ever, or people can die.\n\nThere's no such thing as a responsible gun owner.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-04-05T13:13:30.000Z","created_by":"1","updated_at":"2018-09-30T20:39:16.000Z","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b37c68a9ed5f400bf7dab7f","uuid":"b72632a2-5218-4d56-a3aa-149eba79f558","title":"Scaling SpecFlow With Proper Architecture","slug":"untitled","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> In July of 2018, I gave a talk at [KCDC](http://www.kcdc.info/) titled *SpecFlow: Moving Beyond the Basics*. Afterward, I changed the title to *Scaling SpecFlow* to more accurately reflect the topic. You can find the updated slide deck at https://joebuschmann.github.io/scaling-specflow/.\\n> \\n> Over the next few weeks, I created a series of posts, one for each section of the talk, for those of you who perfer blog posts to slide decks. This page aggregates these pages in one place and takes you through each one in order.\\n\\n## Abstract\\n\\nSo you've written some tests using SpecFlow, and you're feeling good about test coverage. But as the code base gets larger, some issues are starting to emerge. Problems like awkward Gherkin, duplicate code, lack of reusable components, tedious table manipulation, and unused or missing bindings. Like any code base, your test code will accumulate tech debt over time. What can you do to fix these issues?\\n\\n## Scaling SpecFlow\\n\\n* [Let's Start with the Basics](https://joebuschmann.com/specflow-basics/)\\n* [Gherkin Tips](https://joebuschmann.com/gherkin-tips/)\\n* [Taming Gherkin Tables](https://joebuschmann.com/working-effectively-with-specflow-tables/)\\n* [Reusable Bindings](https://joebuschmann.com/reusable-bindings-in-specflow/)\\n* [Running Scenarios in Parallel](https://joebuschmann.com/running-specflow-scenarios-in-parallel/)\\n* [The Step Definition Report](https://joebuschmann.com/specflow-step-definition-report/)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><blockquote>\n<p>In July of 2018, I gave a talk at <a href=\"http://www.kcdc.info/\">KCDC</a> titled <em>SpecFlow: Moving Beyond the Basics</em>. Afterward, I changed the title to <em>Scaling SpecFlow</em> to more accurately reflect the topic. You can find the updated slide deck at <a href=\"https://joebuschmann.github.io/scaling-specflow/\">https://joebuschmann.github.io/scaling-specflow/</a>.</p>\n<p>Over the next few weeks, I created a series of posts, one for each section of the talk, for those of you who perfer blog posts to slide decks. This page aggregates these pages in one place and takes you through each one in order.</p>\n</blockquote>\n<h2 id=\"abstract\">Abstract</h2>\n<p>So you've written some tests using SpecFlow, and you're feeling good about test coverage. But as the code base gets larger, some issues are starting to emerge. Problems like awkward Gherkin, duplicate code, lack of reusable components, tedious table manipulation, and unused or missing bindings. Like any code base, your test code will accumulate tech debt over time. What can you do to fix these issues?</p>\n<h2 id=\"scalingspecflow\">Scaling SpecFlow</h2>\n<ul>\n<li><a href=\"https://joebuschmann.com/specflow-basics/\">Let's Start with the Basics</a></li>\n<li><a href=\"https://joebuschmann.com/gherkin-tips/\">Gherkin Tips</a></li>\n<li><a href=\"https://joebuschmann.com/working-effectively-with-specflow-tables/\">Taming Gherkin Tables</a></li>\n<li><a href=\"https://joebuschmann.com/reusable-bindings-in-specflow/\">Reusable Bindings</a></li>\n<li><a href=\"https://joebuschmann.com/running-specflow-scenarios-in-parallel/\">Running Scenarios in Parallel</a></li>\n<li><a href=\"https://joebuschmann.com/specflow-step-definition-report/\">The Step Definition Report</a></li>\n</ul>\n</div>","amp":null,"plaintext":"In July of 2018, I gave a talk at KCDC [http://www.kcdc.info/]  titled SpecFlow:\nMoving Beyond the Basics. Afterward, I changed the title to Scaling SpecFlow  to\nmore accurately reflect the topic. You can find the updated slide deck at \nhttps://joebuschmann.github.io/scaling-specflow/.\n\nOver the next few weeks, I created a series of posts, one for each section of\nthe talk, for those of you who perfer blog posts to slide decks. This page\naggregates these pages in one place and takes you through each one in order.\n\nAbstract\nSo you've written some tests using SpecFlow, and you're feeling good about test\ncoverage. But as the code base gets larger, some issues are starting to emerge.\nProblems like awkward Gherkin, duplicate code, lack of reusable components,\ntedious table manipulation, and unused or missing bindings. Like any code base,\nyour test code will accumulate tech debt over time. What can you do to fix these\nissues?\n\nScaling SpecFlow\n * Let's Start with the Basics [https://joebuschmann.com/specflow-basics/]\n * Gherkin Tips [https://joebuschmann.com/gherkin-tips/]\n * Taming Gherkin Tables\n   [https://joebuschmann.com/working-effectively-with-specflow-tables/]\n * Reusable Bindings [https://joebuschmann.com/reusable-bindings-in-specflow/]\n * Running Scenarios in Parallel\n   [https://joebuschmann.com/running-specflow-scenarios-in-parallel/]\n * The Step Definition Report\n   [https://joebuschmann.com/specflow-step-definition-report/]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-06-30T18:06:02.000Z","created_by":"1","updated_at":"2018-08-31T01:07:38.000Z","updated_by":"1","published_at":"2018-08-31T01:07:38.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b588fabd5070d00b4e095e6","uuid":"4fd7b962-088d-46ed-ab13-a43b5fa2d577","title":"Koenig Demo Post","slug":"v2-demo-post","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"embed\",{\"url\":\"https://twitter.com/TryGhost/status/761119175192420352\",\"html\":\"<blockquote class=\\\"twitter-tweet\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Fun announcement coming this afternoon 🙈 what could it be?</p>&mdash; Ghost (@TryGhost) <a href=\\\"https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw\\\">August 4, 2016</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\",\"type\":\"rich\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-1.jpg\",\"alt\":\"\",\"caption\":\"A regular size image\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-2.jpg\",\"alt\":\"\",\"cardWidth\":\"full\",\"caption\":\"It's wide\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-3.jpg\",\"alt\":\"\",\"cardWidth\":\"wide\",\"caption\":\"It's wider, but not widest\"}],[\"markdown\",{\"markdown\":\"Markdown content works just the way it always did, **simply** and *beautifully*.\"}],[\"code\",{\"code\":\".new-editor {\\n\\tdisplay: bock;\\n}\"}],[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=CfeQTuGyiqU\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/CfeQTuGyiqU?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen></iframe>\",\"type\":\"video\"}],[\"html\",{\"html\":\"<div style=\\\"background:#fafafa;margin-bottom:1.5em;padding:20px 50px;\\\">\\n    <blink>hello world</blink>\\n</div>\"}]],\"markups\":[[\"strong\"],[\"code\"],[\"em\"],[\"a\",[\"href\",\"https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Hey there! Welcome to the new Ghost editor - affectionately known as \"],[0,[0],1,\"Koenig\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Koenig is a brand new writing experience within Ghost, and follows more of a rich writing experience which you've come to expect from the best publishing platforms. Don't worry though! You can still use Markdown too, if that's what you prefer.\"]]],[1,\"p\",[[0,[],0,\"Because there are some changes to how Ghost outputs content using its new editor, we dropped this draft post into your latest update to tell you a bit about it – and simultaneously give you a chance to preview how well your theme handles these changes. So after reading this post you should both understand how everything works, and also be able to see if there are any changes you need to make to your theme in order to upgrade to Ghost 2.0.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"What's new\"]]],[1,\"p\",[[0,[],0,\"The new editor is designed to allow you have a more rich editing experience, so it's no longer limited to just text and formatting options – but it can also handle rich media objects, called cards. You can insert a card either by clicking on the \"],[0,[1],1,\"+\"],[0,[],0,\" button on a new line, or typing \"],[0,[1],1,\"/\"],[0,[],0,\" on a new line to search for a particular card. \"]]],[1,\"p\",[[0,[],0,\"Here's one now:\"]]],[10,1],[1,\"p\",[[0,[],0,\"Cards are rich objects which contain content which is more than just text. To start with there are cards for things like images, markdown, html and embeds — but over time we'll introduce more cards and integrations, as well as allowing you to create your own!\"]]],[1,\"h2\",[[0,[],0,\"Some examples of possible future cards\"]]],[3,\"ul\",[[[0,[],0,\"A chart card to display dynamic data visualisations\"]],[[0,[],0,\"A recipe card to show a pre-formatted list of ingredients and instructions\"]],[[0,[],0,\"A Mailchimp card to capture new subscribers with a web form\"]],[[0,[],0,\"A recommended reading card to display a dynamic suggested story based on the current user's reading history\"]]]],[1,\"p\",[[0,[],0,\"For now, though, we're just getting started with the basics.\"]]],[1,\"h1\",[[0,[],0,\"New ways to work with images\"]]],[1,\"p\",[[0,[],0,\"Perhaps the most notable change to how you're used to interacting with Ghost is in the images. In Koenig, they're both more powerful and easier to work with in the editor itself - and in the theme, they're output slightly differently with different size options.\"]]],[1,\"p\",[[0,[],0,\"For instance, here's your plain ol' regular image:\"]]],[10,2],[1,\"p\",[[0,[],0,\"But perhaps you've got a striking panorama that you really want to stand out as your readers scroll down the page. In that case, you could use the new full-bleed image size which stretches right out to the edges of the screen:\"]]],[10,3],[1,\"p\",[[0,[],0,\"Or maybe you're looking for something in between, which will give you just a little more size to break up the vertical rhythm of the post without dominating the entire screen. If that's the case, you might like the breakout size:\"]]],[10,4],[1,\"p\",[[0,[],0,\"Each of these sizes can be selected from within the editor, and each will output a number of HTML classes for the theme to do styling with. \"]]],[1,\"p\",[[0,[],0,\"Chances are your theme will need a few small updates to take advantage of the new editor functionality. Some people might also find they need to tweak their theme layout, as the editor canvas previously output a wrapper div around its content – but no longer does. If you rely on that div for styling, you can always add it back again in your theme.\"]]],[1,\"p\",[[0,[],0,\"Oh, we have some nice new image captions, too :)\"]]],[1,\"h1\",[[0,[],0,\"What else?\"]]],[1,\"p\",[[0,[],0,\"Well, you can still write Markdown, as mentioned. In fact you'll find the entire previous Ghost editor \"],[0,[2],1,\"inside\"],[0,[],0,\" this editor. If you want to use it then just go ahead and add a Markdown card and start writing like nothing changed at all:\"]]],[10,5],[1,\"p\",[[0,[],0,\"of course you can embed code blocks\"]]],[10,6],[1,\"p\",[[0,[],0,\"or embed things from external services like YouTube...\"]]],[10,7],[1,\"p\",[[0,[],0,\"and yeah you can do full HTML if you need to, as well!\"]]],[10,8],[1,\"p\",[[0,[],0,\"So everything works, hopefully, just about how you would expect. It's like the old editor, but faster, cleaner, prettier, and a whole lot more powerful.\"]]],[1,\"h1\",[[0,[],0,\"What do I do with this information?\"]]],[1,\"p\",[[0,[],0,\"Preview this post on your site to see if it causes any issues with your theme. Click on the settings cog in the top right 👉🏼 corner of the editor, then click on '\"],[0,[0],1,\"Preview\"],[0,[],0,\"' next to the 'Post URL' input.\"]]],[1,\"p\",[[0,[],0,\"If everything looks good to you then there's nothing you need to do, you're all set! If you spot any issues with your design, or there are some funky display issues, then you might need to make some updates to your theme based on the new editor classes being output.\"]]],[1,\"p\",[[0,[],0,\"Head over to the \"],[0,[3],1,\"Ghost 2.0 Theme Compatibility\"],[0,[],0,\" forum topic to discuss any changes and get help if needed.\"]]],[1,\"p\",[[0,[],0,\"That's it!\"]]],[1,\"p\",[[0,[],0,\"We're looking forward to sharing more about the new editor soon\"]]]]}","html":"<p>Hey there! Welcome to the new Ghost editor - affectionately known as <strong>Koenig</strong>.</p><p>Koenig is a brand new writing experience within Ghost, and follows more of a rich writing experience which you've come to expect from the best publishing platforms. Don't worry though! You can still use Markdown too, if that's what you prefer.</p><p>Because there are some changes to how Ghost outputs content using its new editor, we dropped this draft post into your latest update to tell you a bit about it – and simultaneously give you a chance to preview how well your theme handles these changes. So after reading this post you should both understand how everything works, and also be able to see if there are any changes you need to make to your theme in order to upgrade to Ghost 2.0.</p><hr><h1 id=\"what-s-new\">What's new</h1><p>The new editor is designed to allow you have a more rich editing experience, so it's no longer limited to just text and formatting options – but it can also handle rich media objects, called cards. You can insert a card either by clicking on the <code>+</code> button on a new line, or typing <code>/</code> on a new line to search for a particular card. </p><p>Here's one now:</p><figure class=\"kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Fun announcement coming this afternoon 🙈 what could it be?</p>&mdash; Ghost (@TryGhost) <a href=\"https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw\">August 4, 2016</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p>Cards are rich objects which contain content which is more than just text. To start with there are cards for things like images, markdown, html and embeds — but over time we'll introduce more cards and integrations, as well as allowing you to create your own!</p><h2 id=\"some-examples-of-possible-future-cards\">Some examples of possible future cards</h2><ul><li>A chart card to display dynamic data visualisations</li><li>A recipe card to show a pre-formatted list of ingredients and instructions</li><li>A Mailchimp card to capture new subscribers with a web form</li><li>A recommended reading card to display a dynamic suggested story based on the current user's reading history</li></ul><p>For now, though, we're just getting started with the basics.</p><h1 id=\"new-ways-to-work-with-images\">New ways to work with images</h1><p>Perhaps the most notable change to how you're used to interacting with Ghost is in the images. In Koenig, they're both more powerful and easier to work with in the editor itself - and in the theme, they're output slightly differently with different size options.</p><p>For instance, here's your plain ol' regular image:</p><figure class=\"kg-image-card\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-1.jpg\" class=\"kg-image\"><figcaption>A regular size image</figcaption></figure><p>But perhaps you've got a striking panorama that you really want to stand out as your readers scroll down the page. In that case, you could use the new full-bleed image size which stretches right out to the edges of the screen:</p><figure class=\"kg-image-card kg-width-full\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-2.jpg\" class=\"kg-image\"><figcaption>It's wide</figcaption></figure><p>Or maybe you're looking for something in between, which will give you just a little more size to break up the vertical rhythm of the post without dominating the entire screen. If that's the case, you might like the breakout size:</p><figure class=\"kg-image-card kg-width-wide\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-3.jpg\" class=\"kg-image\"><figcaption>It's wider, but not widest</figcaption></figure><p>Each of these sizes can be selected from within the editor, and each will output a number of HTML classes for the theme to do styling with. </p><p>Chances are your theme will need a few small updates to take advantage of the new editor functionality. Some people might also find they need to tweak their theme layout, as the editor canvas previously output a wrapper div around its content – but no longer does. If you rely on that div for styling, you can always add it back again in your theme.</p><p>Oh, we have some nice new image captions, too :)</p><h1 id=\"what-else\">What else?</h1><p>Well, you can still write Markdown, as mentioned. In fact you'll find the entire previous Ghost editor <em>inside</em> this editor. If you want to use it then just go ahead and add a Markdown card and start writing like nothing changed at all:</p><p>Markdown content works just the way it always did, <strong>simply</strong> and <em>beautifully</em>.</p>\n<p>of course you can embed code blocks</p><pre><code>.new-editor {\n\tdisplay: bock;\n}</code></pre><p>or embed things from external services like YouTube...</p><figure class=\"kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/CfeQTuGyiqU?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><p>and yeah you can do full HTML if you need to, as well!</p><div style=\"background:#fafafa;margin-bottom:1.5em;padding:20px 50px;\">\n    <blink>hello world</blink>\n</div><p>So everything works, hopefully, just about how you would expect. It's like the old editor, but faster, cleaner, prettier, and a whole lot more powerful.</p><h1 id=\"what-do-i-do-with-this-information\">What do I do with this information?</h1><p>Preview this post on your site to see if it causes any issues with your theme. Click on the settings cog in the top right 👉🏼 corner of the editor, then click on '<strong>Preview</strong>' next to the 'Post URL' input.</p><p>If everything looks good to you then there's nothing you need to do, you're all set! If you spot any issues with your design, or there are some funky display issues, then you might need to make some updates to your theme based on the new editor classes being output.</p><p>Head over to the <a href=\"https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103\">Ghost 2.0 Theme Compatibility</a> forum topic to discuss any changes and get help if needed.</p><p>That's it!</p><p>We're looking forward to sharing more about the new editor soon</p>","amp":null,"plaintext":"Hey there! Welcome to the new Ghost editor - affectionately known as Koenig.\n\nKoenig is a brand new writing experience within Ghost, and follows more of a\nrich writing experience which you've come to expect from the best publishing\nplatforms. Don't worry though! You can still use Markdown too, if that's what\nyou prefer.\n\nBecause there are some changes to how Ghost outputs content using its new\neditor, we dropped this draft post into your latest update to tell you a bit\nabout it – and simultaneously give you a chance to preview how well your theme\nhandles these changes. So after reading this post you should both understand how\neverything works, and also be able to see if there are any changes you need to\nmake to your theme in order to upgrade to Ghost 2.0.\n\n\n--------------------------------------------------------------------------------\n\nWhat's new\nThe new editor is designed to allow you have a more rich editing experience, so\nit's no longer limited to just text and formatting options – but it can also\nhandle rich media objects, called cards. You can insert a card either by\nclicking on the +  button on a new line, or typing /  on a new line to search\nfor a particular card. \n\nHere's one now:\n\nFun announcement coming this afternoon 🙈 what could it be?\n\n— Ghost (@TryGhost) August 4, 2016\n[https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw]\nCards are rich objects which contain content which is more than just text. To\nstart with there are cards for things like images, markdown, html and embeds —\nbut over time we'll introduce more cards and integrations, as well as allowing\nyou to create your own!\n\nSome examples of possible future cards\n * A chart card to display dynamic data visualisations\n * A recipe card to show a pre-formatted list of ingredients and instructions\n * A Mailchimp card to capture new subscribers with a web form\n * A recommended reading card to display a dynamic suggested story based on the\n   current user's reading history\n\nFor now, though, we're just getting started with the basics.\n\nNew ways to work with images\nPerhaps the most notable change to how you're used to interacting with Ghost is\nin the images. In Koenig, they're both more powerful and easier to work with in\nthe editor itself - and in the theme, they're output slightly differently with\ndifferent size options.\n\nFor instance, here's your plain ol' regular image:\n\nA regular size imageBut perhaps you've got a striking panorama that you really\nwant to stand out as your readers scroll down the page. In that case, you could\nuse the new full-bleed image size which stretches right out to the edges of the\nscreen:\n\nIt's wideOr maybe you're looking for something in between, which will give you\njust a little more size to break up the vertical rhythm of the post without\ndominating the entire screen. If that's the case, you might like the breakout\nsize:\n\nIt's wider, but not widestEach of these sizes can be selected from within the\neditor, and each will output a number of HTML classes for the theme to do\nstyling with. \n\nChances are your theme will need a few small updates to take advantage of the\nnew editor functionality. Some people might also find they need to tweak their\ntheme layout, as the editor canvas previously output a wrapper div around its\ncontent – but no longer does. If you rely on that div for styling, you can\nalways add it back again in your theme.\n\nOh, we have some nice new image captions, too :)\n\nWhat else?\nWell, you can still write Markdown, as mentioned. In fact you'll find the entire\nprevious Ghost editor inside  this editor. If you want to use it then just go\nahead and add a Markdown card and start writing like nothing changed at all:\n\nMarkdown content works just the way it always did, simply  and beautifully.\n\nof course you can embed code blocks\n\n.new-editor {\n\tdisplay: bock;\n}\n\nor embed things from external services like YouTube...\n\nand yeah you can do full HTML if you need to, as well!\n\nhello worldSo everything works, hopefully, just about how you would expect. It's\nlike the old editor, but faster, cleaner, prettier, and a whole lot more\npowerful.\n\nWhat do I do with this information?\nPreview this post on your site to see if it causes any issues with your theme.\nClick on the settings cog in the top right 👉🏼 corner of the editor, then click\non 'Preview' next to the 'Post URL' input.\n\nIf everything looks good to you then there's nothing you need to do, you're all\nset! If you spot any issues with your design, or there are some funky display\nissues, then you might need to make some updates to your theme based on the new\neditor classes being output.\n\nHead over to the Ghost 2.0 Theme Compatibility\n[https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103] \nforum topic to discuss any changes and get help if needed.\n\nThat's it!\n\nWe're looking forward to sharing more about the new editor soon","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-07-25T14:56:43.000Z","created_by":"1","updated_at":"2018-07-25T14:56:43.000Z","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b6063468f5ef600bf7e0645","uuid":"d50077e6-0f21-47e1-a5c7-5e22755635c4","title":"Gherkin Tips","slug":"gherkin-tips","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> \\\\[Gherkin] is a Business Readable, Domain Specific Language that lets you describe software's behaviour without detailing how that behaviour is implemented.\\n> \\\\- Gherkin Wiki\\n\\nThese Gherkin best practices were originally included in an early draft of a [talk I gave on SpecFlow](https://joebuschmann.github.io/scaling-specflow/). Ultimately, I took them out because they didn't fit well with the topic, so I put them into a blog post.\\n\\n### Table values should be atomic\\n\\nBindings that take a table argument will almost always convert the table to a C# object for easy manipulation. With this in mind, Gherkin steps should make using tables in code straightforward, meaning values should be as atomic as possible. The sample below uses a single table to create a customer and an address. Each table field, Name and Address, crams in complex data that the binding has to parse. Parsing table values is an indication they should be broken up into smaller pieces.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/670e31296271edb636345b33d2446c06.js\\\"></script>\\n\\nA better approach is to create two steps: one for the customer and one for the address. Each discrete piece of data should have its own column in the table. The name is broken up into Salutation, First Name, and Last Name columns. The address step has columns for Line 1, City, State, and Zipcode.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/30bd0d5c3f6fd8eb74f3b4b02a2d2c5b.js\\\"></script>\\n\\n### Use natural language instead of tech speak\\n\\nBy design, Gherkin should use natural language accessible to business owners. Tech speak has a tendency to sneak in over time. This example contains text referring to an index of a list or array. It makes sense to engineers but may be confusing to the business.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c443c2ca10762dfa380487258294b7bf.js\\\"></script>\\n\\nYou can take advantage of regular expressions to refactor this step to use the more natural language, \\\"the 5th product\\\", and still extract the index value in the binding.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/d9c473b92a55df15520834edd42a5f19.js\\\"></script>\\n\\n### Avoid numeric IDs\\n\\nMany integration test suites will use a well known data set to drive the tests. These data may be in a file, database, or available via a web service. Over time test engineers will memorize the numeric identifiers for entities used in common scenarios and start to refer to the entity IDs rather than a descriptive name. Try to avoid using these IDs in Gherkin.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0be725e59550c3f46327f9e8539112a2.js\\\"></script>\\n\\nOutside of engineering, no one knows what product 46 is. You can make this better by defining a map of descriptive names to IDs in a feature's background steps. The Gherkin uses the name while the steps map the incoming name to its ID. In this case, product 46 maps to the more descriptive identifier \\\"iPhone 6\\\".\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/6f325376516441241b5d0f92bfd92e58.js\\\"></script>\\n\\n### Put rules and equations in the feature file description\\n\\nThe feature header and description is a good place to define the rules and equations under test. If you're validating an insurance quoting engine, you can describe its rules at the top and avoid cluttering the scenarios with details of the algorithm.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/c547369d48e03edabc85d219aa1e42e2.js\\\"></script>\\n\\nAn obvious and lazy description helps no one. You might as well leave it out. A good description describes the algorithm you're testing. In this case, the insurance quote engine starts with a baseline price and adjusts it up or down based on the insured's individual risk and their neighbor's risk.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/ed7a99fc92647b67a976f418b8a5a016.js\\\"></script>\\n\\nThe following scenarios simply plug in the numbers and validate the final quote.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/8e41d7da062d678dcf594337bbe0e222.js\\\"></script>\\n\\n<hr />\\n\\nThere are many more tips for writing effective Gherkin, but I've found these to be the most unique and useful. For more tips, check out the links below.\\n\\n* [15 Expert Tips for Using Cucumber](https://www.engineyard.com/blog/15-expert-tips-for-using-cucumber)\\n* [9 tips for improving Cucumber test readability](https://www.foreach.be/blog/9-tips-improving-cucumber-test-readability)\\n* [BDD 101: Writing Good Gherkin](https://automationpanda.com/2017/01/30/bdd-101-writing-good-gherkin/)\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><blockquote>\n<p>[Gherkin] is a Business Readable, Domain Specific Language that lets you describe software's behaviour without detailing how that behaviour is implemented.<br>\n- Gherkin Wiki</p>\n</blockquote>\n<p>These Gherkin best practices were originally included in an early draft of a <a href=\"https://joebuschmann.github.io/scaling-specflow/\">talk I gave on SpecFlow</a>. Ultimately, I took them out because they didn't fit well with the topic, so I put them into a blog post.</p>\n<h3 id=\"tablevaluesshouldbeatomic\">Table values should be atomic</h3>\n<p>Bindings that take a table argument will almost always convert the table to a C# object for easy manipulation. With this in mind, Gherkin steps should make using tables in code straightforward, meaning values should be as atomic as possible. The sample below uses a single table to create a customer and an address. Each table field, Name and Address, crams in complex data that the binding has to parse. Parsing table values is an indication they should be broken up into smaller pieces.</p>\n<script src=\"https://gist.github.com/joebuschmann/670e31296271edb636345b33d2446c06.js\"></script>\n<p>A better approach is to create two steps: one for the customer and one for the address. Each discrete piece of data should have its own column in the table. The name is broken up into Salutation, First Name, and Last Name columns. The address step has columns for Line 1, City, State, and Zipcode.</p>\n<script src=\"https://gist.github.com/joebuschmann/30bd0d5c3f6fd8eb74f3b4b02a2d2c5b.js\"></script>\n<h3 id=\"usenaturallanguageinsteadoftechspeak\">Use natural language instead of tech speak</h3>\n<p>By design, Gherkin should use natural language accessible to business owners. Tech speak has a tendency to sneak in over time. This example contains text referring to an index of a list or array. It makes sense to engineers but may be confusing to the business.</p>\n<script src=\"https://gist.github.com/joebuschmann/c443c2ca10762dfa380487258294b7bf.js\"></script>\n<p>You can take advantage of regular expressions to refactor this step to use the more natural language, &quot;the 5th product&quot;, and still extract the index value in the binding.</p>\n<script src=\"https://gist.github.com/joebuschmann/d9c473b92a55df15520834edd42a5f19.js\"></script>\n<h3 id=\"avoidnumericids\">Avoid numeric IDs</h3>\n<p>Many integration test suites will use a well known data set to drive the tests. These data may be in a file, database, or available via a web service. Over time test engineers will memorize the numeric identifiers for entities used in common scenarios and start to refer to the entity IDs rather than a descriptive name. Try to avoid using these IDs in Gherkin.</p>\n<script src=\"https://gist.github.com/joebuschmann/0be725e59550c3f46327f9e8539112a2.js\"></script>\n<p>Outside of engineering, no one knows what product 46 is. You can make this better by defining a map of descriptive names to IDs in a feature's background steps. The Gherkin uses the name while the steps map the incoming name to its ID. In this case, product 46 maps to the more descriptive identifier &quot;iPhone 6&quot;.</p>\n<script src=\"https://gist.github.com/joebuschmann/6f325376516441241b5d0f92bfd92e58.js\"></script>\n<h3 id=\"putrulesandequationsinthefeaturefiledescription\">Put rules and equations in the feature file description</h3>\n<p>The feature header and description is a good place to define the rules and equations under test. If you're validating an insurance quoting engine, you can describe its rules at the top and avoid cluttering the scenarios with details of the algorithm.</p>\n<script src=\"https://gist.github.com/joebuschmann/c547369d48e03edabc85d219aa1e42e2.js\"></script>\n<p>An obvious and lazy description helps no one. You might as well leave it out. A good description describes the algorithm you're testing. In this case, the insurance quote engine starts with a baseline price and adjusts it up or down based on the insured's individual risk and their neighbor's risk.</p>\n<script src=\"https://gist.github.com/joebuschmann/ed7a99fc92647b67a976f418b8a5a016.js\"></script>\n<p>The following scenarios simply plug in the numbers and validate the final quote.</p>\n<script src=\"https://gist.github.com/joebuschmann/8e41d7da062d678dcf594337bbe0e222.js\"></script>\n<hr />\n<p>There are many more tips for writing effective Gherkin, but I've found these to be the most unique and useful. For more tips, check out the links below.</p>\n<ul>\n<li><a href=\"https://www.engineyard.com/blog/15-expert-tips-for-using-cucumber\">15 Expert Tips for Using Cucumber</a></li>\n<li><a href=\"https://www.foreach.be/blog/9-tips-improving-cucumber-test-readability\">9 tips for improving Cucumber test readability</a></li>\n<li><a href=\"https://automationpanda.com/2017/01/30/bdd-101-writing-good-gherkin/\">BDD 101: Writing Good Gherkin</a></li>\n</ul>\n</div>","amp":null,"plaintext":"[Gherkin] is a Business Readable, Domain Specific Language that lets you\ndescribe software's behaviour without detailing how that behaviour is\nimplemented.\n- Gherkin Wiki\n\nThese Gherkin best practices were originally included in an early draft of a \ntalk I gave on SpecFlow [https://joebuschmann.github.io/scaling-specflow/].\nUltimately, I took them out because they didn't fit well with the topic, so I\nput them into a blog post.\n\nTable values should be atomic\nBindings that take a table argument will almost always convert the table to a C#\nobject for easy manipulation. With this in mind, Gherkin steps should make using\ntables in code straightforward, meaning values should be as atomic as possible.\nThe sample below uses a single table to create a customer and an address. Each\ntable field, Name and Address, crams in complex data that the binding has to\nparse. Parsing table values is an indication they should be broken up into\nsmaller pieces.\n\nA better approach is to create two steps: one for the customer and one for the\naddress. Each discrete piece of data should have its own column in the table.\nThe name is broken up into Salutation, First Name, and Last Name columns. The\naddress step has columns for Line 1, City, State, and Zipcode.\n\nUse natural language instead of tech speak\nBy design, Gherkin should use natural language accessible to business owners.\nTech speak has a tendency to sneak in over time. This example contains text\nreferring to an index of a list or array. It makes sense to engineers but may be\nconfusing to the business.\n\nYou can take advantage of regular expressions to refactor this step to use the\nmore natural language, \"the 5th product\", and still extract the index value in\nthe binding.\n\nAvoid numeric IDs\nMany integration test suites will use a well known data set to drive the tests.\nThese data may be in a file, database, or available via a web service. Over time\ntest engineers will memorize the numeric identifiers for entities used in common\nscenarios and start to refer to the entity IDs rather than a descriptive name.\nTry to avoid using these IDs in Gherkin.\n\nOutside of engineering, no one knows what product 46 is. You can make this\nbetter by defining a map of descriptive names to IDs in a feature's background\nsteps. The Gherkin uses the name while the steps map the incoming name to its\nID. In this case, product 46 maps to the more descriptive identifier \"iPhone 6\".\n\nPut rules and equations in the feature file description\nThe feature header and description is a good place to define the rules and\nequations under test. If you're validating an insurance quoting engine, you can\ndescribe its rules at the top and avoid cluttering the scenarios with details of\nthe algorithm.\n\nAn obvious and lazy description helps no one. You might as well leave it out. A\ngood description describes the algorithm you're testing. In this case, the\ninsurance quote engine starts with a baseline price and adjusts it up or down\nbased on the insured's individual risk and their neighbor's risk.\n\nThe following scenarios simply plug in the numbers and validate the final quote.\n\n\n--------------------------------------------------------------------------------\n\nThere are many more tips for writing effective Gherkin, but I've found these to\nbe the most unique and useful. For more tips, check out the links below.\n\n * 15 Expert Tips for Using Cucumber\n   [https://www.engineyard.com/blog/15-expert-tips-for-using-cucumber]\n * 9 tips for improving Cucumber test readability\n   [https://www.foreach.be/blog/9-tips-improving-cucumber-test-readability]\n * BDD 101: Writing Good Gherkin\n   [https://automationpanda.com/2017/01/30/bdd-101-writing-good-gherkin/]","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"In this post, I give four tips for writing effective features and scenarios using the Gherkin DSL.","author_id":"1","created_at":"2018-07-31T13:25:26.000Z","created_by":"1","updated_at":"2018-08-10T13:28:43.000Z","updated_by":"1","published_at":"2018-08-10T13:22:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b60e6908f5ef600bf7e064b","uuid":"7cc68fa2-2fb7-4bac-af43-86ed459faaac","title":"SpecFlow Basics","slug":"specflow-basics","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"SpecFlow is hands down my favorite testing tool. I've been blogging about it since 2013 covering mostly advanced topics. In this post, I'll go back to the beginning and briefly cover the basics to give you an idea of what it can do.\\n\\n### What is SpecFlow?\\n\\nSpecFlow is a tool that allows you to:\\n\\n1. Define, manage, and automate human-readable acceptance tests in .NET.\\n2. Enable BDD with easy to understand tests.\\n3. Build up a living documentation of your system.\\n\\nIt consists of two parts: a Visual Studio extension and a runtime delivered via a NuGet package.\\n\\nThe [Visual Studio extension](https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlowTeam.SpecFlowforVisualStudio2017) is the design-time piece with:\\n\\n1. Gherkin syntax highlighting.\\n2. File templates for features, hooks, and step definitions.\\n3. Executable test generation (code-behind).\\n\\nYou use it to create your tests.\\n\\nThe [NuGet package](https://www.nuget.org/packages/specflow/) contains the runtime library which executes the tests generated by the Visual Studio extension. The SpecFlow runtime:\\n\\n1. Exposes meta-data about the current tests in the form of the scenario context, feature context, and test thread context.\\n2. Loads a simple dependency injection framework.\\n3. Provides table helper extension methods to make working with tables less painful.\\n\\n### Specify-Bind-Run\\n\\nOnce SpecFlow is installed, you're ready to **specify** your first feature.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/e81792bbc820d0c282102d0550aee406.js\\\"></script>\\n\\nNext you **bind** the Gherkins steps to executable code. Note the `Binding` attribute is applied to all binding classes. The `Given`, `When`, `Then` attributes bind to the individual Gherkin steps.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/bc00698fb976b049b5f54040e906abf6.js\\\"></script>\\n\\nFinally you **run** the tests with a test runner. In this case, it's NUnit.\\n\\n```\\nnunit-console.exe /xml:results.xml some\\\\path\\\\tests.dll\\n```\\n\\n### Further Reading\\n\\nFor more details on getting started with SpecFlow, check out the [excellent documentation](https://specflow.org/documentation/). I recommend reading it once when getting started and again after you've had some experience. Also, check out my [blog posts on SpecFlow](https://joebuschmann.com/tag/specflow/).\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>SpecFlow is hands down my favorite testing tool. I've been blogging about it since 2013 covering mostly advanced topics. In this post, I'll go back to the beginning and briefly cover the basics to give you an idea of what it can do.</p>\n<h3 id=\"whatisspecflow\">What is SpecFlow?</h3>\n<p>SpecFlow is a tool that allows you to:</p>\n<ol>\n<li>Define, manage, and automate human-readable acceptance tests in .NET.</li>\n<li>Enable BDD with easy to understand tests.</li>\n<li>Build up a living documentation of your system.</li>\n</ol>\n<p>It consists of two parts: a Visual Studio extension and a runtime delivered via a NuGet package.</p>\n<p>The <a href=\"https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlowTeam.SpecFlowforVisualStudio2017\">Visual Studio extension</a> is the design-time piece with:</p>\n<ol>\n<li>Gherkin syntax highlighting.</li>\n<li>File templates for features, hooks, and step definitions.</li>\n<li>Executable test generation (code-behind).</li>\n</ol>\n<p>You use it to create your tests.</p>\n<p>The <a href=\"https://www.nuget.org/packages/specflow/\">NuGet package</a> contains the runtime library which executes the tests generated by the Visual Studio extension. The SpecFlow runtime:</p>\n<ol>\n<li>Exposes meta-data about the current tests in the form of the scenario context, feature context, and test thread context.</li>\n<li>Loads a simple dependency injection framework.</li>\n<li>Provides table helper extension methods to make working with tables less painful.</li>\n</ol>\n<h3 id=\"specifybindrun\">Specify-Bind-Run</h3>\n<p>Once SpecFlow is installed, you're ready to <strong>specify</strong> your first feature.</p>\n<script src=\"https://gist.github.com/joebuschmann/e81792bbc820d0c282102d0550aee406.js\"></script>\n<p>Next you <strong>bind</strong> the Gherkins steps to executable code. Note the <code>Binding</code> attribute is applied to all binding classes. The <code>Given</code>, <code>When</code>, <code>Then</code> attributes bind to the individual Gherkin steps.</p>\n<script src=\"https://gist.github.com/joebuschmann/bc00698fb976b049b5f54040e906abf6.js\"></script>\n<p>Finally you <strong>run</strong> the tests with a test runner. In this case, it's NUnit.</p>\n<pre><code>nunit-console.exe /xml:results.xml some\\path\\tests.dll\n</code></pre>\n<h3 id=\"furtherreading\">Further Reading</h3>\n<p>For more details on getting started with SpecFlow, check out the <a href=\"https://specflow.org/documentation/\">excellent documentation</a>. I recommend reading it once when getting started and again after you've had some experience. Also, check out my <a href=\"https://joebuschmann.com/tag/specflow/\">blog posts on SpecFlow</a>.</p>\n</div>","amp":null,"plaintext":"SpecFlow is hands down my favorite testing tool. I've been blogging about it\nsince 2013 covering mostly advanced topics. In this post, I'll go back to the\nbeginning and briefly cover the basics to give you an idea of what it can do.\n\nWhat is SpecFlow?\nSpecFlow is a tool that allows you to:\n\n 1. Define, manage, and automate human-readable acceptance tests in .NET.\n 2. Enable BDD with easy to understand tests.\n 3. Build up a living documentation of your system.\n\nIt consists of two parts: a Visual Studio extension and a runtime delivered via\na NuGet package.\n\nThe Visual Studio extension\n[https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlowTeam.SpecFlowforVisualStudio2017] \n is the design-time piece with:\n\n 1. Gherkin syntax highlighting.\n 2. File templates for features, hooks, and step definitions.\n 3. Executable test generation (code-behind).\n\nYou use it to create your tests.\n\nThe NuGet package [https://www.nuget.org/packages/specflow/]  contains the\nruntime library which executes the tests generated by the Visual Studio\nextension. The SpecFlow runtime:\n\n 1. Exposes meta-data about the current tests in the form of the scenario\n    context, feature context, and test thread context.\n 2. Loads a simple dependency injection framework.\n 3. Provides table helper extension methods to make working with tables less\n    painful.\n\nSpecify-Bind-Run\nOnce SpecFlow is installed, you're ready to specify  your first feature.\n\nNext you bind  the Gherkins steps to executable code. Note the Binding \nattribute is applied to all binding classes. The Given, When, Then  attributes\nbind to the individual Gherkin steps.\n\nFinally you run  the tests with a test runner. In this case, it's NUnit.\n\nnunit-console.exe /xml:results.xml some\\path\\tests.dll\n\n\nFurther Reading\nFor more details on getting started with SpecFlow, check out the excellent\ndocumentation [https://specflow.org/documentation/]. I recommend reading it once\nwhen getting started and again after you've had some experience. Also, check out\nmy blog posts on SpecFlow [https://joebuschmann.com/tag/specflow/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-07-31T22:45:36.000Z","created_by":"1","updated_at":"2018-08-08T13:41:40.000Z","updated_by":"1","published_at":"2018-08-08T13:41:40.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b60ea3e8f5ef600bf7e064e","uuid":"9926821f-599e-42f1-b44a-50ea8cee9290","title":"Working Effectively with SpecFlow Tables","slug":"working-effectively-with-specflow-tables","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The Gherkin DSL defines data tables as a way of passing a list of values to a step definition. Gherkin tables use the pipe character `|` to delimit column names and values. They're easy to read and understand by both business and technical people.\\n\\nWhile they work great in Gherkin, tables don't translate well to strongly typed .NET languages. They are converted to an instance of the `Table` type in SpecFlow bindings. This data type is prone to errors because it is weakly typed (columns and values are strings) and requires iterating columns and rows to get at the values. A robust reusable library of SpecFlow bindings has to include strategies for working with tables effectively. Fortunately, there are helper libraries and patterns available to minimize the pain of manipulating table data.\\n\\n### Vertical versus horizontal tables\\n\\nBefore digging in, a word about vertical and horizontal tables. Vertical tables have two columns. The first contains the field names, and the second contains the values. Vertical tables can only be mapped to a single .NET object, not lists or collections.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/02829300cb545ecd1dfa9af615c26ad4.js\\\"></script>\\n\\nHorizontal tables have three or more columns. They are more flexible because they can be mapped to a list of objects. The first row defines the field names and each subsequent row holds the values for an item in the list.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/47894d5023ef737efcde0d75130d8860.js\\\"></script>\\n\\n### Table values should be atomic\\n\\nTable values should be as atomic as possible to simplify the .NET bindings comsuming them. If you find yourself parsing table values, that's a strong indication they're not atomic and can be broken down further.\\n\\nThe following Gherkin is a good example of what not to do. The first value is a full name including salutation. Names are normally divided into salutation, first name, and last name in code for storage and manipulation. The underlying binding will have to parse this value which is error prone. Same for the address. The different parts of the address (line1, city, state, and zip code) are delimited by a semi-colon. What if the person who created the Gherkin forgets the correct delimiter? Again this approach is error prone.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/6b256eb93d81092ed75b874c1a9a4476.js\\\"></script>\\n\\nA better approach is to break up the name and address into atomic parts in the Gherkin. Each component is clearly defined. The name has separate columns for the salutation, first name, and last name. Similarly, the address is broken up into line1, city, state, and zip code. As we'll see in the next section, the .NET bindings simplify further with table helpers.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fe4147f06bddd8a419d81fbe0e8c2381.js\\\"></script>\\n\\n### Table helpers make working with tables easier\\n\\nLike I mentioned earlier, the Gherkin language includes tables for passing complex data or lists of data to a step definition. They're easy to use in the Gherkin editor but are painful to work with in code. They're not strongly typed, and if there's a problem, you won't know until runtime.\\n\\nA common pattern is to convert tables into strongly typed .NET objects in step definitions. In fact there are a number of helper extension methods in the SpecFlow runtime library for converting tables into objects and comparing tabular data to object data. These helpers can go a long way to clean up bindings.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/5a245e10e6187fc1d8185a9e869f321a.js\\\"></script>\\n\\nIn this example, the given step builds out an `Address` object by manually iterating the rows and columns of the incoming table. This code is prone to errors due to the lack of type safety, and not to mention it takes a lot of keystrokes. The `CreateInstance` extention method reduces it to one line.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/f6d6297087922aea16d077af7e8a5b3f.js\\\"></script>\\n\\nIn a similar way, SpecFlow has helper methods for comparing tables to objects.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/9af894b5c721299fde4c748d4944c5e1.js\\\"></script>\\n\\n`ValidateAddress` compares each table value field by field. Again, you can collapse this code down to a single line.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/92180ebe7834d67afd1fada42dc2bd54.js\\\"></script>\\n\\n#### TechTalk.SpecFlow.Assist\\n\\nThese helper methods can be found in the `TechTalk.SpecFlow.Assist` namespace. They are extension methods off of the `Table` data type.\\n\\n- **CreateInstance** - creates a new object\\n- **FillInstance** - populates an existing object\\n- **CreateSet** - creates a list of objects\\n- **CompareToInstance** - compares table values to object properties\\n- **CompareToSet** - compares a table to a list of objects\\n\\nCheck out the [SpecFlow documentation](http://specflow.org/documentation/SpecFlow-Assist-Helpers/) for more details.\\n\\n### Customize field mappings\\n\\nSpecFlow will ignore whitespace and casing when matching table column names to object property names. Sometimes that isn't enough. An address object may have a property named \\\"State\\\", but for Canadian addresses, \\\"Province\\\" is the more appropriate term to use in the business domain. Same for \\\"Zip Code\\\" versus \\\"Postal Code\\\".\\n\\nSpecFlow defines the `TableAliases` attribute for these situations. Using this attribute, you can provide alternate mappings between a table column name and an object property name. The runtime will include these mappings when you invoke the table helpers.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/1c12785b58e305ee3c97e9b3c51c7235.js\\\"></script>\\n\\nThe example above provides the alias \\\"Province\\\" for \\\"State\\\" and \\\"Postal Code\\\" for \\\"Zip Code\\\" among others. Now you can properly specifiy a Canadian address.\\n\\nAlso note that table aliases support regular expressions.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/a4781bf01146c75389add9a894b7e36a.js\\\"></script>\\n\\n### Customize value mappings\\n\\nLike field mappings, SpecFlow allows developers to customize how table values are mapped to an object property. The runtime handles primitive type conversions including Enums and Guids by default; however you may want to convert table values to a custom data type. You can do this with a custom value retriever and value comparer.\\n\\nLet's say you want to update the address step with a new Location column. Location data consists of latitude and longitude values in parentheses and separated by a comma.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4966b3f1a1f83aaf9294240190d35b77.js\\\"></script>\\n\\nYou want to map this value to a new property on the custom `Address` data type called Location. The property is of type `GeoLocation` which has properties for the latitude and longitude.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/e50d1679ea8406dacac84eaaa8752795.js\\\"></script>\\n\\nOf course the SpecFlow runtime doesn't know about the GeoLocation type, but you can use custom implementations of `IValueRetriever` and `IValueComparer` to tell the runtime how to do the conversions. Value retrievers take a table value and convert it into an instance of a .NET type. Value comparers take a .NET type and compare it to a table value to determine equivalence. If the two values aren't equivalent, the runtime throws an exception, and the test fails.\\n\\n#### IValueRetriever\\n\\n`IValueRetriever` defines two methods. The first, `CanRetrieve`, returns a boolean value indicating if the value retriever can handle the specified property type. In this example, if the incoming property type is `GeoLocation`, then it returns true. The second method, `Retrieve`, performs the work of converting the string value from the table into an instance of the target type which, in this case, is `GeoLocation`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/4058287e99d16aa6068a947235d15a43.js\\\"></script>\\n\\n#### IValueComparer\\n\\n`IValueComparer` is very similar in that it defines two methods, `CanCompare` and `Compare`. `CanCompare` is provided the property value from the target .NET object. In this case, if it is of type `GeoLocation`, then the method returns true indicating it can handle the comparison. The second method, `Compare`, is passed the same actual value and the expected string value from the table. The method does the work of comparing the two to determine equality. If it returns false, the test fails.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/700b16a22e2b59c60d944d11498be8e3.js\\\"></script>\\n\\n#### Register Value Mappings\\n\\nFor the SpecFlow runtime to pick up custom value handlers, they have to be registered in a `BeforeTestRun` hook. `GeoLocationValueHandler` implements both interfaces and is passed to methods on `Service.Instance`. The runtime can now work with location values in the binding steps.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/47eb7c3ad02d10876e26df6a5a1271f3.js\\\"></script>\\n\\n<hr />\\n\\nThe key to a robust reusable SpecFlow library is handling table data efficiently. By keeping values atomic, using the table helpers, and creating custom field and value mappings, your bindings will scale as the number of scenarios grows.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The Gherkin DSL defines data tables as a way of passing a list of values to a step definition. Gherkin tables use the pipe character <code>|</code> to delimit column names and values. They're easy to read and understand by both business and technical people.</p>\n<p>While they work great in Gherkin, tables don't translate well to strongly typed .NET languages. They are converted to an instance of the <code>Table</code> type in SpecFlow bindings. This data type is prone to errors because it is weakly typed (columns and values are strings) and requires iterating columns and rows to get at the values. A robust reusable library of SpecFlow bindings has to include strategies for working with tables effectively. Fortunately, there are helper libraries and patterns available to minimize the pain of manipulating table data.</p>\n<h3 id=\"verticalversushorizontaltables\">Vertical versus horizontal tables</h3>\n<p>Before digging in, a word about vertical and horizontal tables. Vertical tables have two columns. The first contains the field names, and the second contains the values. Vertical tables can only be mapped to a single .NET object, not lists or collections.</p>\n<script src=\"https://gist.github.com/joebuschmann/02829300cb545ecd1dfa9af615c26ad4.js\"></script>\n<p>Horizontal tables have three or more columns. They are more flexible because they can be mapped to a list of objects. The first row defines the field names and each subsequent row holds the values for an item in the list.</p>\n<script src=\"https://gist.github.com/joebuschmann/47894d5023ef737efcde0d75130d8860.js\"></script>\n<h3 id=\"tablevaluesshouldbeatomic\">Table values should be atomic</h3>\n<p>Table values should be as atomic as possible to simplify the .NET bindings comsuming them. If you find yourself parsing table values, that's a strong indication they're not atomic and can be broken down further.</p>\n<p>The following Gherkin is a good example of what not to do. The first value is a full name including salutation. Names are normally divided into salutation, first name, and last name in code for storage and manipulation. The underlying binding will have to parse this value which is error prone. Same for the address. The different parts of the address (line1, city, state, and zip code) are delimited by a semi-colon. What if the person who created the Gherkin forgets the correct delimiter? Again this approach is error prone.</p>\n<script src=\"https://gist.github.com/joebuschmann/6b256eb93d81092ed75b874c1a9a4476.js\"></script>\n<p>A better approach is to break up the name and address into atomic parts in the Gherkin. Each component is clearly defined. The name has separate columns for the salutation, first name, and last name. Similarly, the address is broken up into line1, city, state, and zip code. As we'll see in the next section, the .NET bindings simplify further with table helpers.</p>\n<script src=\"https://gist.github.com/joebuschmann/fe4147f06bddd8a419d81fbe0e8c2381.js\"></script>\n<h3 id=\"tablehelpersmakeworkingwithtableseasier\">Table helpers make working with tables easier</h3>\n<p>Like I mentioned earlier, the Gherkin language includes tables for passing complex data or lists of data to a step definition. They're easy to use in the Gherkin editor but are painful to work with in code. They're not strongly typed, and if there's a problem, you won't know until runtime.</p>\n<p>A common pattern is to convert tables into strongly typed .NET objects in step definitions. In fact there are a number of helper extension methods in the SpecFlow runtime library for converting tables into objects and comparing tabular data to object data. These helpers can go a long way to clean up bindings.</p>\n<script src=\"https://gist.github.com/joebuschmann/5a245e10e6187fc1d8185a9e869f321a.js\"></script>\n<p>In this example, the given step builds out an <code>Address</code> object by manually iterating the rows and columns of the incoming table. This code is prone to errors due to the lack of type safety, and not to mention it takes a lot of keystrokes. The <code>CreateInstance</code> extention method reduces it to one line.</p>\n<script src=\"https://gist.github.com/joebuschmann/f6d6297087922aea16d077af7e8a5b3f.js\"></script>\n<p>In a similar way, SpecFlow has helper methods for comparing tables to objects.</p>\n<script src=\"https://gist.github.com/joebuschmann/9af894b5c721299fde4c748d4944c5e1.js\"></script>\n<p><code>ValidateAddress</code> compares each table value field by field. Again, you can collapse this code down to a single line.</p>\n<script src=\"https://gist.github.com/joebuschmann/92180ebe7834d67afd1fada42dc2bd54.js\"></script>\n<h4 id=\"techtalkspecflowassist\">TechTalk.SpecFlow.Assist</h4>\n<p>These helper methods can be found in the <code>TechTalk.SpecFlow.Assist</code> namespace. They are extension methods off of the <code>Table</code> data type.</p>\n<ul>\n<li><strong>CreateInstance</strong> - creates a new object</li>\n<li><strong>FillInstance</strong> - populates an existing object</li>\n<li><strong>CreateSet</strong> - creates a list of objects</li>\n<li><strong>CompareToInstance</strong> - compares table values to object properties</li>\n<li><strong>CompareToSet</strong> - compares a table to a list of objects</li>\n</ul>\n<p>Check out the <a href=\"http://specflow.org/documentation/SpecFlow-Assist-Helpers/\">SpecFlow documentation</a> for more details.</p>\n<h3 id=\"customizefieldmappings\">Customize field mappings</h3>\n<p>SpecFlow will ignore whitespace and casing when matching table column names to object property names. Sometimes that isn't enough. An address object may have a property named &quot;State&quot;, but for Canadian addresses, &quot;Province&quot; is the more appropriate term to use in the business domain. Same for &quot;Zip Code&quot; versus &quot;Postal Code&quot;.</p>\n<p>SpecFlow defines the <code>TableAliases</code> attribute for these situations. Using this attribute, you can provide alternate mappings between a table column name and an object property name. The runtime will include these mappings when you invoke the table helpers.</p>\n<script src=\"https://gist.github.com/joebuschmann/1c12785b58e305ee3c97e9b3c51c7235.js\"></script>\n<p>The example above provides the alias &quot;Province&quot; for &quot;State&quot; and &quot;Postal Code&quot; for &quot;Zip Code&quot; among others. Now you can properly specifiy a Canadian address.</p>\n<p>Also note that table aliases support regular expressions.</p>\n<script src=\"https://gist.github.com/joebuschmann/a4781bf01146c75389add9a894b7e36a.js\"></script>\n<h3 id=\"customizevaluemappings\">Customize value mappings</h3>\n<p>Like field mappings, SpecFlow allows developers to customize how table values are mapped to an object property. The runtime handles primitive type conversions including Enums and Guids by default; however you may want to convert table values to a custom data type. You can do this with a custom value retriever and value comparer.</p>\n<p>Let's say you want to update the address step with a new Location column. Location data consists of latitude and longitude values in parentheses and separated by a comma.</p>\n<script src=\"https://gist.github.com/joebuschmann/4966b3f1a1f83aaf9294240190d35b77.js\"></script>\n<p>You want to map this value to a new property on the custom <code>Address</code> data type called Location. The property is of type <code>GeoLocation</code> which has properties for the latitude and longitude.</p>\n<script src=\"https://gist.github.com/joebuschmann/e50d1679ea8406dacac84eaaa8752795.js\"></script>\n<p>Of course the SpecFlow runtime doesn't know about the GeoLocation type, but you can use custom implementations of <code>IValueRetriever</code> and <code>IValueComparer</code> to tell the runtime how to do the conversions. Value retrievers take a table value and convert it into an instance of a .NET type. Value comparers take a .NET type and compare it to a table value to determine equivalence. If the two values aren't equivalent, the runtime throws an exception, and the test fails.</p>\n<h4 id=\"ivalueretriever\">IValueRetriever</h4>\n<p><code>IValueRetriever</code> defines two methods. The first, <code>CanRetrieve</code>, returns a boolean value indicating if the value retriever can handle the specified property type. In this example, if the incoming property type is <code>GeoLocation</code>, then it returns true. The second method, <code>Retrieve</code>, performs the work of converting the string value from the table into an instance of the target type which, in this case, is <code>GeoLocation</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/4058287e99d16aa6068a947235d15a43.js\"></script>\n<h4 id=\"ivaluecomparer\">IValueComparer</h4>\n<p><code>IValueComparer</code> is very similar in that it defines two methods, <code>CanCompare</code> and <code>Compare</code>. <code>CanCompare</code> is provided the property value from the target .NET object. In this case, if it is of type <code>GeoLocation</code>, then the method returns true indicating it can handle the comparison. The second method, <code>Compare</code>, is passed the same actual value and the expected string value from the table. The method does the work of comparing the two to determine equality. If it returns false, the test fails.</p>\n<script src=\"https://gist.github.com/joebuschmann/700b16a22e2b59c60d944d11498be8e3.js\"></script>\n<h4 id=\"registervaluemappings\">Register Value Mappings</h4>\n<p>For the SpecFlow runtime to pick up custom value handlers, they have to be registered in a <code>BeforeTestRun</code> hook. <code>GeoLocationValueHandler</code> implements both interfaces and is passed to methods on <code>Service.Instance</code>. The runtime can now work with location values in the binding steps.</p>\n<script src=\"https://gist.github.com/joebuschmann/47eb7c3ad02d10876e26df6a5a1271f3.js\"></script>\n<hr />\n<p>The key to a robust reusable SpecFlow library is handling table data efficiently. By keeping values atomic, using the table helpers, and creating custom field and value mappings, your bindings will scale as the number of scenarios grows.</p>\n</div>","amp":null,"plaintext":"The Gherkin DSL defines data tables as a way of passing a list of values to a\nstep definition. Gherkin tables use the pipe character |  to delimit column\nnames and values. They're easy to read and understand by both business and\ntechnical people.\n\nWhile they work great in Gherkin, tables don't translate well to strongly typed\n.NET languages. They are converted to an instance of the Table  type in SpecFlow\nbindings. This data type is prone to errors because it is weakly typed (columns\nand values are strings) and requires iterating columns and rows to get at the\nvalues. A robust reusable library of SpecFlow bindings has to include strategies\nfor working with tables effectively. Fortunately, there are helper libraries and\npatterns available to minimize the pain of manipulating table data.\n\nVertical versus horizontal tables\nBefore digging in, a word about vertical and horizontal tables. Vertical tables\nhave two columns. The first contains the field names, and the second contains\nthe values. Vertical tables can only be mapped to a single .NET object, not\nlists or collections.\n\nHorizontal tables have three or more columns. They are more flexible because\nthey can be mapped to a list of objects. The first row defines the field names\nand each subsequent row holds the values for an item in the list.\n\nTable values should be atomic\nTable values should be as atomic as possible to simplify the .NET bindings\ncomsuming them. If you find yourself parsing table values, that's a strong\nindication they're not atomic and can be broken down further.\n\nThe following Gherkin is a good example of what not to do. The first value is a\nfull name including salutation. Names are normally divided into salutation,\nfirst name, and last name in code for storage and manipulation. The underlying\nbinding will have to parse this value which is error prone. Same for the\naddress. The different parts of the address (line1, city, state, and zip code)\nare delimited by a semi-colon. What if the person who created the Gherkin\nforgets the correct delimiter? Again this approach is error prone.\n\nA better approach is to break up the name and address into atomic parts in the\nGherkin. Each component is clearly defined. The name has separate columns for\nthe salutation, first name, and last name. Similarly, the address is broken up\ninto line1, city, state, and zip code. As we'll see in the next section, the\n.NET bindings simplify further with table helpers.\n\nTable helpers make working with tables easier\nLike I mentioned earlier, the Gherkin language includes tables for passing\ncomplex data or lists of data to a step definition. They're easy to use in the\nGherkin editor but are painful to work with in code. They're not strongly typed,\nand if there's a problem, you won't know until runtime.\n\nA common pattern is to convert tables into strongly typed .NET objects in step\ndefinitions. In fact there are a number of helper extension methods in the\nSpecFlow runtime library for converting tables into objects and comparing\ntabular data to object data. These helpers can go a long way to clean up\nbindings.\n\nIn this example, the given step builds out an Address  object by manually\niterating the rows and columns of the incoming table. This code is prone to\nerrors due to the lack of type safety, and not to mention it takes a lot of\nkeystrokes. The CreateInstance  extention method reduces it to one line.\n\nIn a similar way, SpecFlow has helper methods for comparing tables to objects.\n\nValidateAddress  compares each table value field by field. Again, you can\ncollapse this code down to a single line.\n\nTechTalk.SpecFlow.Assist\nThese helper methods can be found in the TechTalk.SpecFlow.Assist  namespace.\nThey are extension methods off of the Table  data type.\n\n * CreateInstance  - creates a new object\n * FillInstance  - populates an existing object\n * CreateSet  - creates a list of objects\n * CompareToInstance  - compares table values to object properties\n * CompareToSet  - compares a table to a list of objects\n\nCheck out the SpecFlow documentation\n[http://specflow.org/documentation/SpecFlow-Assist-Helpers/]  for more details.\n\nCustomize field mappings\nSpecFlow will ignore whitespace and casing when matching table column names to\nobject property names. Sometimes that isn't enough. An address object may have a\nproperty named \"State\", but for Canadian addresses, \"Province\" is the more\nappropriate term to use in the business domain. Same for \"Zip Code\" versus\n\"Postal Code\".\n\nSpecFlow defines the TableAliases  attribute for these situations. Using this\nattribute, you can provide alternate mappings between a table column name and an\nobject property name. The runtime will include these mappings when you invoke\nthe table helpers.\n\nThe example above provides the alias \"Province\" for \"State\" and \"Postal Code\"\nfor \"Zip Code\" among others. Now you can properly specifiy a Canadian address.\n\nAlso note that table aliases support regular expressions.\n\nCustomize value mappings\nLike field mappings, SpecFlow allows developers to customize how table values\nare mapped to an object property. The runtime handles primitive type conversions\nincluding Enums and Guids by default; however you may want to convert table\nvalues to a custom data type. You can do this with a custom value retriever and\nvalue comparer.\n\nLet's say you want to update the address step with a new Location column.\nLocation data consists of latitude and longitude values in parentheses and\nseparated by a comma.\n\nYou want to map this value to a new property on the custom Address  data type\ncalled Location. The property is of type GeoLocation  which has properties for\nthe latitude and longitude.\n\nOf course the SpecFlow runtime doesn't know about the GeoLocation type, but you\ncan use custom implementations of IValueRetriever  and IValueComparer  to tell\nthe runtime how to do the conversions. Value retrievers take a table value and\nconvert it into an instance of a .NET type. Value comparers take a .NET type and\ncompare it to a table value to determine equivalence. If the two values aren't\nequivalent, the runtime throws an exception, and the test fails.\n\nIValueRetriever\nIValueRetriever  defines two methods. The first, CanRetrieve, returns a boolean\nvalue indicating if the value retriever can handle the specified property type.\nIn this example, if the incoming property type is GeoLocation, then it returns\ntrue. The second method, Retrieve, performs the work of converting the string\nvalue from the table into an instance of the target type which, in this case, is\n GeoLocation.\n\nIValueComparer\nIValueComparer  is very similar in that it defines two methods, CanCompare  and \nCompare. CanCompare  is provided the property value from the target .NET object.\nIn this case, if it is of type GeoLocation, then the method returns true\nindicating it can handle the comparison. The second method, Compare, is passed\nthe same actual value and the expected string value from the table. The method\ndoes the work of comparing the two to determine equality. If it returns false,\nthe test fails.\n\nRegister Value Mappings\nFor the SpecFlow runtime to pick up custom value handlers, they have to be\nregistered in a BeforeTestRun  hook. GeoLocationValueHandler  implements both\ninterfaces and is passed to methods on Service.Instance. The runtime can now\nwork with location values in the binding steps.\n\n\n--------------------------------------------------------------------------------\n\nThe key to a robust reusable SpecFlow library is handling table data\nefficiently. By keeping values atomic, using the table helpers, and creating\ncustom field and value mappings, your bindings will scale as the number of\nscenarios grows.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"Working with Gherkin tables in a strongly typed .NET language can be painful. This post presents strategies for minimizing the code you have to write when using table data.","author_id":"1","created_at":"2018-07-31T23:01:18.000Z","created_by":"1","updated_at":"2018-08-10T21:41:47.000Z","updated_by":"1","published_at":"2018-08-10T21:41:47.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b68ccac9ae64b00bf973c15","uuid":"0d6fbb2f-fa74-4cc1-80c7-657a22221050","title":"Reusable Bindings in SpecFlow","slug":"reusable-bindings-in-specflow","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"As your application grows, your SpecFlow test suite needs to grow with it. Reusable bindings are essentional to prevent your code from becoming a bloated mess. Fortunately, the SpecFlow runtime has reusability in mind with a built-in inversion of control (IoC) framework and step argument transformations. With these features you can create reusable bindings that make test creation more productive.\\n\\n### Problems with Inheritance\\n\\nBefore digging into IoC, I'll take a moment to cover why you shouldn't use inheritance in your bindings. I don't have any issues with inheritance in general, but with SpecFlow it can cause problems. The biggest issue is bindings in a base class can cause exceptions to be thrown at runtime. Check out the UML diagram below.\\n\\n<img src=\\\"https://joebuschmann.github.io/scaling-specflow/images/inheritance-whiteboard.png\\\" />\\n\\nIt shows a relationship between a base class `Service<TReq, TResp>` and two subclasses `ProductCatalogService` and `OrderService`. The base class contains common state shared among the subclasses as well as common methods for invoking a service endpoint during a test. It handles creating the proxy, serializing the request, and deserializing the response. It also has steps defined and shared among its subclasses.\\n\\nAt runtime, scenarios using these bindings will throw an exception. SpecFlow sees the step bindings in the base class as duplicate steps and doesn't know which one to invoke.\\n\\n```\\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found\\nfor step 'Given Invoke Service'\\n```\\n\\nThe exception can be avoided by pulling the steps out of the base class into a new one. Along with it will come the common methods for invoking a service endpoint. If this is all the class is doing, there's no point to keeping it around, and it should be removed.\\n\\nCheck out [Problems with placing step definitions to base classes](http://gasparnagy.com/2015/05/specflow-tips-problems-with-placing-step-definitions-to-base-classes/) by Gaspar Nagy for more detail on this issue.\\n\\nAnother problem with inheritance is base classes tend to become a dumping ground for state shared between the bindings. Over time, the shared state will have low cohesion and lead to violations of the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle). As you'll see, state classes should be kept small and shared using IoC.\\n\\n### Reuse with the IoC Container\\n\\nThere's a better way to share state and code. SpecFlow ships with a [lightweight IOC container](https://github.com/gasparnagy/BoDi) that you can leverage to inject dependencies into bindings. Coding for dependency injection naturally leads to small classes with high cohesion and avoids the problems of inheritance.\\n\\nUsing the container is straightforward. Add a dependency to a binding's constructor, and the runtime will provide it. SpecFlow will automatically pick up public classes with a parameterless constructor or a constructor whose dependencies the runtime can resolve. Below is an example.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/35dcf3145b53ef6ba6dcd44c7aeefdc5.js\\\"></script>\\n\\nThe `Search` binding has two dependencies: an instance of `IWebDriver` and `ISearchProvider`. It takes them as constructor parameters and saves them to a field variable.\\n\\nWhat can you get from the container?\\n\\n* Classes decorated with the Binding attribute\\n* Custom context classes\\n* Built-in context classes - e.g. ScenarioContext\\n* The container itself - IObjectContainer\\n* Dependencies explicitly registered with the container\\n\\nHere are three examples of dependency injection (or DI) in SpecFlow.\\n\\n#### Example 1: Retrieve the SpecFlow context objects\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/eeb70a7c0029b47e48edcba6f64b6aad.js\\\"></script>\\n\\nYou can retrieve metadata provided by the SpecFlow runtime which describes the current scenario. This metadata is contained in the `ScenarioContext` object provided by the framework.\\n\\n#### Example 2: You can use DI to load the appropriate Selenium web driver\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/f25fed3767299a4bd439605a9138e413.js\\\"></script>\\n\\nThis example uses a BeforeScenario hook to load the appropriate Selenium web driver for web UI tests. The binding takes an instance of `IObjectContainer` in the constructor. The `BuildWebDriver` method creates an instance of `IWebDriver` using configuration or some other mechanism. Then the instance is registered with the container using `_objectContainer` and made available to bindings.\\n\\nNote the binding also implements `IDisposable`. SpecFlow will invoke the `Dispose` method of any binding after the scenario is complete. In this case, it is the equivalent of applying the `[AfterScenario]` attribute.\\n\\n#### Example 3: You can use tags to conditionally load dependencies\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/b0ccc18f6472f8a10877512074140c4d.js\\\"></script>\\n\\nTags are a Gherkin feature that are useful for annotating a scenario or feature and can drive conditional binding or custom behavior. Tags begin with the \\\"@\\\" character.\\n\\nThe preceding Gherkin uses the tag `@json` to indicate the scenario should be executed using JSON serialization. This scenario validates a service endpoint and needs to use the JSON data exchange format for the request and response data. The endpoint also accepts XML or FormUrlEncoded content.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/42e77fbac8e5989bacc0ded951116ee9.js\\\"></script>\\n\\nThe binding implements three `BeforeScenario` hooks for registering the correct serializer. The options are XML, JSON, and FormUrlEncoded. Only one serializer will be added to the container depending on which tag is used.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/fd812cde243fccaba85d573aaaad3e8e.js\\\"></script>\\n\\nOther bindings request the correct serializer by adding it to the constructor.\\n\\n### What about the Steps class?\\n\\nIt's pretty clear I prefer code reuse via DI over inheritance; however, there is an abstract class `TechTalk.SpecFlow.Steps` in the runtime library you can use as the base class for your bindings. You can check out [the source](https://github.com/techtalk/SpecFlow/blob/master/TechTalk.SpecFlow/Steps.cs) on GitHub. A partial definition is below.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0472f10c0943d990c3b561b337bf3848.js\\\"></script>\\n\\nIt's strange that a framework built around DI would provide a base class like `Steps`. It seems to exist for two reasons: 1) to provide access to the scenario, feature, and test metadata and 2) to expose the ability to invoke other Gherkin steps from a binding.\\n\\nAs we have seen, the test metadata like `SenarioContext` can be obtained via DI without the fuss of a base class. This leaves the only other reason you would use `Steps` which is to invoke other steps from a binding. This is actually quite useful. Composite steps can be created to wrap multiple steps into one. Below are two Gherkin steps for building a customer and address\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/228dfb72ee99cdc6c24b3d390dfae545.js\\\"></script>\\n\\nYou may want to combine these into a single composite step. `GivenANewCustomerAndAddress` does just that using `Steps.Given`.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/3cb5f87fa7e4d60bc469da967bc6f800.js\\\"></script>\\n\\nUsing `Steps` to invoke other binings is not as straightforward as it would seem. In this case, the two tables are created in code using strings for the column names and values. Even worse, the bindings are invoked using string values to identify the target step. The code is messy and fragile. It would be better if this method could be rewritten in a strongly-typed manner.\\n\\nFortunately, there is a another way.\\n\\n### Reusable Bindings with StepArgumentTransformation\\n\\nAnother solution is to invoke the binding steps directly rather than through the `Steps` methods, but this still leaves the issue of table arguments. Building a table in code is not pleasant. You can work around this by pulling out table arguments and transforming them into strongly typed .NET objects using the `StepArgumentTranformation` attribute. With this approach, steps can be bound to Gherkin tables and called from composite bindings.\\n\\nThe binding step for creating a customer can be paired with a step argument transformation to move the table argument out and replace it with a strongly typed `Customer` instance.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/b540d80a0607e2164ba7321887f48820.js\\\"></script>\\n\\nThe same can be done for the address steps.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0a63d6c690b39418ea9a5c60cfe8b127.js\\\"></script>\\n\\nWith the step argument transformations in place, the composite binding cleans up nicely with the compiler support of strongly typed objects. The customer and address bindings can be invoked safely from code, and they will still bind to the corresponding Gherkin steps.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/39649b8c20ae6a797fcbd44e8b867d08.js\\\"></script>\\n\\n#### Another Example\\n\\nStep argument tranformations are also useful with other argument types. In the Gherkin, `When I remove the 5th product`, you may want to pass the number 5 as an integer value representing the ordinal position of the product. You could write a binding that captures the value \\\"5th\\\" and parses the argument.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/0afa3f7ec949d2daffcc15a9719633cd.js\\\"></script>\\n\\nParsing arguments in a binding step is an anti-pattern, but you could fix this with a regular expression in the `When` attribute to pull out the numeric value. An even better approach is to create a step argument transformation to extract the index argument. It can even decrement the value by one for immediate consumption by zero-based arrays and lists. Now you have a reusable way of extracting ordinal positions from Gherkin steps.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/abf036e9fcf4c3e73c3e5ca09c8d6b27.js\\\"></script>\\n\\n<hr />\\n\\nThe SpecFlow runtime provides tools for building reusable bindings including dependency injection via an IoC framework and step argument transformations. You should create small cohesive classes shared via DI and transform table arguments into concrete .NET objects. You should also avoid inheritance, the `Steps` class, and parsing arguments in your step definitions. With these techniques, your SpecFlow code will scale along with your application.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>As your application grows, your SpecFlow test suite needs to grow with it. Reusable bindings are essentional to prevent your code from becoming a bloated mess. Fortunately, the SpecFlow runtime has reusability in mind with a built-in inversion of control (IoC) framework and step argument transformations. With these features you can create reusable bindings that make test creation more productive.</p>\n<h3 id=\"problemswithinheritance\">Problems with Inheritance</h3>\n<p>Before digging into IoC, I'll take a moment to cover why you shouldn't use inheritance in your bindings. I don't have any issues with inheritance in general, but with SpecFlow it can cause problems. The biggest issue is bindings in a base class can cause exceptions to be thrown at runtime. Check out the UML diagram below.</p>\n<img src=\"https://joebuschmann.github.io/scaling-specflow/images/inheritance-whiteboard.png\" />\n<p>It shows a relationship between a base class <code>Service&lt;TReq, TResp&gt;</code> and two subclasses <code>ProductCatalogService</code> and <code>OrderService</code>. The base class contains common state shared among the subclasses as well as common methods for invoking a service endpoint during a test. It handles creating the proxy, serializing the request, and deserializing the response. It also has steps defined and shared among its subclasses.</p>\n<p>At runtime, scenarios using these bindings will throw an exception. SpecFlow sees the step bindings in the base class as duplicate steps and doesn't know which one to invoke.</p>\n<pre><code>TechTalk.SpecFlow.BindingException : Ambiguous step definitions found\nfor step 'Given Invoke Service'\n</code></pre>\n<p>The exception can be avoided by pulling the steps out of the base class into a new one. Along with it will come the common methods for invoking a service endpoint. If this is all the class is doing, there's no point to keeping it around, and it should be removed.</p>\n<p>Check out <a href=\"http://gasparnagy.com/2015/05/specflow-tips-problems-with-placing-step-definitions-to-base-classes/\">Problems with placing step definitions to base classes</a> by Gaspar Nagy for more detail on this issue.</p>\n<p>Another problem with inheritance is base classes tend to become a dumping ground for state shared between the bindings. Over time, the shared state will have low cohesion and lead to violations of the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">Single Responsibility Principle</a>. As you'll see, state classes should be kept small and shared using IoC.</p>\n<h3 id=\"reusewiththeioccontainer\">Reuse with the IoC Container</h3>\n<p>There's a better way to share state and code. SpecFlow ships with a <a href=\"https://github.com/gasparnagy/BoDi\">lightweight IOC container</a> that you can leverage to inject dependencies into bindings. Coding for dependency injection naturally leads to small classes with high cohesion and avoids the problems of inheritance.</p>\n<p>Using the container is straightforward. Add a dependency to a binding's constructor, and the runtime will provide it. SpecFlow will automatically pick up public classes with a parameterless constructor or a constructor whose dependencies the runtime can resolve. Below is an example.</p>\n<script src=\"https://gist.github.com/joebuschmann/35dcf3145b53ef6ba6dcd44c7aeefdc5.js\"></script>\n<p>The <code>Search</code> binding has two dependencies: an instance of <code>IWebDriver</code> and <code>ISearchProvider</code>. It takes them as constructor parameters and saves them to a field variable.</p>\n<p>What can you get from the container?</p>\n<ul>\n<li>Classes decorated with the Binding attribute</li>\n<li>Custom context classes</li>\n<li>Built-in context classes - e.g. ScenarioContext</li>\n<li>The container itself - IObjectContainer</li>\n<li>Dependencies explicitly registered with the container</li>\n</ul>\n<p>Here are three examples of dependency injection (or DI) in SpecFlow.</p>\n<h4 id=\"example1retrievethespecflowcontextobjects\">Example 1: Retrieve the SpecFlow context objects</h4>\n<script src=\"https://gist.github.com/joebuschmann/eeb70a7c0029b47e48edcba6f64b6aad.js\"></script>\n<p>You can retrieve metadata provided by the SpecFlow runtime which describes the current scenario. This metadata is contained in the <code>ScenarioContext</code> object provided by the framework.</p>\n<h4 id=\"example2youcanuseditoloadtheappropriateseleniumwebdriver\">Example 2: You can use DI to load the appropriate Selenium web driver</h4>\n<script src=\"https://gist.github.com/joebuschmann/f25fed3767299a4bd439605a9138e413.js\"></script>\n<p>This example uses a BeforeScenario hook to load the appropriate Selenium web driver for web UI tests. The binding takes an instance of <code>IObjectContainer</code> in the constructor. The <code>BuildWebDriver</code> method creates an instance of <code>IWebDriver</code> using configuration or some other mechanism. Then the instance is registered with the container using <code>_objectContainer</code> and made available to bindings.</p>\n<p>Note the binding also implements <code>IDisposable</code>. SpecFlow will invoke the <code>Dispose</code> method of any binding after the scenario is complete. In this case, it is the equivalent of applying the <code>[AfterScenario]</code> attribute.</p>\n<h4 id=\"example3youcanusetagstoconditionallyloaddependencies\">Example 3: You can use tags to conditionally load dependencies</h4>\n<script src=\"https://gist.github.com/joebuschmann/b0ccc18f6472f8a10877512074140c4d.js\"></script>\n<p>Tags are a Gherkin feature that are useful for annotating a scenario or feature and can drive conditional binding or custom behavior. Tags begin with the &quot;@&quot; character.</p>\n<p>The preceding Gherkin uses the tag <code>@json</code> to indicate the scenario should be executed using JSON serialization. This scenario validates a service endpoint and needs to use the JSON data exchange format for the request and response data. The endpoint also accepts XML or FormUrlEncoded content.</p>\n<script src=\"https://gist.github.com/joebuschmann/42e77fbac8e5989bacc0ded951116ee9.js\"></script>\n<p>The binding implements three <code>BeforeScenario</code> hooks for registering the correct serializer. The options are XML, JSON, and FormUrlEncoded. Only one serializer will be added to the container depending on which tag is used.</p>\n<script src=\"https://gist.github.com/joebuschmann/fd812cde243fccaba85d573aaaad3e8e.js\"></script>\n<p>Other bindings request the correct serializer by adding it to the constructor.</p>\n<h3 id=\"whataboutthestepsclass\">What about the Steps class?</h3>\n<p>It's pretty clear I prefer code reuse via DI over inheritance; however, there is an abstract class <code>TechTalk.SpecFlow.Steps</code> in the runtime library you can use as the base class for your bindings. You can check out <a href=\"https://github.com/techtalk/SpecFlow/blob/master/TechTalk.SpecFlow/Steps.cs\">the source</a> on GitHub. A partial definition is below.</p>\n<script src=\"https://gist.github.com/joebuschmann/0472f10c0943d990c3b561b337bf3848.js\"></script>\n<p>It's strange that a framework built around DI would provide a base class like <code>Steps</code>. It seems to exist for two reasons: 1) to provide access to the scenario, feature, and test metadata and 2) to expose the ability to invoke other Gherkin steps from a binding.</p>\n<p>As we have seen, the test metadata like <code>SenarioContext</code> can be obtained via DI without the fuss of a base class. This leaves the only other reason you would use <code>Steps</code> which is to invoke other steps from a binding. This is actually quite useful. Composite steps can be created to wrap multiple steps into one. Below are two Gherkin steps for building a customer and address</p>\n<script src=\"https://gist.github.com/joebuschmann/228dfb72ee99cdc6c24b3d390dfae545.js\"></script>\n<p>You may want to combine these into a single composite step. <code>GivenANewCustomerAndAddress</code> does just that using <code>Steps.Given</code>.</p>\n<script src=\"https://gist.github.com/joebuschmann/3cb5f87fa7e4d60bc469da967bc6f800.js\"></script>\n<p>Using <code>Steps</code> to invoke other binings is not as straightforward as it would seem. In this case, the two tables are created in code using strings for the column names and values. Even worse, the bindings are invoked using string values to identify the target step. The code is messy and fragile. It would be better if this method could be rewritten in a strongly-typed manner.</p>\n<p>Fortunately, there is a another way.</p>\n<h3 id=\"reusablebindingswithstepargumenttransformation\">Reusable Bindings with StepArgumentTransformation</h3>\n<p>Another solution is to invoke the binding steps directly rather than through the <code>Steps</code> methods, but this still leaves the issue of table arguments. Building a table in code is not pleasant. You can work around this by pulling out table arguments and transforming them into strongly typed .NET objects using the <code>StepArgumentTranformation</code> attribute. With this approach, steps can be bound to Gherkin tables and called from composite bindings.</p>\n<p>The binding step for creating a customer can be paired with a step argument transformation to move the table argument out and replace it with a strongly typed <code>Customer</code> instance.</p>\n<script src=\"https://gist.github.com/joebuschmann/b540d80a0607e2164ba7321887f48820.js\"></script>\n<p>The same can be done for the address steps.</p>\n<script src=\"https://gist.github.com/joebuschmann/0a63d6c690b39418ea9a5c60cfe8b127.js\"></script>\n<p>With the step argument transformations in place, the composite binding cleans up nicely with the compiler support of strongly typed objects. The customer and address bindings can be invoked safely from code, and they will still bind to the corresponding Gherkin steps.</p>\n<script src=\"https://gist.github.com/joebuschmann/39649b8c20ae6a797fcbd44e8b867d08.js\"></script>\n<h4 id=\"anotherexample\">Another Example</h4>\n<p>Step argument tranformations are also useful with other argument types. In the Gherkin, <code>When I remove the 5th product</code>, you may want to pass the number 5 as an integer value representing the ordinal position of the product. You could write a binding that captures the value &quot;5th&quot; and parses the argument.</p>\n<script src=\"https://gist.github.com/joebuschmann/0afa3f7ec949d2daffcc15a9719633cd.js\"></script>\n<p>Parsing arguments in a binding step is an anti-pattern, but you could fix this with a regular expression in the <code>When</code> attribute to pull out the numeric value. An even better approach is to create a step argument transformation to extract the index argument. It can even decrement the value by one for immediate consumption by zero-based arrays and lists. Now you have a reusable way of extracting ordinal positions from Gherkin steps.</p>\n<script src=\"https://gist.github.com/joebuschmann/abf036e9fcf4c3e73c3e5ca09c8d6b27.js\"></script>\n<hr />\n<p>The SpecFlow runtime provides tools for building reusable bindings including dependency injection via an IoC framework and step argument transformations. You should create small cohesive classes shared via DI and transform table arguments into concrete .NET objects. You should also avoid inheritance, the <code>Steps</code> class, and parsing arguments in your step definitions. With these techniques, your SpecFlow code will scale along with your application.</p>\n</div>","amp":null,"plaintext":"As your application grows, your SpecFlow test suite needs to grow with it.\nReusable bindings are essentional to prevent your code from becoming a bloated\nmess. Fortunately, the SpecFlow runtime has reusability in mind with a built-in\ninversion of control (IoC) framework and step argument transformations. With\nthese features you can create reusable bindings that make test creation more\nproductive.\n\nProblems with Inheritance\nBefore digging into IoC, I'll take a moment to cover why you shouldn't use\ninheritance in your bindings. I don't have any issues with inheritance in\ngeneral, but with SpecFlow it can cause problems. The biggest issue is bindings\nin a base class can cause exceptions to be thrown at runtime. Check out the UML\ndiagram below.\n\nIt shows a relationship between a base class Service<TReq, TResp>  and two\nsubclasses ProductCatalogService  and OrderService. The base class contains\ncommon state shared among the subclasses as well as common methods for invoking\na service endpoint during a test. It handles creating the proxy, serializing the\nrequest, and deserializing the response. It also has steps defined and shared\namong its subclasses.\n\nAt runtime, scenarios using these bindings will throw an exception. SpecFlow\nsees the step bindings in the base class as duplicate steps and doesn't know\nwhich one to invoke.\n\nTechTalk.SpecFlow.BindingException : Ambiguous step definitions found\nfor step 'Given Invoke Service'\n\n\nThe exception can be avoided by pulling the steps out of the base class into a\nnew one. Along with it will come the common methods for invoking a service\nendpoint. If this is all the class is doing, there's no point to keeping it\naround, and it should be removed.\n\nCheck out Problems with placing step definitions to base classes\n[http://gasparnagy.com/2015/05/specflow-tips-problems-with-placing-step-definitions-to-base-classes/] \n by Gaspar Nagy for more detail on this issue.\n\nAnother problem with inheritance is base classes tend to become a dumping ground\nfor state shared between the bindings. Over time, the shared state will have low\ncohesion and lead to violations of the Single Responsibility Principle\n[https://en.wikipedia.org/wiki/Single_responsibility_principle]. As you'll see,\nstate classes should be kept small and shared using IoC.\n\nReuse with the IoC Container\nThere's a better way to share state and code. SpecFlow ships with a lightweight\nIOC container [https://github.com/gasparnagy/BoDi]  that you can leverage to\ninject dependencies into bindings. Coding for dependency injection naturally\nleads to small classes with high cohesion and avoids the problems of\ninheritance.\n\nUsing the container is straightforward. Add a dependency to a binding's\nconstructor, and the runtime will provide it. SpecFlow will automatically pick\nup public classes with a parameterless constructor or a constructor whose\ndependencies the runtime can resolve. Below is an example.\n\nThe Search  binding has two dependencies: an instance of IWebDriver  and \nISearchProvider. It takes them as constructor parameters and saves them to a\nfield variable.\n\nWhat can you get from the container?\n\n * Classes decorated with the Binding attribute\n * Custom context classes\n * Built-in context classes - e.g. ScenarioContext\n * The container itself - IObjectContainer\n * Dependencies explicitly registered with the container\n\nHere are three examples of dependency injection (or DI) in SpecFlow.\n\nExample 1: Retrieve the SpecFlow context objects\nYou can retrieve metadata provided by the SpecFlow runtime which describes the\ncurrent scenario. This metadata is contained in the ScenarioContext  object\nprovided by the framework.\n\nExample 2: You can use DI to load the appropriate Selenium web driver\nThis example uses a BeforeScenario hook to load the appropriate Selenium web\ndriver for web UI tests. The binding takes an instance of IObjectContainer  in\nthe constructor. The BuildWebDriver  method creates an instance of IWebDriver \nusing configuration or some other mechanism. Then the instance is registered\nwith the container using _objectContainer  and made available to bindings.\n\nNote the binding also implements IDisposable. SpecFlow will invoke the Dispose \nmethod of any binding after the scenario is complete. In this case, it is the\nequivalent of applying the [AfterScenario]  attribute.\n\nExample 3: You can use tags to conditionally load dependencies\nTags are a Gherkin feature that are useful for annotating a scenario or feature\nand can drive conditional binding or custom behavior. Tags begin with the \"@\"\ncharacter.\n\nThe preceding Gherkin uses the tag @json  to indicate the scenario should be\nexecuted using JSON serialization. This scenario validates a service endpoint\nand needs to use the JSON data exchange format for the request and response\ndata. The endpoint also accepts XML or FormUrlEncoded content.\n\nThe binding implements three BeforeScenario  hooks for registering the correct\nserializer. The options are XML, JSON, and FormUrlEncoded. Only one serializer\nwill be added to the container depending on which tag is used.\n\nOther bindings request the correct serializer by adding it to the constructor.\n\nWhat about the Steps class?\nIt's pretty clear I prefer code reuse via DI over inheritance; however, there is\nan abstract class TechTalk.SpecFlow.Steps  in the runtime library you can use as\nthe base class for your bindings. You can check out the source\n[https://github.com/techtalk/SpecFlow/blob/master/TechTalk.SpecFlow/Steps.cs] \non GitHub. A partial definition is below.\n\nIt's strange that a framework built around DI would provide a base class like \nSteps. It seems to exist for two reasons: 1) to provide access to the scenario,\nfeature, and test metadata and 2) to expose the ability to invoke other Gherkin\nsteps from a binding.\n\nAs we have seen, the test metadata like SenarioContext  can be obtained via DI\nwithout the fuss of a base class. This leaves the only other reason you would\nuse Steps  which is to invoke other steps from a binding. This is actually quite\nuseful. Composite steps can be created to wrap multiple steps into one. Below\nare two Gherkin steps for building a customer and address\n\nYou may want to combine these into a single composite step. \nGivenANewCustomerAndAddress  does just that using Steps.Given.\n\nUsing Steps  to invoke other binings is not as straightforward as it would seem.\nIn this case, the two tables are created in code using strings for the column\nnames and values. Even worse, the bindings are invoked using string values to\nidentify the target step. The code is messy and fragile. It would be better if\nthis method could be rewritten in a strongly-typed manner.\n\nFortunately, there is a another way.\n\nReusable Bindings with StepArgumentTransformation\nAnother solution is to invoke the binding steps directly rather than through the\n Steps  methods, but this still leaves the issue of table arguments. Building a\ntable in code is not pleasant. You can work around this by pulling out table\narguments and transforming them into strongly typed .NET objects using the \nStepArgumentTranformation  attribute. With this approach, steps can be bound to\nGherkin tables and called from composite bindings.\n\nThe binding step for creating a customer can be paired with a step argument\ntransformation to move the table argument out and replace it with a strongly\ntyped Customer  instance.\n\nThe same can be done for the address steps.\n\nWith the step argument transformations in place, the composite binding cleans up\nnicely with the compiler support of strongly typed objects. The customer and\naddress bindings can be invoked safely from code, and they will still bind to\nthe corresponding Gherkin steps.\n\nAnother Example\nStep argument tranformations are also useful with other argument types. In the\nGherkin, When I remove the 5th product, you may want to pass the number 5 as an\ninteger value representing the ordinal position of the product. You could write\na binding that captures the value \"5th\" and parses the argument.\n\nParsing arguments in a binding step is an anti-pattern, but you could fix this\nwith a regular expression in the When  attribute to pull out the numeric value.\nAn even better approach is to create a step argument transformation to extract\nthe index argument. It can even decrement the value by one for immediate\nconsumption by zero-based arrays and lists. Now you have a reusable way of\nextracting ordinal positions from Gherkin steps.\n\n\n--------------------------------------------------------------------------------\n\nThe SpecFlow runtime provides tools for building reusable bindings including\ndependency injection via an IoC framework and step argument transformations. You\nshould create small cohesive classes shared via DI and transform table arguments\ninto concrete .NET objects. You should also avoid inheritance, the Steps  class,\nand parsing arguments in your step definitions. With these techniques, your\nSpecFlow code will scale along with your application.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-08-06T22:33:16.000Z","created_by":"1","updated_at":"2018-08-13T13:44:33.000Z","updated_by":"1","published_at":"2018-08-13T13:44:33.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b718bf6e5051800bf9faf9c","uuid":"7c649389-94de-4791-98bb-6991063364d9","title":"Running SpecFlow Scenarios in Parallel","slug":"running-specflow-scenarios-in-parallel","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"As of SpecFlow version 2.0, you can run scenarios in parallel. This means faster execution times and faster feedback in your continuous integration process.\\n\\n### Memory Isolation\\n\\nTo enable parallel execution, you must use a test runner that supports it. Available runners include NUnit 3.0, xUnit 2.0, and the SpecFlow+ Runner (specrun). Specrun is a commercial product, but it has advanced features like memory isolation via an app domain or process. NUnit and xUnit don't support memory isolation, so they requre your tests to be thread safe. Also, you won't be able to use the static context properties `ScenarioContext.Current`, `FeatureContext.Current`, and `ScenarioStepContext.Current`. The following code throws a `SpecFlowException` when run in parallel.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/f47fab40bb754d7d2eae1765fc9b118c.js\\\"></script>\\n\\nYou can work around this limitation by using dependency injection. In fact, you should use DI anyway for a cleaner scalable code base. See my post on [Reusable Bindings in SpecFlow](https://joebuschmann.com/reusable-bindings-in-specflow/) for more details on leveraging SpecFlow's IoC container.\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/269873f3149ab7895a06cfa3c0b6849a.js\\\"></script>\\n\\n### NUnit 3 Support\\n\\nNUnit 3 requires the assembly-level attribute `Parallelizable` to configure [parallel test execution](https://github.com/nunit/docs/wiki/Parallelizable-Attribute).\\n\\n<script src=\\\"https://gist.github.com/joebuschmann/84da986f8e10f72cd08419b8076c5612.js\\\"></script>\\n\\n### Hooks\\n\\nHooks or event bindings behave the same except for one crucial difference: `BeforeFeature` and `AfterFeature` hooks will execute multiple times if scenarios from the same feature run in parallel. They should be thread-safe and safe to execute repeatedly. From the documentation:\\n\\n> Each thread manages its own enter/exit feature execution workflow. The `[BeforeFeature]` and `[AfterFeature]` hooks may be executed multiple times in different threads if the different threads run scenarios from the same feature file. The execution of these hooks do not block one another, but the Before/After feature hooks are called in pairs within a single thread (the `[BeforeFeature]` hook of the next scenario is only executed after the `[AfterFeature]` hook of the previous one). Each thread has a separate (and isolated) FeatureContext.\\n> \\\\- [SpecFlow Documentation](https://specflow.org/documentation/Parallel-Execution/)\\n\\n<hr />\\n\\nEnabling parallel execution in SpecFlow is pretty straightforward. If you're converting an existing test suite, you should set aside time to work through failures due to race conditions and lack of thread-safety. It could take a few weeks for a large number of scenarios.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>As of SpecFlow version 2.0, you can run scenarios in parallel. This means faster execution times and faster feedback in your continuous integration process.</p>\n<h3 id=\"memoryisolation\">Memory Isolation</h3>\n<p>To enable parallel execution, you must use a test runner that supports it. Available runners include NUnit 3.0, xUnit 2.0, and the SpecFlow+ Runner (specrun). Specrun is a commercial product, but it has advanced features like memory isolation via an app domain or process. NUnit and xUnit don't support memory isolation, so they requre your tests to be thread safe. Also, you won't be able to use the static context properties <code>ScenarioContext.Current</code>, <code>FeatureContext.Current</code>, and <code>ScenarioStepContext.Current</code>. The following code throws a <code>SpecFlowException</code> when run in parallel.</p>\n<script src=\"https://gist.github.com/joebuschmann/f47fab40bb754d7d2eae1765fc9b118c.js\"></script>\n<p>You can work around this limitation by using dependency injection. In fact, you should use DI anyway for a cleaner scalable code base. See my post on <a href=\"https://joebuschmann.com/reusable-bindings-in-specflow/\">Reusable Bindings in SpecFlow</a> for more details on leveraging SpecFlow's IoC container.</p>\n<script src=\"https://gist.github.com/joebuschmann/269873f3149ab7895a06cfa3c0b6849a.js\"></script>\n<h3 id=\"nunit3support\">NUnit 3 Support</h3>\n<p>NUnit 3 requires the assembly-level attribute <code>Parallelizable</code> to configure <a href=\"https://github.com/nunit/docs/wiki/Parallelizable-Attribute\">parallel test execution</a>.</p>\n<script src=\"https://gist.github.com/joebuschmann/84da986f8e10f72cd08419b8076c5612.js\"></script>\n<h3 id=\"hooks\">Hooks</h3>\n<p>Hooks or event bindings behave the same except for one crucial difference: <code>BeforeFeature</code> and <code>AfterFeature</code> hooks will execute multiple times if scenarios from the same feature run in parallel. They should be thread-safe and safe to execute repeatedly. From the documentation:</p>\n<blockquote>\n<p>Each thread manages its own enter/exit feature execution workflow. The <code>[BeforeFeature]</code> and <code>[AfterFeature]</code> hooks may be executed multiple times in different threads if the different threads run scenarios from the same feature file. The execution of these hooks do not block one another, but the Before/After feature hooks are called in pairs within a single thread (the <code>[BeforeFeature]</code> hook of the next scenario is only executed after the <code>[AfterFeature]</code> hook of the previous one). Each thread has a separate (and isolated) FeatureContext.<br>\n- <a href=\"https://specflow.org/documentation/Parallel-Execution/\">SpecFlow Documentation</a></p>\n</blockquote>\n<hr />\n<p>Enabling parallel execution in SpecFlow is pretty straightforward. If you're converting an existing test suite, you should set aside time to work through failures due to race conditions and lack of thread-safety. It could take a few weeks for a large number of scenarios.</p>\n</div>","amp":null,"plaintext":"As of SpecFlow version 2.0, you can run scenarios in parallel. This means faster\nexecution times and faster feedback in your continuous integration process.\n\nMemory Isolation\nTo enable parallel execution, you must use a test runner that supports it.\nAvailable runners include NUnit 3.0, xUnit 2.0, and the SpecFlow+ Runner\n(specrun). Specrun is a commercial product, but it has advanced features like\nmemory isolation via an app domain or process. NUnit and xUnit don't support\nmemory isolation, so they requre your tests to be thread safe. Also, you won't\nbe able to use the static context properties ScenarioContext.Current, \nFeatureContext.Current, and ScenarioStepContext.Current. The following code\nthrows a SpecFlowException  when run in parallel.\n\nYou can work around this limitation by using dependency injection. In fact, you\nshould use DI anyway for a cleaner scalable code base. See my post on Reusable\nBindings in SpecFlow [https://joebuschmann.com/reusable-bindings-in-specflow/] \nfor more details on leveraging SpecFlow's IoC container.\n\nNUnit 3 Support\nNUnit 3 requires the assembly-level attribute Parallelizable  to configure \nparallel test execution\n[https://github.com/nunit/docs/wiki/Parallelizable-Attribute].\n\nHooks\nHooks or event bindings behave the same except for one crucial difference: \nBeforeFeature  and AfterFeature  hooks will execute multiple times if scenarios\nfrom the same feature run in parallel. They should be thread-safe and safe to\nexecute repeatedly. From the documentation:\n\nEach thread manages its own enter/exit feature execution workflow. The \n[BeforeFeature]  and [AfterFeature]  hooks may be executed multiple times in\ndifferent threads if the different threads run scenarios from the same feature\nfile. The execution of these hooks do not block one another, but the\nBefore/After feature hooks are called in pairs within a single thread (the \n[BeforeFeature]  hook of the next scenario is only executed after the \n[AfterFeature]  hook of the previous one). Each thread has a separate (and\nisolated) FeatureContext.\n- SpecFlow Documentation\n[https://specflow.org/documentation/Parallel-Execution/]\n\n\n--------------------------------------------------------------------------------\n\nEnabling parallel execution in SpecFlow is pretty straightforward. If you're\nconverting an existing test suite, you should set aside time to work through\nfailures due to race conditions and lack of thread-safety. It could take a few\nweeks for a large number of scenarios.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"As of SpecFlow version 2.0, you can run scenarios in parallel. This means faster execution times and faster feedback in your continuous integration process.","author_id":"1","created_at":"2018-08-13T13:47:34.000Z","created_by":"1","updated_at":"2018-08-24T22:48:34.000Z","updated_by":"1","published_at":"2018-08-24T22:48:34.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5b718c2ce5051800bf9faf9e","uuid":"24a5d608-50c2-45a6-9f93-a1393804f274","title":"SpecFlow Step Definition Report","slug":"specflow-step-definition-report","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"The SpecFlow runtime comes with a little known command line utility aptly named specflow.exe. You can find it in the tools directory in the SpecFlow NuGet package (ex: *\\\\[project]\\\\packages\\\\SpecFlow.2.3.2\\\\tools*). This humble tool can be used to regenerate SpecFlow unit test classes, create test execution reports for NUnit and MSTest, and generate a step definition report. The most useful of these is the step definition report.\\n\\nAs the number of features grows, scenarios and bindings are going to get lost in the day-to-day scrum of software development. The team will define scenarios that are added to a feature file but are never bound. The converse is true as well. Scenarios are removed when they no longer apply, but their bindings stick around. That's where the step definition report comes in. It helps you to find unbound scenarios and unused bindings, so you can keep your code base tidy.\\n\\n#### Generate the Report\\n\\nThe step definition report can be easily integrated into your CI process. The report is generated by invoking specflow.exe with the **stepdefinitionreport** command.\\n\\n```\\nspecflow.exe stepdefinitionreport SpecFlowTalk.csproj /BinFolder:bin/debug\\n```\\n\\nBy default, the result is saved to StepDefinitionReport.html, but you can change that with the `/out` parameter. Check out the [SpecFlow reporting documentation](https://specflow.org/documentation/Reporting/) for more options.\\n\\n#### Report Details\\n\\nThe report below provides binding and usage details for a sample SpecFlow project. A red background indicates code not used in any scenarios. A yellow background indicates scenarios with no automation. You could run the step definition report as part of your CI process and save the result as a build artifact. Then engineers could regularly review the report and create stories to clean up the scenarios and bindings. The goal is to have no yellow or red rows.\\n\\n<iframe src=\\\"https://joebuschmann.github.io/scaling-specflow/reports/step-definition-report.html\\\" width=\\\"100%\\\" height=\\\"400px\\\" style=\\\"border: 1px solid;\\\"></iframe>\\n\\nClick <a href=\\\"https://joebuschmann.github.io/scaling-specflow/reports/step-definition-report.html\\\" target=\\\"_blank\\\">here</a> for a full page view of the report.\\n\\n<hr />\\n\\nIf you're not using this report, I encourage you to check it out. It makes a useful addition to your CI process.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>The SpecFlow runtime comes with a little known command line utility aptly named specflow.exe. You can find it in the tools directory in the SpecFlow NuGet package (ex: <em>[project]\\packages\\SpecFlow.2.3.2\\tools</em>). This humble tool can be used to regenerate SpecFlow unit test classes, create test execution reports for NUnit and MSTest, and generate a step definition report. The most useful of these is the step definition report.</p>\n<p>As the number of features grows, scenarios and bindings are going to get lost in the day-to-day scrum of software development. The team will define scenarios that are added to a feature file but are never bound. The converse is true as well. Scenarios are removed when they no longer apply, but their bindings stick around. That's where the step definition report comes in. It helps you to find unbound scenarios and unused bindings, so you can keep your code base tidy.</p>\n<h4 id=\"generatethereport\">Generate the Report</h4>\n<p>The step definition report can be easily integrated into your CI process. The report is generated by invoking specflow.exe with the <strong>stepdefinitionreport</strong> command.</p>\n<pre><code>specflow.exe stepdefinitionreport SpecFlowTalk.csproj /BinFolder:bin/debug\n</code></pre>\n<p>By default, the result is saved to StepDefinitionReport.html, but you can change that with the <code>/out</code> parameter. Check out the <a href=\"https://specflow.org/documentation/Reporting/\">SpecFlow reporting documentation</a> for more options.</p>\n<h4 id=\"reportdetails\">Report Details</h4>\n<p>The report below provides binding and usage details for a sample SpecFlow project. A red background indicates code not used in any scenarios. A yellow background indicates scenarios with no automation. You could run the step definition report as part of your CI process and save the result as a build artifact. Then engineers could regularly review the report and create stories to clean up the scenarios and bindings. The goal is to have no yellow or red rows.</p>\n<iframe src=\"https://joebuschmann.github.io/scaling-specflow/reports/step-definition-report.html\" width=\"100%\" height=\"400px\" style=\"border: 1px solid;\"></iframe>\n<p>Click <a href=\"https://joebuschmann.github.io/scaling-specflow/reports/step-definition-report.html\" target=\"_blank\">here</a> for a full page view of the report.</p>\n<hr />\n<p>If you're not using this report, I encourage you to check it out. It makes a useful addition to your CI process.</p>\n</div>","amp":null,"plaintext":"The SpecFlow runtime comes with a little known command line utility aptly named\nspecflow.exe. You can find it in the tools directory in the SpecFlow NuGet\npackage (ex: [project]\\packages\\SpecFlow.2.3.2\\tools). This humble tool can be\nused to regenerate SpecFlow unit test classes, create test execution reports for\nNUnit and MSTest, and generate a step definition report. The most useful of\nthese is the step definition report.\n\nAs the number of features grows, scenarios and bindings are going to get lost in\nthe day-to-day scrum of software development. The team will define scenarios\nthat are added to a feature file but are never bound. The converse is true as\nwell. Scenarios are removed when they no longer apply, but their bindings stick\naround. That's where the step definition report comes in. It helps you to find\nunbound scenarios and unused bindings, so you can keep your code base tidy.\n\nGenerate the Report\nThe step definition report can be easily integrated into your CI process. The\nreport is generated by invoking specflow.exe with the stepdefinitionreport \ncommand.\n\nspecflow.exe stepdefinitionreport SpecFlowTalk.csproj /BinFolder:bin/debug\n\n\nBy default, the result is saved to StepDefinitionReport.html, but you can change\nthat with the /out  parameter. Check out the SpecFlow reporting documentation\n[https://specflow.org/documentation/Reporting/]  for more options.\n\nReport Details\nThe report below provides binding and usage details for a sample SpecFlow\nproject. A red background indicates code not used in any scenarios. A yellow\nbackground indicates scenarios with no automation. You could run the step\ndefinition report as part of your CI process and save the result as a build\nartifact. Then engineers could regularly review the report and create stories to\nclean up the scenarios and bindings. The goal is to have no yellow or red rows.\n\nClick here\n[https://joebuschmann.github.io/scaling-specflow/reports/step-definition-report.html] \n for a full page view of the report.\n\n\n--------------------------------------------------------------------------------\n\nIf you're not using this report, I encourage you to check it out. It makes a\nuseful addition to your CI process.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":"The SpecFlow Step Definition Report helps you to find unbound scenarios and unused bindings, so you can keep your code base tidy.","author_id":"1","created_at":"2018-08-13T13:48:28.000Z","created_by":"1","updated_at":"2018-08-31T00:42:31.000Z","updated_by":"1","published_at":"2018-08-31T00:42:31.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5c3249dfd2773a00bf34871c","uuid":"5d4222ce-9180-4ea7-8d57-20f26aa0e91f","title":"A Poor Man's Queue","slug":"a-poor-mans-queue","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Any sufficiently large enterprise software application is going to need a queue at some point. A queue is a good way to introduce an asynchronous process and decouple two parts of a system. For example, a user could upload a large file to a web application for processing, and instead of making the user wait for the work to complete, the application could queue up the work and return immediately. Later, when the results are ready, the user could be notified.\\n\\nThe best way to do this is to introduce a message broker like [RabbitMQ](https://www.rabbitmq.com/). With RabbitMQ, not only do you get simple queues with a single subscriber, but you can set up exchanges with multiple subscribers. But taking the leap with an enterprise message broker may be a step too far. Sometimes all you need is a simple queue without the overhead of introducing new middleware.\\n\\nYou can do this with a SQL Server table acting as a queue. It's not sexy, but it gets the job done.\\n\\n## A Table as a Queue\\n\\nImplementing a queue backed by a table seems simple enough but can be surpisingly difficult in practice. The solution is strightforward if there is only one process dequeuing work. As soon as concurrency is introduced with multiple processes, excessive blocking and deadlocks will cause problems if the queries are not structured correctly.\\n\\nThe following table structure could be used for a simple message queue.\\n\\n```\\nCREATE TABLE [Queue]\\n(\\n\\t[Id] INT IDENTITY(1,1) NOT NULL,\\n\\t[Status] TINYINT NOT NULL, /* 1 - READY, 2 - IN PROGRESS */\\n\\t[Message] VARBINARY(MAX)\\n)\\n```\\n\\nNotice the `Status` column with values of 1 (READY) and 2 (IN PROGRESS). When a message is dequeued, the status is set to 2 while it is being processed. Eventually message handling completes, and the record is deleted.\\n\\nThe stored procedure to enqueue a message is straightforward.\\n\\n```\\nCREATE PROCEDURE EnqueueMessage\\n\\t@message VARBINARY(MAX)\\nAS\\nBEGIN\\n\\tINSERT INTO [Queue] ([Status], [Message])\\n\\tVALUES (1, @message)\\nEND\\n```\\n\\nThe proc for dequeuing a message is where things get interesting. You might be tempted to write a procedure that does the following.\\n\\n1. Select the next row.\\n2. Update the selected row's status to 2.\\n3. Return the Id and Message values.\\n\\nImplementing these steps as three separate DML statements introduces a race condition between steps one and two. Two transactions could select the same row at the same time (step 1) before either one updates it. Next, one transaction updates the row (step 2) while the other is blocked. Finally, the second transaction performs the same update and both return the same message to different consumers (step 3). This approach won't work in highly concurrent applications.\\n\\n## A Better Way to Dequeue\\n\\nA better approach would combine all three steps into one DML statement. You can do this with the `OUTPUT` clause, a CTE, and the `ROWLOCK` and `READPAST` hints.\\n\\n```\\nCREATE PROCEDURE DequeueMessage\\nAS\\nBEGIN\\n\\t;WITH NextMessage AS\\n\\t(\\n\\t\\tSELECT TOP 1 *\\n\\t\\tFROM [Queue] WITH (ROWLOCK READPAST)\\n\\t\\tWHERE [Status] = 1\\n\\t\\tORDER BY Id\\n\\t)\\n\\tUPDATE NextMessage\\n\\tSET [Status] = 2\\n\\tOUTPUT\\n\\t\\tinserted.[Id],\\n\\t\\tinserted.[Message]\\nEND\\n```\\n\\nLet's break this down starting with the `OUTPUT` clause. Introduced in SQL Server 2005, the `OUTPUT` clause combines an `UPDATE` and `SELECT` into a single operation. We can use it to combine steps two and three into one query. Next, the CTE combines the `SELECT` statement, which identifies the next message, and the `UPDATE` statement into a single operation. The CTE acquires an update lock which precludes any other update locks on the same record. No other transaction can grab that record while the update is in progress. Finally, the `ROWLOCK` and `READPAST` hints are crucial for preventing blocking from multiple consumers.\\n\\nWith this approach, three queries are combined into one efficient non-blocking query. Also, note the `TOP` and `ORDER BY` clauses to ensure one message is returned in the right order. Interestingly, this query could be updated to sort in decending order for a stack implementation. Check out [Using Tables as Queues](http://rusanu.com/2010/03/26/using-tables-as-queues/) for a more in depth discussion of how these pieces all come together.\\n\\nOnce a consumer has handled the message, it can invoke the following stored procedure to remove its corresponding record from the table.\\n\\n```\\nCREATE PROCEDURE CompleteMessage\\n\\t@id INT\\nAS\\nBEGIN\\n\\tDELETE FROM [Queue] WHERE [Status] = 2 AND [Id] = @id\\nEND\\n```\\n\\nThat completes the implementation. I've used this successfully in production systems with no issues. Again, I recommend a more robust broker like RabbitMQ, but a table as a queue will work in a pinch.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Any sufficiently large enterprise software application is going to need a queue at some point. A queue is a good way to introduce an asynchronous process and decouple two parts of a system. For example, a user could upload a large file to a web application for processing, and instead of making the user wait for the work to complete, the application could queue up the work and return immediately. Later, when the results are ready, the user could be notified.</p>\n<p>The best way to do this is to introduce a message broker like <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a>. With RabbitMQ, not only do you get simple queues with a single subscriber, but you can set up exchanges with multiple subscribers. But taking the leap with an enterprise message broker may be a step too far. Sometimes all you need is a simple queue without the overhead of introducing new middleware.</p>\n<p>You can do this with a SQL Server table acting as a queue. It's not sexy, but it gets the job done.</p>\n<h2 id=\"atableasaqueue\">A Table as a Queue</h2>\n<p>Implementing a queue backed by a table seems simple enough but can be surpisingly difficult in practice. The solution is strightforward if there is only one process dequeuing work. As soon as concurrency is introduced with multiple processes, excessive blocking and deadlocks will cause problems if the queries are not structured correctly.</p>\n<p>The following table structure could be used for a simple message queue.</p>\n<pre><code>CREATE TABLE [Queue]\n(\n\t[Id] INT IDENTITY(1,1) NOT NULL,\n\t[Status] TINYINT NOT NULL, /* 1 - READY, 2 - IN PROGRESS */\n\t[Message] VARBINARY(MAX)\n)\n</code></pre>\n<p>Notice the <code>Status</code> column with values of 1 (READY) and 2 (IN PROGRESS). When a message is dequeued, the status is set to 2 while it is being processed. Eventually message handling completes, and the record is deleted.</p>\n<p>The stored procedure to enqueue a message is straightforward.</p>\n<pre><code>CREATE PROCEDURE EnqueueMessage\n\t@message VARBINARY(MAX)\nAS\nBEGIN\n\tINSERT INTO [Queue] ([Status], [Message])\n\tVALUES (1, @message)\nEND\n</code></pre>\n<p>The proc for dequeuing a message is where things get interesting. You might be tempted to write a procedure that does the following.</p>\n<ol>\n<li>Select the next row.</li>\n<li>Update the selected row's status to 2.</li>\n<li>Return the Id and Message values.</li>\n</ol>\n<p>Implementing these steps as three separate DML statements introduces a race condition between steps one and two. Two transactions could select the same row at the same time (step 1) before either one updates it. Next, one transaction updates the row (step 2) while the other is blocked. Finally, the second transaction performs the same update and both return the same message to different consumers (step 3). This approach won't work in highly concurrent applications.</p>\n<h2 id=\"abetterwaytodequeue\">A Better Way to Dequeue</h2>\n<p>A better approach would combine all three steps into one DML statement. You can do this with the <code>OUTPUT</code> clause, a CTE, and the <code>ROWLOCK</code> and <code>READPAST</code> hints.</p>\n<pre><code>CREATE PROCEDURE DequeueMessage\nAS\nBEGIN\n\t;WITH NextMessage AS\n\t(\n\t\tSELECT TOP 1 *\n\t\tFROM [Queue] WITH (ROWLOCK READPAST)\n\t\tWHERE [Status] = 1\n\t\tORDER BY Id\n\t)\n\tUPDATE NextMessage\n\tSET [Status] = 2\n\tOUTPUT\n\t\tinserted.[Id],\n\t\tinserted.[Message]\nEND\n</code></pre>\n<p>Let's break this down starting with the <code>OUTPUT</code> clause. Introduced in SQL Server 2005, the <code>OUTPUT</code> clause combines an <code>UPDATE</code> and <code>SELECT</code> into a single operation. We can use it to combine steps two and three into one query. Next, the CTE combines the <code>SELECT</code> statement, which identifies the next message, and the <code>UPDATE</code> statement into a single operation. The CTE acquires an update lock which precludes any other update locks on the same record. No other transaction can grab that record while the update is in progress. Finally, the <code>ROWLOCK</code> and <code>READPAST</code> hints are crucial for preventing blocking from multiple consumers.</p>\n<p>With this approach, three queries are combined into one efficient non-blocking query. Also, note the <code>TOP</code> and <code>ORDER BY</code> clauses to ensure one message is returned in the right order. Interestingly, this query could be updated to sort in decending order for a stack implementation. Check out <a href=\"http://rusanu.com/2010/03/26/using-tables-as-queues/\">Using Tables as Queues</a> for a more in depth discussion of how these pieces all come together.</p>\n<p>Once a consumer has handled the message, it can invoke the following stored procedure to remove its corresponding record from the table.</p>\n<pre><code>CREATE PROCEDURE CompleteMessage\n\t@id INT\nAS\nBEGIN\n\tDELETE FROM [Queue] WHERE [Status] = 2 AND [Id] = @id\nEND\n</code></pre>\n<p>That completes the implementation. I've used this successfully in production systems with no issues. Again, I recommend a more robust broker like RabbitMQ, but a table as a queue will work in a pinch.</p>\n</div>","amp":null,"plaintext":"Any sufficiently large enterprise software application is going to need a queue\nat some point. A queue is a good way to introduce an asynchronous process and\ndecouple two parts of a system. For example, a user could upload a large file to\na web application for processing, and instead of making the user wait for the\nwork to complete, the application could queue up the work and return\nimmediately. Later, when the results are ready, the user could be notified.\n\nThe best way to do this is to introduce a message broker like RabbitMQ\n[https://www.rabbitmq.com/]. With RabbitMQ, not only do you get simple queues\nwith a single subscriber, but you can set up exchanges with multiple\nsubscribers. But taking the leap with an enterprise message broker may be a step\ntoo far. Sometimes all you need is a simple queue without the overhead of\nintroducing new middleware.\n\nYou can do this with a SQL Server table acting as a queue. It's not sexy, but it\ngets the job done.\n\nA Table as a Queue\nImplementing a queue backed by a table seems simple enough but can be\nsurpisingly difficult in practice. The solution is strightforward if there is\nonly one process dequeuing work. As soon as concurrency is introduced with\nmultiple processes, excessive blocking and deadlocks will cause problems if the\nqueries are not structured correctly.\n\nThe following table structure could be used for a simple message queue.\n\nCREATE TABLE [Queue]\n(\n\t[Id] INT IDENTITY(1,1) NOT NULL,\n\t[Status] TINYINT NOT NULL, /* 1 - READY, 2 - IN PROGRESS */\n\t[Message] VARBINARY(MAX)\n)\n\n\nNotice the Status  column with values of 1 (READY) and 2 (IN PROGRESS). When a\nmessage is dequeued, the status is set to 2 while it is being processed.\nEventually message handling completes, and the record is deleted.\n\nThe stored procedure to enqueue a message is straightforward.\n\nCREATE PROCEDURE EnqueueMessage\n\t@message VARBINARY(MAX)\nAS\nBEGIN\n\tINSERT INTO [Queue] ([Status], [Message])\n\tVALUES (1, @message)\nEND\n\n\nThe proc for dequeuing a message is where things get interesting. You might be\ntempted to write a procedure that does the following.\n\n 1. Select the next row.\n 2. Update the selected row's status to 2.\n 3. Return the Id and Message values.\n\nImplementing these steps as three separate DML statements introduces a race\ncondition between steps one and two. Two transactions could select the same row\nat the same time (step 1) before either one updates it. Next, one transaction\nupdates the row (step 2) while the other is blocked. Finally, the second\ntransaction performs the same update and both return the same message to\ndifferent consumers (step 3). This approach won't work in highly concurrent\napplications.\n\nA Better Way to Dequeue\nA better approach would combine all three steps into one DML statement. You can\ndo this with the OUTPUT  clause, a CTE, and the ROWLOCK  and READPAST  hints.\n\nCREATE PROCEDURE DequeueMessage\nAS\nBEGIN\n\t;WITH NextMessage AS\n\t(\n\t\tSELECT TOP 1 *\n\t\tFROM [Queue] WITH (ROWLOCK READPAST)\n\t\tWHERE [Status] = 1\n\t\tORDER BY Id\n\t)\n\tUPDATE NextMessage\n\tSET [Status] = 2\n\tOUTPUT\n\t\tinserted.[Id],\n\t\tinserted.[Message]\nEND\n\n\nLet's break this down starting with the OUTPUT  clause. Introduced in SQL Server\n2005, the OUTPUT  clause combines an UPDATE  and SELECT  into a single\noperation. We can use it to combine steps two and three into one query. Next,\nthe CTE combines the SELECT  statement, which identifies the next message, and\nthe UPDATE  statement into a single operation. The CTE acquires an update lock\nwhich precludes any other update locks on the same record. No other transaction\ncan grab that record while the update is in progress. Finally, the ROWLOCK  and \nREADPAST  hints are crucial for preventing blocking from multiple consumers.\n\nWith this approach, three queries are combined into one efficient non-blocking\nquery. Also, note the TOP  and ORDER BY  clauses to ensure one message is\nreturned in the right order. Interestingly, this query could be updated to sort\nin decending order for a stack implementation. Check out Using Tables as Queues\n[http://rusanu.com/2010/03/26/using-tables-as-queues/]  for a more in depth\ndiscussion of how these pieces all come together.\n\nOnce a consumer has handled the message, it can invoke the following stored\nprocedure to remove its corresponding record from the table.\n\nCREATE PROCEDURE CompleteMessage\n\t@id INT\nAS\nBEGIN\n\tDELETE FROM [Queue] WHERE [Status] = 2 AND [Id] = @id\nEND\n\n\nThat completes the implementation. I've used this successfully in production\nsystems with no issues. Again, I recommend a more robust broker like RabbitMQ,\nbut a table as a queue will work in a pinch.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-01-06T18:33:03.000Z","created_by":"1","updated_at":"2019-01-10T14:29:33.000Z","updated_by":"1","published_at":"2019-01-10T14:29:33.000Z","published_by":"1","custom_excerpt":"Building a queue backed by a SQL Server table can be tricky in highly concurrent systems. In this post, I explain how to dequeue records safely without blocking or deadlocks.","codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5c324a12d2773a00bf34871e","uuid":"295c1d8b-f6bd-42ca-b3dd-a63042239cdd","title":"Analyzing and Fixing a DELETE Deadlock","slug":"tsql-deadlock-post-mortem","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"></div>","amp":null,"plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-01-06T18:33:54.000Z","created_by":"1","updated_at":"2019-01-09T14:11:20.000Z","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null},{"id":"5c4498fbd2773a00bf34872e","uuid":"91d0d631-4a15-4d75-9bde-4e0b378f33a3","title":"Is Perfect Agile Really Better?","slug":"untitled-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Waterfall -> Agile - huge improvement\\nFlawed Agile -> Perfect Agile - incremental improvement at best\\n\\nEstimates in hours/days versus points. Difficult to get an idea of what a story point is because teams change frequently.\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"><p>Waterfall -&gt; Agile - huge improvement<br>\nFlawed Agile -&gt; Perfect Agile - incremental improvement at best</p>\n<p>Estimates in hours/days versus points. Difficult to get an idea of what a story point is because teams change frequently.</p>\n</div>","amp":null,"plaintext":"Waterfall -> Agile - huge improvement\nFlawed Agile -> Perfect Agile - incremental improvement at best\n\nEstimates in hours/days versus points. Difficult to get an idea of what a story\npoint is because teams change frequently.","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2019-01-20T15:51:23.000Z","created_by":"1","updated_at":"2019-01-20T15:53:18.000Z","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null}],"posts_authors":[{"id":"5ac38093b65c8900181eabe8","post_id":"59ba7e6b0e5e5d0019f7b47f","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabe9","post_id":"59ba7e6b0e5e5d0019f7b480","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabea","post_id":"59ba7e6b0e5e5d0019f7b481","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabeb","post_id":"59ba7e6b0e5e5d0019f7b482","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabec","post_id":"59ba7e6b0e5e5d0019f7b483","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabed","post_id":"59ba7e6b0e5e5d0019f7b484","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabee","post_id":"59ba7e6b0e5e5d0019f7b485","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabef","post_id":"59ba7e6b0e5e5d0019f7b486","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf0","post_id":"59ba7e6b0e5e5d0019f7b487","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf1","post_id":"59ba7e6c0e5e5d0019f7b488","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf2","post_id":"59ba7e6c0e5e5d0019f7b489","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf3","post_id":"59ba7e6c0e5e5d0019f7b48a","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf4","post_id":"59ba7e6c0e5e5d0019f7b48b","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf5","post_id":"59ba7e6c0e5e5d0019f7b48c","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf6","post_id":"59ba7e6c0e5e5d0019f7b48d","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf7","post_id":"59ba7e6c0e5e5d0019f7b48e","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf8","post_id":"59ba7e6c0e5e5d0019f7b48f","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabf9","post_id":"59ba7e6c0e5e5d0019f7b490","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabfa","post_id":"59ba7e6c0e5e5d0019f7b491","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabfb","post_id":"59ba7e6c0e5e5d0019f7b492","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabfc","post_id":"59ba7e6c0e5e5d0019f7b493","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabfd","post_id":"59ba7e6c0e5e5d0019f7b494","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabfe","post_id":"59ba7e6c0e5e5d0019f7b495","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eabff","post_id":"59ba7e6c0e5e5d0019f7b496","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac00","post_id":"59ba7e6c0e5e5d0019f7b497","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac01","post_id":"59ba7e6c0e5e5d0019f7b498","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac02","post_id":"59ba7e6c0e5e5d0019f7b499","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac03","post_id":"59ba7e6c0e5e5d0019f7b49a","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac04","post_id":"59ba7e6c0e5e5d0019f7b49b","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac05","post_id":"59ba7e6c0e5e5d0019f7b49c","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac06","post_id":"59ba7e6c0e5e5d0019f7b49d","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac07","post_id":"59ba7e6c0e5e5d0019f7b49e","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac08","post_id":"59ba7e6c0e5e5d0019f7b49f","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac09","post_id":"59ba7e6c0e5e5d0019f7b4a0","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac0a","post_id":"59ba7e6c0e5e5d0019f7b4a1","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac0b","post_id":"59ba7e6c0e5e5d0019f7b4a2","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac0c","post_id":"59ba7e6c0e5e5d0019f7b4a3","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac0d","post_id":"59ba7e6c0e5e5d0019f7b4a4","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac0e","post_id":"59ba7e6c0e5e5d0019f7b4a5","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac0f","post_id":"59ba7e6c0e5e5d0019f7b4a6","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac10","post_id":"59ba7e6c0e5e5d0019f7b4a7","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac11","post_id":"59ba7e6c0e5e5d0019f7b4a8","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac12","post_id":"59ba7e6c0e5e5d0019f7b4a9","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac13","post_id":"59ba7e6c0e5e5d0019f7b4aa","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac14","post_id":"59ba7e6c0e5e5d0019f7b4ab","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac15","post_id":"59ba7e6c0e5e5d0019f7b4ac","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac16","post_id":"59ba7e6c0e5e5d0019f7b4ad","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac17","post_id":"59ba7e6c0e5e5d0019f7b4ae","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac18","post_id":"59ba7e6c0e5e5d0019f7b4af","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac19","post_id":"59ba7e6c0e5e5d0019f7b4b0","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac1a","post_id":"59ba7e6c0e5e5d0019f7b4b1","author_id":"1","sort_order":0},{"id":"5ac38093b65c8900181eac1b","post_id":"59ba7e6c0e5e5d0019f7b4b2","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac1d","post_id":"59ba7e6c0e5e5d0019f7b4b4","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac1e","post_id":"59ba7e6c0e5e5d0019f7b4b5","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac1f","post_id":"59ba7e6c0e5e5d0019f7b4b6","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac20","post_id":"59ba7e6c0e5e5d0019f7b4b7","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac21","post_id":"59ba7e6c0e5e5d0019f7b4b8","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac22","post_id":"59ba7e6c0e5e5d0019f7b4b9","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac23","post_id":"59ba7e6c0e5e5d0019f7b4ba","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac24","post_id":"59ba7e6c0e5e5d0019f7b4bb","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac25","post_id":"59ba7e6c0e5e5d0019f7b4bc","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac26","post_id":"59ba7e6c0e5e5d0019f7b4bd","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac27","post_id":"59ba7e6c0e5e5d0019f7b4be","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac28","post_id":"59e683b46eb54f00239ec0f8","author_id":"1","sort_order":0},{"id":"5ac38094b65c8900181eac2a","post_id":"5a2e87b22552670022da7f37","author_id":"1","sort_order":0},{"id":"5ac620fa8f12a6002205e0ba","post_id":"5ac620fa8f12a6002205e0b9","author_id":"1","sort_order":0},{"id":"5b37c68b9ed5f400bf7dab80","post_id":"5b37c68a9ed5f400bf7dab7f","author_id":"1","sort_order":0},{"id":"5b588fabd5070d00b4e095e7","post_id":"5b588fabd5070d00b4e095e6","author_id":"1","sort_order":0},{"id":"5b6063468f5ef600bf7e0646","post_id":"5b6063468f5ef600bf7e0645","author_id":"1","sort_order":0},{"id":"5b60e6908f5ef600bf7e064c","post_id":"5b60e6908f5ef600bf7e064b","author_id":"1","sort_order":0},{"id":"5b60ea3e8f5ef600bf7e064f","post_id":"5b60ea3e8f5ef600bf7e064e","author_id":"1","sort_order":0},{"id":"5b68ccac9ae64b00bf973c16","post_id":"5b68ccac9ae64b00bf973c15","author_id":"1","sort_order":0},{"id":"5b718bf6e5051800bf9faf9d","post_id":"5b718bf6e5051800bf9faf9c","author_id":"1","sort_order":0},{"id":"5b718c2ce5051800bf9faf9f","post_id":"5b718c2ce5051800bf9faf9e","author_id":"1","sort_order":0},{"id":"5c3249dfd2773a00bf34871d","post_id":"5c3249dfd2773a00bf34871c","author_id":"1","sort_order":0},{"id":"5c324a12d2773a00bf34871f","post_id":"5c324a12d2773a00bf34871e","author_id":"1","sort_order":0},{"id":"5c4498fbd2773a00bf34872f","post_id":"5c4498fbd2773a00bf34872e","author_id":"1","sort_order":0}],"posts_tags":[{"id":"59ba7e6e0e5e5d0019f7b4bf","post_id":"59ba7e6b0e5e5d0019f7b47f","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c0","post_id":"59ba7e6b0e5e5d0019f7b480","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c1","post_id":"59ba7e6b0e5e5d0019f7b481","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c2","post_id":"59ba7e6b0e5e5d0019f7b482","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c3","post_id":"59ba7e6b0e5e5d0019f7b483","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c4","post_id":"59ba7e6b0e5e5d0019f7b484","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c5","post_id":"59ba7e6b0e5e5d0019f7b485","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c6","post_id":"59ba7e6b0e5e5d0019f7b486","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c7","post_id":"59ba7e6b0e5e5d0019f7b487","tag_id":"59ba7e6b0e5e5d0019f7b44f","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c8","post_id":"59ba7e6c0e5e5d0019f7b488","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4c9","post_id":"59ba7e6c0e5e5d0019f7b489","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ca","post_id":"59ba7e6c0e5e5d0019f7b48a","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4cb","post_id":"59ba7e6c0e5e5d0019f7b48b","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4cc","post_id":"59ba7e6c0e5e5d0019f7b48c","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4cd","post_id":"59ba7e6c0e5e5d0019f7b48d","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ce","post_id":"59ba7e6c0e5e5d0019f7b48e","tag_id":"59ba7e6b0e5e5d0019f7b45a","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4cf","post_id":"59ba7e6c0e5e5d0019f7b48f","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d0","post_id":"59ba7e6c0e5e5d0019f7b490","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d1","post_id":"59ba7e6c0e5e5d0019f7b491","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d2","post_id":"59ba7e6c0e5e5d0019f7b492","tag_id":"59ba7e6b0e5e5d0019f7b45b","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d3","post_id":"59ba7e6c0e5e5d0019f7b493","tag_id":"59ba7e6b0e5e5d0019f7b45a","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d4","post_id":"59ba7e6c0e5e5d0019f7b494","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d5","post_id":"59ba7e6c0e5e5d0019f7b495","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d6","post_id":"59ba7e6c0e5e5d0019f7b496","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d7","post_id":"59ba7e6c0e5e5d0019f7b497","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d8","post_id":"59ba7e6c0e5e5d0019f7b498","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4d9","post_id":"59ba7e6c0e5e5d0019f7b499","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4da","post_id":"59ba7e6c0e5e5d0019f7b49a","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4db","post_id":"59ba7e6c0e5e5d0019f7b49c","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4dc","post_id":"59ba7e6c0e5e5d0019f7b49d","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4dd","post_id":"59ba7e6c0e5e5d0019f7b49e","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4de","post_id":"59ba7e6c0e5e5d0019f7b49f","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4df","post_id":"59ba7e6c0e5e5d0019f7b4a0","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e0","post_id":"59ba7e6c0e5e5d0019f7b4a1","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e1","post_id":"59ba7e6c0e5e5d0019f7b4a2","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e2","post_id":"59ba7e6c0e5e5d0019f7b4a3","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e3","post_id":"59ba7e6c0e5e5d0019f7b4a4","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e4","post_id":"59ba7e6c0e5e5d0019f7b4a5","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e5","post_id":"59ba7e6c0e5e5d0019f7b4a6","tag_id":"59ba7e6b0e5e5d0019f7b45b","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e6","post_id":"59ba7e6c0e5e5d0019f7b4a7","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e7","post_id":"59ba7e6c0e5e5d0019f7b4a8","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e8","post_id":"59ba7e6c0e5e5d0019f7b4a9","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4e9","post_id":"59ba7e6c0e5e5d0019f7b4aa","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ea","post_id":"59ba7e6c0e5e5d0019f7b4ab","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4eb","post_id":"59ba7e6c0e5e5d0019f7b4ad","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ec","post_id":"59ba7e6c0e5e5d0019f7b4ae","tag_id":"59ba7e6b0e5e5d0019f7b46b","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ed","post_id":"59ba7e6c0e5e5d0019f7b4af","tag_id":"59ba7e6b0e5e5d0019f7b46b","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ee","post_id":"59ba7e6c0e5e5d0019f7b4b0","tag_id":"59ba7e6b0e5e5d0019f7b46b","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4ef","post_id":"59ba7e6c0e5e5d0019f7b4b1","tag_id":"59ba7e6b0e5e5d0019f7b46b","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f0","post_id":"59ba7e6c0e5e5d0019f7b4b2","tag_id":"59ba7e6b0e5e5d0019f7b469","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f1","post_id":"59ba7e6c0e5e5d0019f7b4b4","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f2","post_id":"59ba7e6c0e5e5d0019f7b4b5","tag_id":"59ba7e6b0e5e5d0019f7b473","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f3","post_id":"59ba7e6c0e5e5d0019f7b4b6","tag_id":"59ba7e6b0e5e5d0019f7b473","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f4","post_id":"59ba7e6c0e5e5d0019f7b4b7","tag_id":"59ba7e6b0e5e5d0019f7b473","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f5","post_id":"59ba7e6c0e5e5d0019f7b4b8","tag_id":"59ba7e6b0e5e5d0019f7b473","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f6","post_id":"59ba7e6c0e5e5d0019f7b4b9","tag_id":"59ba7e6b0e5e5d0019f7b473","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f7","post_id":"59ba7e6c0e5e5d0019f7b4ba","tag_id":"59ba7e6b0e5e5d0019f7b478","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f8","post_id":"59ba7e6c0e5e5d0019f7b4bb","tag_id":"59ba7e6b0e5e5d0019f7b460","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4f9","post_id":"59ba7e6c0e5e5d0019f7b4bc","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4fa","post_id":"59ba7e6c0e5e5d0019f7b4bd","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4fb","post_id":"59ba7e6c0e5e5d0019f7b4be","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":0},{"id":"59ba7e6e0e5e5d0019f7b4fc","post_id":"59ba7e6b0e5e5d0019f7b47f","tag_id":"59ba7e6b0e5e5d0019f7b44f","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b4fd","post_id":"59ba7e6b0e5e5d0019f7b480","tag_id":"59ba7e6b0e5e5d0019f7b44f","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b4fe","post_id":"59ba7e6b0e5e5d0019f7b481","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b4ff","post_id":"59ba7e6b0e5e5d0019f7b482","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b500","post_id":"59ba7e6b0e5e5d0019f7b483","tag_id":"59ba7e6b0e5e5d0019f7b456","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b501","post_id":"59ba7e6b0e5e5d0019f7b484","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b502","post_id":"59ba7e6b0e5e5d0019f7b485","tag_id":"59ba7e6b0e5e5d0019f7b454","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b503","post_id":"59ba7e6b0e5e5d0019f7b486","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b504","post_id":"59ba7e6b0e5e5d0019f7b487","tag_id":"59ba7e6b0e5e5d0019f7b450","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b505","post_id":"59ba7e6c0e5e5d0019f7b489","tag_id":"59ba7e6b0e5e5d0019f7b44f","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b506","post_id":"59ba7e6c0e5e5d0019f7b48a","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b507","post_id":"59ba7e6c0e5e5d0019f7b48b","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b508","post_id":"59ba7e6c0e5e5d0019f7b48c","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b509","post_id":"59ba7e6c0e5e5d0019f7b48d","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b50a","post_id":"59ba7e6c0e5e5d0019f7b48f","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b50b","post_id":"59ba7e6c0e5e5d0019f7b490","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b50c","post_id":"59ba7e6c0e5e5d0019f7b491","tag_id":"59ba7e6b0e5e5d0019f7b462","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b50d","post_id":"59ba7e6c0e5e5d0019f7b492","tag_id":"59ba7e6b0e5e5d0019f7b45c","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b50e","post_id":"59ba7e6c0e5e5d0019f7b494","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b50f","post_id":"59ba7e6c0e5e5d0019f7b495","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b510","post_id":"59ba7e6c0e5e5d0019f7b496","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b511","post_id":"59ba7e6c0e5e5d0019f7b497","tag_id":"59ba7e6b0e5e5d0019f7b465","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b512","post_id":"59ba7e6c0e5e5d0019f7b498","tag_id":"59ba7e6b0e5e5d0019f7b460","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b513","post_id":"59ba7e6c0e5e5d0019f7b499","tag_id":"59ba7e6b0e5e5d0019f7b45e","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b514","post_id":"59ba7e6c0e5e5d0019f7b49a","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b515","post_id":"59ba7e6c0e5e5d0019f7b49d","tag_id":"59ba7e6b0e5e5d0019f7b463","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b516","post_id":"59ba7e6c0e5e5d0019f7b49e","tag_id":"59ba7e6b0e5e5d0019f7b465","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b517","post_id":"59ba7e6c0e5e5d0019f7b49f","tag_id":"59ba7e6b0e5e5d0019f7b465","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b518","post_id":"59ba7e6c0e5e5d0019f7b4a0","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b519","post_id":"59ba7e6c0e5e5d0019f7b4a1","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b51a","post_id":"59ba7e6c0e5e5d0019f7b4a2","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b51b","post_id":"59ba7e6c0e5e5d0019f7b4a3","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b51c","post_id":"59ba7e6c0e5e5d0019f7b4a4","tag_id":"59ba7e6b0e5e5d0019f7b465","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b51d","post_id":"59ba7e6c0e5e5d0019f7b4a5","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b51e","post_id":"59ba7e6c0e5e5d0019f7b4a7","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b51f","post_id":"59ba7e6c0e5e5d0019f7b4a8","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b520","post_id":"59ba7e6c0e5e5d0019f7b4a9","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b521","post_id":"59ba7e6c0e5e5d0019f7b4aa","tag_id":"59ba7e6b0e5e5d0019f7b46a","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b522","post_id":"59ba7e6c0e5e5d0019f7b4ad","tag_id":"59ba7e6b0e5e5d0019f7b46b","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b523","post_id":"59ba7e6c0e5e5d0019f7b4ae","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b524","post_id":"59ba7e6c0e5e5d0019f7b4af","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b525","post_id":"59ba7e6c0e5e5d0019f7b4b0","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b526","post_id":"59ba7e6c0e5e5d0019f7b4b1","tag_id":"59ba7e6b0e5e5d0019f7b476","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b527","post_id":"59ba7e6c0e5e5d0019f7b4b2","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b528","post_id":"59ba7e6c0e5e5d0019f7b4b4","tag_id":"59ba7e6b0e5e5d0019f7b46f","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b529","post_id":"59ba7e6c0e5e5d0019f7b4b5","tag_id":"59ba7e6b0e5e5d0019f7b474","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b52a","post_id":"59ba7e6c0e5e5d0019f7b4b6","tag_id":"59ba7e6b0e5e5d0019f7b474","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b52b","post_id":"59ba7e6c0e5e5d0019f7b4b7","tag_id":"59ba7e6b0e5e5d0019f7b474","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b52c","post_id":"59ba7e6c0e5e5d0019f7b4b8","tag_id":"59ba7e6b0e5e5d0019f7b474","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b52d","post_id":"59ba7e6c0e5e5d0019f7b4b9","tag_id":"59ba7e6b0e5e5d0019f7b474","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b52e","post_id":"59ba7e6c0e5e5d0019f7b4ba","tag_id":"59ba7e6b0e5e5d0019f7b479","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b52f","post_id":"59ba7e6c0e5e5d0019f7b4bb","tag_id":"59ba7e6b0e5e5d0019f7b47b","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b530","post_id":"59ba7e6c0e5e5d0019f7b4bc","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b531","post_id":"59ba7e6c0e5e5d0019f7b4bd","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b532","post_id":"59ba7e6c0e5e5d0019f7b4be","tag_id":"59ba7e6b0e5e5d0019f7b45d","sort_order":1},{"id":"59ba7e6e0e5e5d0019f7b533","post_id":"59ba7e6b0e5e5d0019f7b481","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":2},{"id":"59ba7e6e0e5e5d0019f7b534","post_id":"59ba7e6b0e5e5d0019f7b482","tag_id":"59ba7e6b0e5e5d0019f7b453","sort_order":2},{"id":"59ba7e6e0e5e5d0019f7b535","post_id":"59ba7e6b0e5e5d0019f7b485","tag_id":"59ba7e6b0e5e5d0019f7b459","sort_order":2},{"id":"59ba7e6e0e5e5d0019f7b536","post_id":"59ba7e6b0e5e5d0019f7b486","tag_id":"59ba7e6b0e5e5d0019f7b453","sort_order":2},{"id":"59ba7e6e0e5e5d0019f7b537","post_id":"59ba7e6b0e5e5d0019f7b487","tag_id":"59ba7e6b0e5e5d0019f7b451","sort_order":2},{"id":"59ba7e6e0e5e5d0019f7b538","post_id":"59ba7e6c0e5e5d0019f7b489","tag_id":"59ba7e6b0e5e5d0019f7b458","sort_order":2},{"id":"59ba7e6e0e5e5d0019f7b539","post_id":"59ba7e6c0e5e5d0019f7b48a","tag_id":"59ba7e6b0e5e5d0019f7b44f","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b53a","post_id":"59ba7e6c0e5e5d0019f7b497","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b53b","post_id":"59ba7e6c0e5e5d0019f7b49a","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b53c","post_id":"59ba7e6c0e5e5d0019f7b49d","tag_id":"59ba7e6b0e5e5d0019f7b464","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b53d","post_id":"59ba7e6c0e5e5d0019f7b49e","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b53e","post_id":"59ba7e6c0e5e5d0019f7b49f","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b53f","post_id":"59ba7e6c0e5e5d0019f7b4a0","tag_id":"59ba7e6b0e5e5d0019f7b44e","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b540","post_id":"59ba7e6c0e5e5d0019f7b4a1","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b541","post_id":"59ba7e6c0e5e5d0019f7b4a2","tag_id":"59ba7e6b0e5e5d0019f7b466","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b542","post_id":"59ba7e6c0e5e5d0019f7b4a4","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b543","post_id":"59ba7e6c0e5e5d0019f7b4a5","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b544","post_id":"59ba7e6c0e5e5d0019f7b4a7","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b545","post_id":"59ba7e6c0e5e5d0019f7b4a8","tag_id":"59ba7e6b0e5e5d0019f7b464","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b546","post_id":"59ba7e6c0e5e5d0019f7b4a9","tag_id":"59ba7e6b0e5e5d0019f7b46c","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b547","post_id":"59ba7e6c0e5e5d0019f7b4aa","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b548","post_id":"59ba7e6c0e5e5d0019f7b4b1","tag_id":"59ba7e6b0e5e5d0019f7b461","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b549","post_id":"59ba7e6c0e5e5d0019f7b4b2","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b54a","post_id":"59ba7e6c0e5e5d0019f7b4b4","tag_id":"59ba7e6b0e5e5d0019f7b470","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b54b","post_id":"59ba7e6c0e5e5d0019f7b4b5","tag_id":"59ba7e6b0e5e5d0019f7b477","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b54c","post_id":"59ba7e6c0e5e5d0019f7b4b6","tag_id":"59ba7e6b0e5e5d0019f7b477","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b54d","post_id":"59ba7e6c0e5e5d0019f7b4b7","tag_id":"59ba7e6b0e5e5d0019f7b477","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b54e","post_id":"59ba7e6c0e5e5d0019f7b4b8","tag_id":"59ba7e6b0e5e5d0019f7b477","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b54f","post_id":"59ba7e6c0e5e5d0019f7b4b9","tag_id":"59ba7e6b0e5e5d0019f7b477","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b550","post_id":"59ba7e6c0e5e5d0019f7b4ba","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b551","post_id":"59ba7e6c0e5e5d0019f7b4bd","tag_id":"59ba7e6b0e5e5d0019f7b47c","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b552","post_id":"59ba7e6c0e5e5d0019f7b4be","tag_id":"59ba7e6b0e5e5d0019f7b47d","sort_order":2},{"id":"59ba7e6f0e5e5d0019f7b553","post_id":"59ba7e6b0e5e5d0019f7b481","tag_id":"59ba7e6b0e5e5d0019f7b452","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b554","post_id":"59ba7e6b0e5e5d0019f7b482","tag_id":"59ba7e6b0e5e5d0019f7b454","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b555","post_id":"59ba7e6b0e5e5d0019f7b487","tag_id":"59ba7e6b0e5e5d0019f7b452","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b556","post_id":"59ba7e6c0e5e5d0019f7b49a","tag_id":"59ba7e6b0e5e5d0019f7b45f","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b557","post_id":"59ba7e6c0e5e5d0019f7b4a2","tag_id":"59ba7e6b0e5e5d0019f7b467","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b558","post_id":"59ba7e6c0e5e5d0019f7b4a8","tag_id":"59ba7e6b0e5e5d0019f7b468","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b559","post_id":"59ba7e6c0e5e5d0019f7b4a9","tag_id":"59ba7e6b0e5e5d0019f7b46d","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b55a","post_id":"59ba7e6c0e5e5d0019f7b4b2","tag_id":"59ba7e6b0e5e5d0019f7b463","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b55b","post_id":"59ba7e6c0e5e5d0019f7b4b4","tag_id":"59ba7e6b0e5e5d0019f7b471","sort_order":3},{"id":"59ba7e6f0e5e5d0019f7b55c","post_id":"59ba7e6b0e5e5d0019f7b481","tag_id":"59ba7e6b0e5e5d0019f7b455","sort_order":4},{"id":"59ba7e6f0e5e5d0019f7b55d","post_id":"59ba7e6c0e5e5d0019f7b4a8","tag_id":"59ba7e6b0e5e5d0019f7b469","sort_order":4},{"id":"59ba7e6f0e5e5d0019f7b55e","post_id":"59ba7e6c0e5e5d0019f7b4a9","tag_id":"59ba7e6b0e5e5d0019f7b46e","sort_order":4},{"id":"59ba7e6f0e5e5d0019f7b55f","post_id":"59ba7e6c0e5e5d0019f7b4b2","tag_id":"59ba7e6b0e5e5d0019f7b464","sort_order":4},{"id":"59ba7e6f0e5e5d0019f7b560","post_id":"59ba7e6c0e5e5d0019f7b4b4","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":4},{"id":"59ba7e6f0e5e5d0019f7b561","post_id":"59ba7e6c0e5e5d0019f7b4b4","tag_id":"59ba7e6b0e5e5d0019f7b47d","sort_order":5},{"id":"59e9faab25fe530023e33d25","post_id":"59e683b46eb54f00239ec0f8","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"59e9faab25fe530023e33d26","post_id":"59e683b46eb54f00239ec0f8","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"5a313be02552670022da7f39","post_id":"5a2e87b22552670022da7f37","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":0},{"id":"5a313be02552670022da7f3b","post_id":"5a2e87b22552670022da7f37","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":1},{"id":"5b6063fc8f5ef600bf7e0648","post_id":"5b6063468f5ef600bf7e0645","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b6063fc8f5ef600bf7e0649","post_id":"5b6063468f5ef600bf7e0645","tag_id":"5b6063fc8f5ef600bf7e0647","sort_order":1},{"id":"5b60e6b18f5ef600bf7e064d","post_id":"5b60e6908f5ef600bf7e064b","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b61b2008f5ef600bf7e0650","post_id":"5b60ea3e8f5ef600bf7e064e","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b61b2008f5ef600bf7e0651","post_id":"5b60ea3e8f5ef600bf7e064e","tag_id":"5b6063fc8f5ef600bf7e0647","sort_order":1},{"id":"5b68cced9ae64b00bf973c17","post_id":"5b68ccac9ae64b00bf973c15","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b68cced9ae64b00bf973c18","post_id":"5b68ccac9ae64b00bf973c15","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"5b68cd169ae64b00bf973c19","post_id":"5b37c68a9ed5f400bf7dab7f","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b68cd169ae64b00bf973c1a","post_id":"5b37c68a9ed5f400bf7dab7f","tag_id":"5b6063fc8f5ef600bf7e0647","sort_order":1},{"id":"5b68cd169ae64b00bf973c1b","post_id":"5b37c68a9ed5f400bf7dab7f","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":2},{"id":"5b68cd169ae64b00bf973c1c","post_id":"5b37c68a9ed5f400bf7dab7f","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":3},{"id":"5b68cd379ae64b00bf973c1d","post_id":"5b60e6908f5ef600bf7e064b","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"5b68cd379ae64b00bf973c1e","post_id":"5b60e6908f5ef600bf7e064b","tag_id":"5b6063fc8f5ef600bf7e0647","sort_order":2},{"id":"5b68cd379ae64b00bf973c1f","post_id":"5b60e6908f5ef600bf7e064b","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":3},{"id":"5b68cd699ae64b00bf973c20","post_id":"5b60ea3e8f5ef600bf7e064e","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":2},{"id":"5b68cd699ae64b00bf973c21","post_id":"5b60ea3e8f5ef600bf7e064e","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":3},{"id":"5b68cd8a9ae64b00bf973c22","post_id":"5b68ccac9ae64b00bf973c15","tag_id":"5b6063fc8f5ef600bf7e0647","sort_order":2},{"id":"5b68cd8a9ae64b00bf973c23","post_id":"5b68ccac9ae64b00bf973c15","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":3},{"id":"5b7dea81cbb88400bf6ba760","post_id":"5b718bf6e5051800bf9faf9c","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b7dea81cbb88400bf6ba761","post_id":"5b718bf6e5051800bf9faf9c","tag_id":"59ba7e6b0e5e5d0019f7b44d","sort_order":1},{"id":"5b7dea81cbb88400bf6ba762","post_id":"5b718bf6e5051800bf9faf9c","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":2},{"id":"5b888edecbb88400bf6ba766","post_id":"5b718c2ce5051800bf9faf9e","tag_id":"59ba7e6b0e5e5d0019f7b457","sort_order":0},{"id":"5b888edecbb88400bf6ba767","post_id":"5b718c2ce5051800bf9faf9e","tag_id":"59ba7e6b0e5e5d0019f7b44c","sort_order":1},{"id":"5bb13474cbb88400bf6ba76c","post_id":"5ac620fa8f12a6002205e0b9","tag_id":"59ba7e6b0e5e5d0019f7b47a","sort_order":0},{"id":"5bb13474cbb88400bf6ba76d","post_id":"5ac620fa8f12a6002205e0b9","tag_id":"5bb13474cbb88400bf6ba76a","sort_order":1},{"id":"5bb13474cbb88400bf6ba76e","post_id":"5ac620fa8f12a6002205e0b9","tag_id":"5bb13474cbb88400bf6ba76b","sort_order":2},{"id":"5c375669d2773a00bf348725","post_id":"5c3249dfd2773a00bf34871c","tag_id":"5c375669d2773a00bf348724","sort_order":0},{"id":"5c375669d2773a00bf348726","post_id":"5c3249dfd2773a00bf34871c","tag_id":"59ba7e6b0e5e5d0019f7b460","sort_order":1},{"id":"5c375669d2773a00bf348727","post_id":"5c3249dfd2773a00bf34871c","tag_id":"59ba7e6b0e5e5d0019f7b47b","sort_order":2}],"roles":[{"id":"59ba7e680e5e5d0019f7b38d","name":"Administrator","description":"Administrators","created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b38e","name":"Editor","description":"Editors","created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b38f","name":"Author","description":"Authors","created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e680e5e5d0019f7b390","name":"Owner","description":"Blog Owner","created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"5a7b50c4702bdc001860f7b1","name":"Contributor","description":"Contributors","created_at":"2018-02-07T19:17:24.000Z","created_by":"1","updated_at":"2018-02-07T19:17:24.000Z","updated_by":"1"}],"roles_users":[{"id":"59ba7e690e5e5d0019f7b3c2","role_id":"59ba7e680e5e5d0019f7b38f","user_id":"5951f5fca366002ebd5dbef7"},{"id":"59ba7e6a0e5e5d0019f7b42c","role_id":"59ba7e680e5e5d0019f7b390","user_id":"1"}],"settings":[{"id":"59ba7e6a0e5e5d0019f7b42d","key":"db_hash","value":"2f70938c-7b3e-4ad8-97e1-21df2999588e","type":"core","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-09-14T13:04:42.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b42e","key":"next_update_check","value":"1578952743","type":"core","created_at":"2017-09-14T16:04:42.000Z","created_by":"1","updated_at":"2020-01-12T21:59:03.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b431","key":"title","value":"Joe Buschmann","type":"blog","created_at":"2013-12-25T20:24:32.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b432","key":"description","value":"let topics = [<a href=\"/tag/c/\">csharp</a>; <a href=\"/tag/specflow/\">specflow</a>; <a href=\"/tag/fun/\">fun</a>]","type":"blog","created_at":"2013-12-25T20:24:32.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b433","key":"logo","value":"","type":"blog","created_at":"2013-12-25T20:24:32.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b434","key":"cover_image","value":"","type":"blog","created_at":"2013-12-25T20:24:32.000Z","created_by":"1","updated_at":"2019-01-02T23:58:17.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b435","key":"icon","value":"","type":"blog","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-09-14T13:04:42.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b436","key":"default_locale","value":"en","type":"blog","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-09-14T13:04:42.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b437","key":"active_timezone","value":"America/Chicago","type":"blog","created_at":"2016-07-27T13:07:54.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b438","key":"force_i18n","value":"true","type":"blog","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-09-14T13:04:42.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b439","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2014-01-16T07:43:08.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b43a","key":"amp","value":"true","type":"blog","created_at":"2017-01-12T18:13:19.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b43b","key":"ghost_head","value":"","type":"blog","created_at":"2014-12-05T12:49:32.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b43c","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>","type":"blog","created_at":"2014-12-05T12:49:32.000Z","created_by":"1","updated_at":"2019-01-03T14:15:38.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b43d","key":"facebook","value":"joe.buschmann","type":"blog","created_at":"2016-05-18T11:39:22.000Z","created_by":"1","updated_at":"2019-01-02T23:59:24.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b43e","key":"twitter","value":"@joebuschmann","type":"blog","created_at":"2016-05-18T11:39:22.000Z","created_by":"1","updated_at":"2019-01-02T23:59:24.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b43f","key":"labs","value":"{\"codeInjectionUI\":false,\"publicAPI\":true}","type":"blog","created_at":"2015-01-12T20:29:46.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b440","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"}]","type":"blog","created_at":"2015-02-28T21:26:36.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b441","key":"slack","value":"[]","type":"blog","created_at":"2016-05-18T11:39:22.000Z","created_by":"1","updated_at":"2019-01-02T23:58:17.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b442","key":"unsplash","value":"{\"isActive\":true}","type":"blog","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2019-01-02T23:58:17.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b443","key":"active_theme","value":"joebuschmann.com","type":"theme","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-09-14T13:04:57.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b444","key":"active_apps","value":"[]","type":"app","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-09-14T13:04:42.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b445","key":"installed_apps","value":"[]","type":"app","created_at":"2017-09-14T13:04:42.000Z","created_by":"1","updated_at":"2017-10-31T16:23:22.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b446","key":"is_private","value":"false","type":"private","created_at":"2015-05-14T15:40:21.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59ba7e6a0e5e5d0019f7b447","key":"password","value":"","type":"private","created_at":"2015-05-14T15:40:21.000Z","created_by":"1","updated_at":"2017-09-14T13:04:47.000Z","updated_by":"1"},{"id":"59db8b509e4e07002eced0bf","key":"public_hash","value":"95a02e4047cef58a4bddc382e3bd11","type":"private","created_at":"2017-10-09T14:44:32.000Z","created_by":"1","updated_at":"2017-10-09T14:44:32.000Z","updated_by":"1"},{"id":"5a5759db9f44420022ba83f1","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"045f7e0c-5305-44bf-8b32-6f955d461212\",\"custom\":true,\"createdAt\":\"2018-08-21T19:05:35.000Z\",\"type\":\"info\",\"top\":true,\"message\":\"<strong>Ghost 2.0 is now available</strong> - This is a major update which requires a manual upgrade. <a href=\\\"https://my.ghost.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">Click here</a> to get started!\",\"seen\":true,\"addedAt\":\"2018-10-20T19:25:51.062Z\"}]","type":"core","created_at":"2018-01-11T12:34:35.000Z","created_by":"1","updated_at":"2019-01-06T18:34:54.000Z","updated_by":"1"}],"subscribers":[],"tags":[{"id":"59ba7e680e5e5d0019f7b388","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-09-14T13:04:40.000Z","created_by":"1","updated_at":"2017-09-14T13:04:40.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b44c","name":".NET","slug":"net","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:10:41.000Z","created_by":"1","updated_at":"2017-12-14T23:06:59.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b44d","name":"C#","slug":"c","description":"C# Programming Language","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2017-12-14T23:06:59.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b44e","name":"best practices","slug":"best-practices-2","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b44f","name":"F#","slug":"f","description":"F# Programming Language","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b450","name":"mocks","slug":"mocks","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b451","name":"object expressions","slug":"object-expressions","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b452","name":"unit testing","slug":"unit-testing","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b453","name":"WinForms","slug":"winforms","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b454","name":"WPF","slug":"wpf","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b455","name":"patterns","slug":"patterns","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b456","name":"singleton","slug":"singleton","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b457","name":"SpecFlow","slug":"specflow","description":"Look here for all posts related to SpecFlow best practices. SpecFlow is a Visual Studio extension that allows you to automate Gherkin scenarios by binding them to .NET code.","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2016-10-25T14:38:50.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b458","name":"text parsing","slug":"text-parsing","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b459","name":"XAML","slug":"xaml","description":"","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-25T21:37:45.000Z","created_by":"1","updated_at":"2013-12-25T21:37:45.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b45a","name":"ghost","slug":"ghost-post","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2013-12-29T22:28:49.000Z","created_by":"1","updated_at":"2013-12-29T22:28:49.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b45b","name":"IIS","slug":"iis","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-06-02T13:57:58.000Z","created_by":"1","updated_at":"2014-06-02T13:57:58.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b45c","name":"appcmd","slug":"appcmd","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-06-02T13:57:58.000Z","created_by":"1","updated_at":"2014-06-02T13:57:58.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b45d","name":"fun","slug":"fun","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-10-22T12:20:30.000Z","created_by":"1","updated_at":"2014-10-22T12:20:30.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b45e","name":"automation","slug":"automation","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-12-15T17:47:26.000Z","created_by":"1","updated_at":"2014-12-15T17:47:26.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b45f","name":"code this not that","slug":"code-this-not-that","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2014-12-23T01:33:17.000Z","created_by":"1","updated_at":"2014-12-23T01:33:17.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b460","name":"SQL","slug":"sql","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-01-05T20:41:18.000Z","created_by":"1","updated_at":"2015-01-05T20:41:18.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b461","name":"JavaScript","slug":"javascript","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-01-05T20:43:00.000Z","created_by":"1","updated_at":"2016-05-16T13:16:00.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b462","name":"fit.js","slug":"fit-js","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-01-05T20:43:00.000Z","created_by":"1","updated_at":"2015-01-05T20:43:00.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b463","name":"await","slug":"await","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-03-23T22:51:51.000Z","created_by":"1","updated_at":"2015-03-23T22:51:51.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b464","name":"async","slug":"async","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-03-23T22:51:51.000Z","created_by":"1","updated_at":"2015-03-23T22:51:51.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b465","name":"Frank Drebin","slug":"frank-drebin","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-06-19T01:37:03.000Z","created_by":"1","updated_at":"2015-06-19T01:37:03.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b466","name":"Nancy","slug":"nancy","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-08-13T14:20:47.000Z","created_by":"1","updated_at":"2015-08-13T14:20:47.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b467","name":"Knockout.js","slug":"knockout-js","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-08-13T14:20:47.000Z","created_by":"1","updated_at":"2015-08-13T14:20:47.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b468","name":"parallel","slug":"parallel","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-11-23T14:37:33.000Z","created_by":"1","updated_at":"2015-11-23T14:37:33.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b469","name":"Task","slug":"task","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-12-09T22:02:59.000Z","created_by":"1","updated_at":"2015-12-09T22:02:59.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b46a","name":"transportation","slug":"transportation","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2015-12-28T15:32:26.000Z","created_by":"1","updated_at":"2015-12-28T15:32:26.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b46b","name":"react","slug":"react","description":"A list of all things related to the React JS web UI framework.","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-02-16T15:21:11.000Z","created_by":"1","updated_at":"2016-10-25T14:28:22.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b46c","name":"OSX","slug":"osx","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-07-08T00:42:38.000Z","created_by":"1","updated_at":"2016-07-08T00:42:38.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b46d","name":"Firefox","slug":"firefox","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-07-08T00:42:38.000Z","created_by":"1","updated_at":"2016-07-08T00:42:38.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b46e","name":"Chrome","slug":"chrome","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-07-08T00:42:38.000Z","created_by":"1","updated_at":"2016-07-08T00:42:38.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b46f","name":"exercise","slug":"exercise","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-08-30T03:04:48.000Z","created_by":"1","updated_at":"2016-08-30T03:04:48.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b470","name":"workout","slug":"workout","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-08-30T03:04:48.000Z","created_by":"1","updated_at":"2016-08-30T03:04:48.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b471","name":"physical fitness","slug":"physical-fitness","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-08-31T13:05:12.000Z","created_by":"1","updated_at":"2016-08-31T13:05:12.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b472","name":"steve jobs","slug":"steve-jobs","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-09-28T13:01:36.000Z","created_by":"1","updated_at":"2016-09-28T13:01:36.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b473","name":"salesforce","slug":"salesforce","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-10-24T16:29:38.000Z","created_by":"1","updated_at":"2016-10-24T16:29:38.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b474","name":"lightning component","slug":"lightning-component","description":"All posts related to Salesforce's new Lightning Component framework. The Lightning framework is a web UI framework for building Salesforce apps.","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-10-24T16:29:38.000Z","created_by":"1","updated_at":"2016-10-25T14:34:15.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b475","name":"aura","slug":"aura","description":"Aura is an open-source web framework that drives Salesforce's new Lightning Component framework.","feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-10-24T16:29:38.000Z","created_by":"1","updated_at":"2016-10-25T14:29:11.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b476","name":"jsx","slug":"jsx","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2016-10-25T14:24:35.000Z","created_by":"1","updated_at":"2016-10-25T14:24:35.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b477","name":"lightning","slug":"lightning","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-01-12T14:45:12.000Z","created_by":"1","updated_at":"2017-01-12T14:45:12.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b478","name":"sociopath","slug":"sociopath","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-08T19:10:33.000Z","created_by":"1","updated_at":"2017-02-08T19:10:33.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b479","name":"donald trump","slug":"donald-trump","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-08T19:31:32.000Z","created_by":"1","updated_at":"2017-02-08T19:31:32.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b47a","name":"off-topic","slug":"off-topic","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-08T20:32:20.000Z","created_by":"1","updated_at":"2017-02-08T20:32:20.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b47b","name":"sql server","slug":"sql-server","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-02-23T14:16:05.000Z","created_by":"1","updated_at":"2017-02-23T14:16:05.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b47c","name":"Selenium","slug":"selenium","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-05-10T13:14:46.000Z","created_by":"1","updated_at":"2017-05-10T13:14:46.000Z","updated_by":"1"},{"id":"59ba7e6b0e5e5d0019f7b47d","name":"self-improvement","slug":"self-improvement","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2017-05-30T20:30:04.000Z","created_by":"1","updated_at":"2017-05-30T20:30:04.000Z","updated_by":"1"},{"id":"5b6063fc8f5ef600bf7e0647","name":"gherkin","slug":"gherkin","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-07-31T13:28:28.000Z","created_by":"1","updated_at":"2018-07-31T13:28:28.000Z","updated_by":"1"},{"id":"5bb13474cbb88400bf6ba76a","name":"guns","slug":"guns","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-09-30T20:39:16.000Z","created_by":"1","updated_at":"2018-09-30T20:39:16.000Z","updated_by":"1"},{"id":"5bb13474cbb88400bf6ba76b","name":"atomic accidents","slug":"atomic-accidents","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-09-30T20:39:16.000Z","created_by":"1","updated_at":"2018-09-30T20:39:16.000Z","updated_by":"1"},{"id":"5c375669d2773a00bf348724","name":"TSQL","slug":"tsql","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2019-01-10T14:27:53.000Z","created_by":"1","updated_at":"2019-01-10T14:27:53.000Z","updated_by":"1"}],"users":[{"id":"1","name":"Joe Buschmann","slug":"josephbuschmann","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$1PTM3zaoXH2oeCbA93.bNuLpUv0OGqc6LAw320i2Cu1k96X8TeQhO","email":"joseph.buschmann@outlook.com","profile_image":"/content/images/2017/09/profile-pic.jpg","cover_image":null,"bio":"I'm a software developer living and working in Chicago. My primary platform is C# and .NET on Windows. For more information, please visit <a social-link=\"about\">my about page</a>.","website":"","location":"Chicago, Illinois","facebook":null,"twitter":null,"accessibility":"{\"nightShift\":false}","status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"getting-started\",\"using-the-editor\",\"upload-a-theme\"]","last_seen":"2020-01-12T21:59:09.000Z","created_at":"2013-12-25T20:25:27.000Z","created_by":"1","updated_at":"2020-01-12T21:59:09.000Z","updated_by":"1"}],"webhooks":[]}}]}