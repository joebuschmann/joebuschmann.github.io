<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>best-practices-2 on Joe Buschmann</title>
    <link>/tags/best-practices-2/</link>
    <description>Recent content in best-practices-2 on Joe Buschmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Joe Buschmann 2020</copyright>
    <lastBuildDate>Thu, 06 Aug 2015 15:22:10 +0000</lastBuildDate>
    
	<atom:link href="/tags/best-practices-2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>String.Empty Versus &#34;&#34;</title>
      <link>/posts/2015-08-06-string-dot-empty-versus-string-literal/</link>
      <pubDate>Thu, 06 Aug 2015 15:22:10 +0000</pubDate>
      
      <guid>/posts/2015-08-06-string-dot-empty-versus-string-literal/</guid>
      <description>If you&#39;ve been in the .NET world for any length of time, you&#39;ll eventually come across someone who claims String.Empty performs better than &amp;quot;&amp;quot;. I was always skeptical of this claim because this scenario seemed like something the compiler could optimize. And because the .NET runtime manages string literals in an intern pool, my guess was they would both point to the same value. That&#39;s what I suspected anyway but didn&#39;t have any proof.</description>
    </item>
    
    <item>
      <title>A Shared Development Database is Bad...Very Bad</title>
      <link>/posts/2015-02-17-a-shared-development-database-is-bad-very-bad/</link>
      <pubDate>Tue, 17 Feb 2015 23:52:12 +0000</pubDate>
      
      <guid>/posts/2015-02-17-a-shared-development-database-is-bad-very-bad/</guid>
      <description>The software development group at my office has a shared database that developers connect to for their daily work. In the last few months, the number of developers has doubled, and the practice of using the shared database has not scaled well. It has caused frustration as members of one team make schema changes before another team can consume them. The resulting breakages has led to lost productivity. To make matters worse, the same database serves as a reference for the daily migration process.</description>
    </item>
    
    <item>
      <title>Code This, Not That - SpecFlow Edition</title>
      <link>/posts/2014-12-29-code-this-not-that-specflow-edition/</link>
      <pubDate>Mon, 29 Dec 2014 20:06:20 +0000</pubDate>
      
      <guid>/posts/2014-12-29-code-this-not-that-specflow-edition/</guid>
      <description>In 2007 a different kind of diet book was published that took a concise approach to making the right food choices. Readers of the book were presented with good and bad selections at popular restaurants and told why the good options were better than the others. Eat This, Not That! made changing your diet simple and realistic. No gimmicks like the Atkins diet or the current trend of cleansing. Just real options available in many restaurants.</description>
    </item>
    
    <item>
      <title>Lessons from 2014</title>
      <link>/posts/2014-12-21-lessons-from-2014/</link>
      <pubDate>Sun, 21 Dec 2014 15:18:03 +0000</pubDate>
      
      <guid>/posts/2014-12-21-lessons-from-2014/</guid>
      <description>2014 has been a fantastic year for me professionally. I spent the majority of the year working on a green field project with a great group of co-workers. I was the Scrummaster for a talented team and wrote a lot of Angular.js and Javascript. Ultimately the project was cancelled, and its members were merged into another group. While disappointing, it led me to a new opportunity as a Product Owner and lead architect for a team tasked with creating a test framework built on Specflow.</description>
    </item>
    
    <item>
      <title>Overusing Generics in .NET</title>
      <link>/posts/2014-10-10-overusing-generics-in-dot-net/</link>
      <pubDate>Fri, 10 Oct 2014 12:31:09 +0000</pubDate>
      
      <guid>/posts/2014-10-10-overusing-generics-in-dot-net/</guid>
      <description>Generic types were a great addition to C# 2.0, but they are occasionally overused. There are times where calling object.GetType() or passing the type as an argument are sufficient.
A good example can be found in the Specflow source code. The TechTalk.SpecFlow.Assist.InstanceComparisonExtensionMethods class contains a useful extension method CompareToInstance&amp;lt;T&amp;gt;() which takes a table of expected property values and compares them against an object.
The generic type is completely unnecessary in this case.</description>
    </item>
    
    <item>
      <title>Lessons from the Past Year</title>
      <link>/posts/2012-12-31-lessons-from-the-past-year/</link>
      <pubDate>Mon, 31 Dec 2012 14:54:43 +0000</pubDate>
      
      <guid>/posts/2012-12-31-lessons-from-the-past-year/</guid>
      <description>As 2012 comes to a close, it&#39;s time to look back on some of the things I&#39;ve learned. During the past year, my focus has been on enterprise service development, and thanks to a talented software architect and co-worker Kelly Brownsberger, I feel much more confident with my development skills. Together we focused on re-architecting and refactoring large portions of an ordering service. Now, looking back, three lessons in particular have stuck with me and changed the way I develop software.</description>
    </item>
    
    <item>
      <title>Ditch the Grids and Use DockPanels</title>
      <link>/posts/2012-03-12-why-arent-dock-panels-used-more/</link>
      <pubDate>Mon, 12 Mar 2012 19:58:25 +0000</pubDate>
      
      <guid>/posts/2012-03-12-why-arent-dock-panels-used-more/</guid>
      <description>I have worked extensively with WinForms and WPF/Silverlight and noticed that docking/dock panels are not used that often.&amp;#160; At least this is the case where I work.&amp;#160; I find this surprising given their power and ease of use.
Using XAML, why would a programmer choose a complex Grid/StackPanel setup over a DockPanel?&amp;#160; Or on the WinForms side, set the anchor properties for control rather than simplify things with the dock property?</description>
    </item>
    
    <item>
      <title>Executing Actions Before and After Code Blocks with IDisposable</title>
      <link>/posts/2012-02-14-executing-actions-before-and-after-code-blocks-with-idisposable/</link>
      <pubDate>Tue, 14 Feb 2012 21:06:32 +0000</pubDate>
      
      <guid>/posts/2012-02-14-executing-actions-before-and-after-code-blocks-with-idisposable/</guid>
      <description>I ran into a scenario this week where a boolean field was being flipped temporarily to modify behavior elsewhere while a block of code was executing.&amp;nbsp; I have seen this pattern mainly in WinForms applications where data are being loaded into controls, but their events need to be suppressed during the load.&amp;nbsp; Afterward, the events should fire normally.
Below is an example of this scenario.&amp;nbsp; It is a Windows form with a single combobox.</description>
    </item>
    
    <item>
      <title>The Best Design Patterns</title>
      <link>/posts/2012-01-30-the-best-design-patterns/</link>
      <pubDate>Mon, 30 Jan 2012 20:38:44 +0000</pubDate>
      
      <guid>/posts/2012-01-30-the-best-design-patterns/</guid>
      <description>The first time I read the Gang of Four Design Patterns book, I was impressed, no blown away, by the brilliance of what I was reading. The Visitor pattern utilizing double-dispatch. Brilliant. Chain of Responsibility. Why didn&#39;t I think of that? Adapter. Simple and powerful.
Of course I was itching to start implementing these patterns. In practice though they seemed to be applicable only in rare situations. Adapter, Builder, Factory, Strategy, were the most useful.</description>
    </item>
    
  </channel>
</rss>