<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>parallel on Joe Buschmann</title>
    <link>/tags/parallel/</link>
    <description>Recent content in parallel on Joe Buschmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Joe Buschmann 2020</copyright>
    <lastBuildDate>Wed, 09 Dec 2015 22:09:29 +0000</lastBuildDate>
    
	<atom:link href="/tags/parallel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Short and Easy Introduction to .NET&#39;s Task Class</title>
      <link>/posts/2015/12/a-short-and-easy-introduction-to-.nets-task-class/</link>
      <pubDate>Wed, 09 Dec 2015 22:09:29 +0000</pubDate>
      
      <guid>/posts/2015/12/a-short-and-easy-introduction-to-.nets-task-class/</guid>
      <description>Task.Run You can use Task.Run to schedule a delegate to run on the thread pool. The method returns a new task, and if the work is complete, the result will be available via Task.Result. If not, Task.Result will block until it is complete.
1 2 3 4 5 6 7 8 9 10 11 12  private void button_Click(object sender, EventArgs e){Task&amp;lt;DateTime&amp;gt; task = Task.Run(() =&amp;gt; GetDateTime());lblDateTime.Text = task.</description>
    </item>
    
  </channel>
</rss>