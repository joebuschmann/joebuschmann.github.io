<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet on Joe Buschmann</title>
    <link>/tags/dotnet/</link>
    <description>Recent content in dotnet on Joe Buschmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Joe Buschmann 2020</copyright>
    <lastBuildDate>Sat, 27 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Does It Mean to Pass a Reference Type Variable by Reference?</title>
      <link>/posts/2020/06/what-does-it-mean-to-pass-a-reference-type-variable-by-reference/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/06/what-does-it-mean-to-pass-a-reference-type-variable-by-reference/</guid>
      <description>Value and Reference Types Before we get to the answer, let&amp;rsquo;s review the two basic types in .NET: value types and reference types. Variables of value types directly contain their data according to the Microsoft docs. If you assign one value type variable to another, the .NET runtime will make a copy of its data. Operations on one variable will not affect another (with one exception as we&amp;rsquo;ll see). Value types are defined as structures or enumerations, and examples include the .</description>
    </item>
    
    <item>
      <title>8 Steps to a Better Console Application</title>
      <link>/posts/2020/02/8-steps-to-a-better-console-application/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/2020/02/8-steps-to-a-better-console-application/</guid>
      <description>Despite its apparent simplicity, writing a good console application is more difficult than you would expect. Many developers get the basics wrong and limit the effectiveness of their software as a result. In the 1970s, Doug McIlroy first expressed the Unix Philosophy for building apps with a good CLI. It was later summarized by Peter H. Salus in A Quarter-Century of Unix (1994).
 The Unix Philosophy
 Write programs that do one thing and do it well.</description>
    </item>
    
    <item>
      <title>Scaling SpecFlow</title>
      <link>/posts/2018/08/scaling-specflow/</link>
      <pubDate>Fri, 31 Aug 2018 01:07:38 +0000</pubDate>
      
      <guid>/posts/2018/08/scaling-specflow/</guid>
      <description>In July of 2018, I gave a talk at KCDC titled SpecFlow: Moving Beyond the Basics. Afterward, I changed the title to Scaling SpecFlow to more accurately reflect the topic. You can find the updated slide deck at https://joebuschmann.github.io/scaling-specflow.
Over the next few weeks, I created a series of posts, one for each section of the talk, for those of you who perfer blog posts to slide decks. This page aggregates these pages in one place and takes you through each one in order.</description>
    </item>
    
    <item>
      <title>SpecFlow Step Definition Report</title>
      <link>/posts/2018/08/specflow-step-definition-report/</link>
      <pubDate>Fri, 31 Aug 2018 00:42:31 +0000</pubDate>
      
      <guid>/posts/2018/08/specflow-step-definition-report/</guid>
      <description>The SpecFlow runtime comes with a little known command line utility aptly named specflow.exe. You can find it in the tools directory in the SpecFlow NuGet package (ex: [project]/packages/SpecFlow.2.3.2/tools). This humble tool can be used to regenerate SpecFlow unit test classes, create test execution reports for NUnit and MSTest, and generate a step definition report. The most useful of these is the step definition report.
As the number of features grows, scenarios and bindings are going to get lost in the day-to-day scrum of software development.</description>
    </item>
    
    <item>
      <title>Running SpecFlow Scenarios in Parallel</title>
      <link>/posts/2018/08/running-specflow-scenarios-in-parallel/</link>
      <pubDate>Fri, 24 Aug 2018 22:48:34 +0000</pubDate>
      
      <guid>/posts/2018/08/running-specflow-scenarios-in-parallel/</guid>
      <description>As of SpecFlow version 2.0, you can run scenarios in parallel. This means faster execution times and faster feedback in your continuous integration process.
Memory Isolation To enable parallel execution, you must use a test runner that supports it. Available runners include NUnit 3.0, xUnit 2.0, and the SpecFlow+ Runner (specrun). Specrun is a commercial product, but it has advanced features like memory isolation via an app domain or process. NUnit and xUnit don&amp;rsquo;t support memory isolation, so they requre your tests to be thread safe.</description>
    </item>
    
    <item>
      <title>Reusable Bindings in SpecFlow</title>
      <link>/posts/2018/08/reusable-bindings-in-specflow/</link>
      <pubDate>Mon, 13 Aug 2018 13:44:33 +0000</pubDate>
      
      <guid>/posts/2018/08/reusable-bindings-in-specflow/</guid>
      <description>As your application grows, your SpecFlow test suite needs to grow with it. Reusable bindings are essentional to prevent your code from becoming a bloated mess. Fortunately, the SpecFlow runtime has reusability in mind with a built-in inversion of control (IoC) framework and step argument transformations. With these features you can create reusable bindings that make test creation more productive.
Problems with Inheritance Before digging into IoC, I&amp;rsquo;ll take a moment to cover why you shouldn&amp;rsquo;t use inheritance in your bindings.</description>
    </item>
    
    <item>
      <title>Working Effectively with SpecFlow Tables</title>
      <link>/posts/2018/08/working-effectively-with-specflow-tables/</link>
      <pubDate>Fri, 10 Aug 2018 21:41:47 +0000</pubDate>
      
      <guid>/posts/2018/08/working-effectively-with-specflow-tables/</guid>
      <description>The Gherkin DSL defines data tables as a way of passing a list of values to a step definition. Gherkin tables use the pipe character | to delimit column names and values. They&amp;rsquo;re easy to read and understand by both business and technical people.
While they work great in Gherkin, tables don&amp;rsquo;t translate well to strongly typed .NET languages. They are converted to an instance of the Table type in SpecFlow bindings.</description>
    </item>
    
    <item>
      <title>SpecFlow Basics</title>
      <link>/posts/2018/08/specflow-basics/</link>
      <pubDate>Wed, 08 Aug 2018 13:41:40 +0000</pubDate>
      
      <guid>/posts/2018/08/specflow-basics/</guid>
      <description>SpecFlow is hands down my favorite testing tool. I&amp;rsquo;ve been blogging about it since 2013 covering mostly advanced topics. In this post, I&amp;rsquo;ll go back to the beginning and briefly cover the basics to give you an idea of what it can do.
What is SpecFlow? SpecFlow is a tool that allows you to:
 Define, manage, and automate human-readable acceptance tests in .NET. Enable BDD with easy to understand tests.</description>
    </item>
    
    <item>
      <title>The C# Language - Overflow Checking for Integral Operations</title>
      <link>/posts/2017/12/the-csharp-language-overflow-checking-for-integral-operations/</link>
      <pubDate>Thu, 14 Dec 2017 23:06:59 +0000</pubDate>
      
      <guid>/posts/2017/12/the-csharp-language-overflow-checking-for-integral-operations/</guid>
      <description>The C# language has been around for over 15 years. It started off as a Java ripoff and evolved into its own language. Some parts of the language I use daily: enumerators, generics, async/await. Other parts lurk in the shadows until the rare moment when I need to put them to use.
One such part is overflow checking for integral operations.
Compiler Option By default, integral operations are not checked for overflows either by the C# compiler or at runtime.</description>
    </item>
    
    <item>
      <title>Getting Started with Selenium, SpecFlow, and .NET</title>
      <link>/posts/2017/05/getting-started-with-selenium-specflow-and-.net/</link>
      <pubDate>Tue, 30 May 2017 19:54:01 +0000</pubDate>
      
      <guid>/posts/2017/05/getting-started-with-selenium-specflow-and-.net/</guid>
      <description>Selenium is a library used to automate web browsers. It uses a common web driver interface, and each web browser, Chrome, Firefox, IE, has a corresponding implementation that takes advantage of the browser&amp;rsquo;s native API.
I don&amp;rsquo;t have much experience with browser automation. In fact, I try to avoid it as much as possible in favor of testing at the unit and service level. Tests running through the browser tend to be brittle due to the non-deterministic nature of web pages.</description>
    </item>
    
    <item>
      <title>TaskCompletionSource - Bridging the Gap Between Old and New</title>
      <link>/posts/2016/08/taskcompletionsource-bridging-the-gap-between-old-and-new/</link>
      <pubDate>Mon, 15 Aug 2016 13:28:32 +0000</pubDate>
      
      <guid>/posts/2016/08/taskcompletionsource-bridging-the-gap-between-old-and-new/</guid>
      <description>In the latest versions of the .NET Framework, asynchronous work is represented by the Task class. A task is similar to a future or promise in other languages. You can create one in many ways the most common being Task.Run(). The result of a task is exposed by the Task.Result property. If the work is complete, then the property immediately returns a value; otherwise, it blocks until the operation is finished.</description>
    </item>
    
    <item>
      <title>Top 6 Industry Shifts During My IT Career</title>
      <link>/posts/2016/07/top-6-industry-shifts-during-my-it-career/</link>
      <pubDate>Fri, 08 Jul 2016 01:04:00 +0000</pubDate>
      
      <guid>/posts/2016/07/top-6-industry-shifts-during-my-it-career/</guid>
      <description>In the fall of 1999, I dropped my plans to attend grad school to embark on a career in IT. The industry has changed considerably since then mostly for the better. In fact I&amp;rsquo;ve never been more excited to be a software developer.
As part of a personal retrospective on my career, below are my thoughts on the top six shifts in IT. By a &amp;ldquo;shift&amp;rdquo; I mean a change that has profoundly affected the way developers go about their daily work.</description>
    </item>
    
    <item>
      <title>A Short and Easy Introduction to .NET&#39;s Task Class</title>
      <link>/posts/2015/12/a-short-and-easy-introduction-to-.nets-task-class/</link>
      <pubDate>Wed, 09 Dec 2015 22:09:29 +0000</pubDate>
      
      <guid>/posts/2015/12/a-short-and-easy-introduction-to-.nets-task-class/</guid>
      <description>Task.Run You can use Task.Run to schedule a delegate to run on the thread pool. The method returns a new task, and if the work is complete, the result will be available via Task.Result. If not, Task.Result will block until it is complete.
1 2 3 4 5 6 7 8 9 10 11 12  private void button_Click(object sender, EventArgs e) { Task&amp;lt;DateTime&amp;gt; task = Task.Run(() =&amp;gt; GetDateTime()); lblDateTime.Text = task.</description>
    </item>
    
    <item>
      <title>SpecFlow Tags Done Right</title>
      <link>/posts/2015/10/specflow-tags-done-right/</link>
      <pubDate>Mon, 26 Oct 2015 13:30:51 +0000</pubDate>
      
      <guid>/posts/2015/10/specflow-tags-done-right/</guid>
      <description>In a previous post, I covered scoped bindings in SpecFlow and ended with an example of how not to use tags. In this post, I&amp;rsquo;ll cover the &amp;ldquo;right way&amp;rdquo; and demonstrate how to avoid coupling features to step definitions. But first, a quick primer on tags.
What Are Tags? Tags are used in Gherkin to mark features or scenarios. They begin with the @ character in Gherkin, but in step definitions the @ is removed.</description>
    </item>
    
    <item>
      <title>An Introduction to Scoped Bindings in SpecFlow</title>
      <link>/posts/2015/10/an-introduction-to-scoped-bindings-in-specflow/</link>
      <pubDate>Thu, 22 Oct 2015 12:28:04 +0000</pubDate>
      
      <guid>/posts/2015/10/an-introduction-to-scoped-bindings-in-specflow/</guid>
      <description>One nice aspect of SpecFlow is the ability to scope bindings by feature title, scenario title, or tag. Normally bindings are global to the project, but a binding&amp;rsquo;s scope can be restricted using the Scope attribute. I like to think of it as similar to the private and public class modifiers in C#.
Consider the Gherkin below.
It is a single feature with one scenario and two tags. One tag is at the feature level and the other at the scenario level.</description>
    </item>
    
    <item>
      <title>Refactoring to Composable SpecFlow Steps</title>
      <link>/posts/2015/09/refactoring-to-composable-specflow-steps/</link>
      <pubDate>Tue, 22 Sep 2015 12:15:32 +0000</pubDate>
      
      <guid>/posts/2015/09/refactoring-to-composable-specflow-steps/</guid>
      <description>I&amp;rsquo;ve seen some pretty bad SpecFlow code. Code that seems to violate every good practice out there. Poor reuse. Copy and paste everywhere. Test code is the hotel room of the software world. People are sloppier and more careless than they otherwise would be. I&amp;rsquo;m not sure why that is. Perhaps because tests are not seen as &amp;ldquo;real code&amp;rdquo;. But as a testing code base grows from dozens to hundreds to even a thousand or more test cases, having well-factored composable SpecFlow steps becomes critical.</description>
    </item>
    
    <item>
      <title>Tidying Up Code with C#&#39;s Using Alias Directives</title>
      <link>/posts/2015/08/tidying-up-code-with-c#s-using-alias-directives/</link>
      <pubDate>Tue, 18 Aug 2015 21:52:34 +0000</pubDate>
      
      <guid>/posts/2015/08/tidying-up-code-with-c#s-using-alias-directives/</guid>
      <description>The C# language&amp;rsquo;s using alias directives or namespace and type aliases provide a way to disambiguate between namespaces or types with the same name. For example, both the System.Net and Nancy libraries have a type named HttpStatusCode. If you happen to import both namespaces in a file, then the types need to be fully qualified or else the compiler will fail with the error:
 &amp;lsquo;HttpStatusCode&amp;rsquo; is an ambiguous reference between &amp;lsquo;Nancy.</description>
    </item>
    
    <item>
      <title>This Week in Programming Gotchas</title>
      <link>/posts/2015/08/this-week-in-programming-gotchas/</link>
      <pubDate>Fri, 14 Aug 2015 12:08:00 +0000</pubDate>
      
      <guid>/posts/2015/08/this-week-in-programming-gotchas/</guid>
      <description>We all have those days where we spend hours trying to solve a seemingly simple problem only to smack ourselves in the head when we finally figure it out. Missing quotes, forgetting to flush a StreamWriter, etc. If only we could get back all the wasted time.
Well, this week I wrestled with more gotchas than usual. Below are the ones that burned most of my time.
Streams Don&amp;rsquo;t forget to flush a StreamWriter when you&amp;rsquo;re done.</description>
    </item>
    
    <item>
      <title>String.Empty Versus &#34;&#34;</title>
      <link>/posts/2015/08/string.empty-versus/</link>
      <pubDate>Thu, 06 Aug 2015 15:22:10 +0000</pubDate>
      
      <guid>/posts/2015/08/string.empty-versus/</guid>
      <description>If you&amp;rsquo;ve been in the .NET world for any length of time, you&amp;rsquo;ll eventually come across someone who claims String.Empty performs better than &amp;quot;&amp;quot;. I was always skeptical of this claim because this scenario seemed like something the compiler could optimize. And because the .NET runtime manages string literals in an intern pool, my guess was they would both point to the same value. That&amp;rsquo;s what I suspected anyway but didn&amp;rsquo;t have any proof.</description>
    </item>
    
    <item>
      <title>The Best Design Patterns</title>
      <link>/posts/2012/01/the-best-design-patterns/</link>
      <pubDate>Mon, 30 Jan 2012 20:38:44 +0000</pubDate>
      
      <guid>/posts/2012/01/the-best-design-patterns/</guid>
      <description>The first time I read the Gang of Four Design Patterns book, I was impressed, no blown away, by the brilliance of what I was reading. The Visitor pattern utilizing double-dispatch. Brilliant. Chain of Responsibility. Why didn&amp;rsquo;t I think of that? Adapter. Simple and powerful.
Of course I was itching to start implementing these patterns. In practice though they seemed to be applicable only in rare situations. Adapter, Builder, Factory, Strategy, were the most useful.</description>
    </item>
    
    <item>
      <title>Text Parsing with F#</title>
      <link>/posts/2012/01/text-parsing-with-f-sharp/</link>
      <pubDate>Sun, 15 Jan 2012 21:02:30 +0000</pubDate>
      
      <guid>/posts/2012/01/text-parsing-with-f-sharp/</guid>
      <description>I&#39;ve always had a fear of parsing text.&amp;nbsp; Strange since it&#39;s a basic programmer&#39;s task.&amp;nbsp; I&#39;ve always found it to be tedious and boring, and the resulting code is a jumbled mess of indexes and string parsing methods.&amp;nbsp; I avoid it every chance I get.
And there&#39;s regex.&amp;nbsp; The syntax is cryptic and difficult to remember.&amp;nbsp; It&#39;s another thing I should know well, but, again, I avoid it.
Recently I decided to come to grips with this weakness and parse a text file containing information about TCP sockets in a TIME_WAIT status.</description>
    </item>
    
    <item>
      <title>The Dangers of Mutable Data</title>
      <link>/posts/2011/08/the-dangers-of-mutable-data/</link>
      <pubDate>Mon, 15 Aug 2011 20:06:17 +0000</pubDate>
      
      <guid>/posts/2011/08/the-dangers-of-mutable-data/</guid>
      <description>I recently came across a bug in some C# code that would never have been a problem if the data structures being used were immutable. The data consisted of a .NET dictionary with an integer key and a list as a value. The details below have been changed to protect the guilty.
The offending method takes customer and product objects as parameters and retrieves a list of available pricing for the customer from a dictionary using the product ID as the key.</description>
    </item>
    
    <item>
      <title>Best Practices for Creating and Consuming Modal Dialogs in WinForms</title>
      <link>/posts/2011/07/best-practices-for-creating-and-consuming-modal-dialogs-in-winforms/</link>
      <pubDate>Thu, 28 Jul 2011 19:37:55 +0000</pubDate>
      
      <guid>/posts/2011/07/best-practices-for-creating-and-consuming-modal-dialogs-in-winforms/</guid>
      <description>This is an article I wrote a few years ago after seeing some bad coding practices around modal dialogs in WinForms. Bad habits like explicitly closing the dialog form and using custom OK/Cancel flags irked me, so I came up with some best practices. I hope you find them useful.
Tip 1: Set the AcceptButton and CancelButton properties
Windows Forms have two properties, AcceptButton and CancelButton, for determining what should be done when the user presses the Enter or Escape keys.</description>
    </item>
    
    <item>
      <title>F# Functions: Tuple Syntax</title>
      <link>/posts/2011/07/f-sharp-functions-tuple-syntax/</link>
      <pubDate>Mon, 18 Jul 2011 19:35:42 +0000</pubDate>
      
      <guid>/posts/2011/07/f-sharp-functions-tuple-syntax/</guid>
      <description>I&amp;rsquo;m relatively new to F# and functional programming and recently worked through an issue that had me perplexed. The issue was with creating functions with the &amp;ldquo;tuple syntax&amp;rdquo; versus the normal syntax of separating arguments by spaces.
Consider the simple functions below that adds numeric arguments together. They are constructed in two ways. The first is by using a tuple to group the two arguments together. It looks very similar to the syntax from other languages such as C#.</description>
    </item>
    
  </channel>
</rss>