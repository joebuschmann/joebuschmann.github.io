<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>specflow on Joe Buschmann</title>
    <link>/tags/specflow/</link>
    <description>Recent content in specflow on Joe Buschmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Joe Buschmann 2020</copyright>
    <lastBuildDate>Fri, 31 Aug 2018 01:07:38 +0000</lastBuildDate>
    
	<atom:link href="/tags/specflow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scaling SpecFlow With Proper Architecture</title>
      <link>/posts/2018/08/scaling-specflow-with-proper-architecture/</link>
      <pubDate>Fri, 31 Aug 2018 01:07:38 +0000</pubDate>
      
      <guid>/posts/2018/08/scaling-specflow-with-proper-architecture/</guid>
      <description>In July of 2018, I gave a talk at KCDC titled SpecFlow: Moving Beyond the Basics. Afterward, I changed the title to Scaling SpecFlow to more accurately reflect the topic. You can find the updated slide deck at https://joebuschmann.github.io/scaling-specflow/.
Over the next few weeks, I created a series of posts, one for each section of the talk, for those of you who perfer blog posts to slide decks. This page aggregates these pages in one place and takes you through each one in order.</description>
    </item>
    
    <item>
      <title>SpecFlow Step Definition Report</title>
      <link>/posts/2018/08/specflow-step-definition-report/</link>
      <pubDate>Fri, 31 Aug 2018 00:42:31 +0000</pubDate>
      
      <guid>/posts/2018/08/specflow-step-definition-report/</guid>
      <description>The SpecFlow runtime comes with a little known command line utility aptly named specflow.exe. You can find it in the tools directory in the SpecFlow NuGet package (ex: [project]\packages\SpecFlow.2.3.2\tools). This humble tool can be used to regenerate SpecFlow unit test classes, create test execution reports for NUnit and MSTest, and generate a step definition report. The most useful of these is the step definition report.
As the number of features grows, scenarios and bindings are going to get lost in the day-to-day scrum of software development.</description>
    </item>
    
    <item>
      <title>Running SpecFlow Scenarios in Parallel</title>
      <link>/posts/2018/08/running-specflow-scenarios-in-parallel/</link>
      <pubDate>Fri, 24 Aug 2018 22:48:34 +0000</pubDate>
      
      <guid>/posts/2018/08/running-specflow-scenarios-in-parallel/</guid>
      <description>As of SpecFlow version 2.0, you can run scenarios in parallel. This means faster execution times and faster feedback in your continuous integration process.
Memory Isolation To enable parallel execution, you must use a test runner that supports it. Available runners include NUnit 3.0, xUnit 2.0, and the SpecFlow+ Runner (specrun). Specrun is a commercial product, but it has advanced features like memory isolation via an app domain or process. NUnit and xUnit don&#39;t support memory isolation, so they requre your tests to be thread safe.</description>
    </item>
    
    <item>
      <title>Reusable Bindings in SpecFlow</title>
      <link>/posts/2018/08/reusable-bindings-in-specflow/</link>
      <pubDate>Mon, 13 Aug 2018 13:44:33 +0000</pubDate>
      
      <guid>/posts/2018/08/reusable-bindings-in-specflow/</guid>
      <description>As your application grows, your SpecFlow test suite needs to grow with it. Reusable bindings are essentional to prevent your code from becoming a bloated mess. Fortunately, the SpecFlow runtime has reusability in mind with a built-in inversion of control (IoC) framework and step argument transformations. With these features you can create reusable bindings that make test creation more productive.
Problems with Inheritance Before digging into IoC, I&#39;ll take a moment to cover why you shouldn&#39;t use inheritance in your bindings.</description>
    </item>
    
    <item>
      <title>Working Effectively with SpecFlow Tables</title>
      <link>/posts/2018/08/working-effectively-with-specflow-tables/</link>
      <pubDate>Fri, 10 Aug 2018 21:41:47 +0000</pubDate>
      
      <guid>/posts/2018/08/working-effectively-with-specflow-tables/</guid>
      <description>The Gherkin DSL defines data tables as a way of passing a list of values to a step definition. Gherkin tables use the pipe character | to delimit column names and values. They&#39;re easy to read and understand by both business and technical people.
While they work great in Gherkin, tables don&#39;t translate well to strongly typed .NET languages. They are converted to an instance of the Table type in SpecFlow bindings.</description>
    </item>
    
    <item>
      <title>Gherkin Tips</title>
      <link>/posts/2018/08/gherkin-tips/</link>
      <pubDate>Fri, 10 Aug 2018 13:22:54 +0000</pubDate>
      
      <guid>/posts/2018/08/gherkin-tips/</guid>
      <description>[Gherkin] is a Business Readable, Domain Specific Language that lets you describe software&#39;s behaviour without detailing how that behaviour is implemented. - Gherkin Wiki
 These Gherkin best practices were originally included in an early draft of a talk I gave on SpecFlow. Ultimately, I took them out because they didn&#39;t fit well with the topic, so I put them into a blog post.
Table values should be atomic Bindings that take a table argument will almost always convert the table to a C# object for easy manipulation.</description>
    </item>
    
    <item>
      <title>SpecFlow Basics</title>
      <link>/posts/2018/08/specflow-basics/</link>
      <pubDate>Wed, 08 Aug 2018 13:41:40 +0000</pubDate>
      
      <guid>/posts/2018/08/specflow-basics/</guid>
      <description>SpecFlow is hands down my favorite testing tool. I&#39;ve been blogging about it since 2013 covering mostly advanced topics. In this post, I&#39;ll go back to the beginning and briefly cover the basics to give you an idea of what it can do.
What is SpecFlow? SpecFlow is a tool that allows you to:
 Define, manage, and automate human-readable acceptance tests in .NET. Enable BDD with easy to understand tests.</description>
    </item>
    
    <item>
      <title>SpecFlow NUnit3 Generator Plugin</title>
      <link>/posts/2017/10/specflow-nunit3-generator-plugin/</link>
      <pubDate>Sun, 22 Oct 2017 02:44:18 +0000</pubDate>
      
      <guid>/posts/2017/10/specflow-nunit3-generator-plugin/</guid>
      <description>I recently created a SpecFlow plugin to solve a peculiar problem with NUnit test code generation. The issue is SpecFlow will generate test code that doesn&#39;t compile when the .NET project containing the SpecFlow scenarios has a default namespace with the word NUnit. For example, if your project has the namespace IntegrationTests.NUnit, then you&#39;ll receive the following error when trying to build.
 The type or namespace name &amp;lsquo;Framework&amp;rsquo; does not exist in the namespace &amp;lsquo;IntegrationTests.</description>
    </item>
    
    <item>
      <title>Getting Started with Selenium, SpecFlow, and .NET</title>
      <link>/posts/2017/05/getting-started-with-selenium-specflow-and-.net/</link>
      <pubDate>Tue, 30 May 2017 19:54:01 +0000</pubDate>
      
      <guid>/posts/2017/05/getting-started-with-selenium-specflow-and-.net/</guid>
      <description>Selenium is a library used to automate web browsers. It uses a common web driver interface, and each web browser, Chrome, Firefox, IE, has a corresponding implementation that takes advantage of the browser&#39;s native API.
I don&#39;t have much experience with browser automation. In fact, I try to avoid it as much as possible in favor of testing at the unit and service level. Tests running through the browser tend to be brittle due to the non-deterministic nature of web pages.</description>
    </item>
    
    <item>
      <title>SpecFlow Tags Done Right</title>
      <link>/posts/2015/10/specflow-tags-done-right/</link>
      <pubDate>Mon, 26 Oct 2015 13:30:51 +0000</pubDate>
      
      <guid>/posts/2015/10/specflow-tags-done-right/</guid>
      <description>In a previous post, I covered scoped bindings in SpecFlow and ended with an example of how not to use tags. In this post, I&#39;ll cover the &amp;ldquo;right way&amp;rdquo; and demonstrate how to avoid coupling features to step definitions. But first, a quick primer on tags.
What Are Tags? Tags are used in Gherkin to mark features or scenarios. They begin with the @ character in Gherkin, but in step definitions the @ is removed.</description>
    </item>
    
    <item>
      <title>An Introduction to Scoped Bindings in SpecFlow</title>
      <link>/posts/2015/10/an-introduction-to-scoped-bindings-in-specflow/</link>
      <pubDate>Thu, 22 Oct 2015 12:28:04 +0000</pubDate>
      
      <guid>/posts/2015/10/an-introduction-to-scoped-bindings-in-specflow/</guid>
      <description>One nice aspect of SpecFlow is the ability to scope bindings by feature title, scenario title, or tag. Normally bindings are global to the project, but a binding&#39;s scope can be restricted using the Scope attribute. I like to think of it as similar to the private and public class modifiers in C#.
Consider the Gherkin below.
It is a single feature with one scenario and two tags. One tag is at the feature level and the other at the scenario level.</description>
    </item>
    
    <item>
      <title>Refactoring to Composable SpecFlow Steps</title>
      <link>/posts/2015/09/refactoring-to-composable-specflow-steps/</link>
      <pubDate>Tue, 22 Sep 2015 12:15:32 +0000</pubDate>
      
      <guid>/posts/2015/09/refactoring-to-composable-specflow-steps/</guid>
      <description>I&#39;ve seen some pretty bad SpecFlow code. Code that seems to violate every good practice out there. Poor reuse. Copy and paste everywhere. Test code is the hotel room of the software world. People are sloppier and more careless than they otherwise would be. I&#39;m not sure why that is. Perhaps because tests are not seen as &amp;ldquo;real code&amp;rdquo;. But as a testing code base grows from dozens to hundreds to even a thousand or more test cases, having well-factored composable SpecFlow steps becomes critical.</description>
    </item>
    
    <item>
      <title>Code This, Not That - SpecFlow Edition</title>
      <link>/posts/2014/12/code-this-not-that-specflow-edition/</link>
      <pubDate>Mon, 29 Dec 2014 20:06:20 +0000</pubDate>
      
      <guid>/posts/2014/12/code-this-not-that-specflow-edition/</guid>
      <description>In 2007 a different kind of diet book was published that took a concise approach to making the right food choices. Readers of the book were presented with good and bad selections at popular restaurants and told why the good options were better than the others. Eat This, Not That! made changing your diet simple and realistic. No gimmicks like the Atkins diet or the current trend of cleansing. Just real options available in many restaurants.</description>
    </item>
    
    <item>
      <title>Useful Regex for SpecFlow Bindings</title>
      <link>/posts/2014/10/useful-regex-for-specflow-bindings/</link>
      <pubDate>Sat, 18 Oct 2014 10:20:35 +0000</pubDate>
      
      <guid>/posts/2014/10/useful-regex-for-specflow-bindings/</guid>
      <description>Below is a list of useful regular expressions (regex) for annotating SpecFlow bindings. I&#39;m treating this post as a reference and will be updating it with new items from time to time.
Singular or Plural Support singular or plural wording.
Filter for Enum Values If your binding takes an enumeration for an argument, you can limit the inputs from the Gherkin to just the valid values. In the snippets below, the possible values for the SortOrder argument are limited by the regex (ascending|descending) thus avoiding any runtime exeptions due to a bad value.</description>
    </item>
    
    <item>
      <title>Strategies for Managing State in SpecFlow</title>
      <link>/posts/2014/09/strategies-for-managing-state-in-specflow/</link>
      <pubDate>Tue, 30 Sep 2014 18:40:52 +0000</pubDate>
      
      <guid>/posts/2014/09/strategies-for-managing-state-in-specflow/</guid>
      <description>SpecFlow is an extension for Visual Studio that binds software specifications written in the Gherkin language to executable code written in C#, VB, or some other .NET language. One of the challenges of implementing a SpecFlow scenario is how to manage test state in between steps. At first glance, state management seems like an easy problem to solve, but as your test suite grows, maintaining the implementation is as difficult as any large software project.</description>
    </item>
    
    <item>
      <title>SpecFlow Nested Tables: A Bad Idea</title>
      <link>/posts/2013/10/specflow-nested-tables-a-bad-idea/</link>
      <pubDate>Tue, 22 Oct 2013 07:45:06 +0000</pubDate>
      
      <guid>/posts/2013/10/specflow-nested-tables-a-bad-idea/</guid>
      <description>I&#39;ve been using SpecFlow to write behavior specifications for just under a year, and one question that comes up is whether or not nested tables are supported for creating complex or hierarchal types. Other folks have discussed this at Stack Overflow and Google Groups. Nested tables aren&#39;t currently supported, and that&#39;s probably a good thing.
The intent of the Cucumber syntax is to express business requirements in the language of the business.</description>
    </item>
    
    <item>
      <title>More SpecFlow Tips</title>
      <link>/posts/2013/07/more-specflow-tips/</link>
      <pubDate>Sat, 20 Jul 2013 11:21:08 +0000</pubDate>
      
      <guid>/posts/2013/07/more-specflow-tips/</guid>
      <description>UPDATE (11/18/2016):
 I&#39;ve written a number of posts since this one was published that cover advanced SpecFlow topics like composable steps, tags done right, managing state, useful regex, etc. For a list of all my SpecFlow writing, you can click on the SpecFlow tag. SpecFlow is a fantastic tool that&#39;s changed the way I develop software, and I hope it does the same for you. Happy testing!
 My last post covered three tips or best practices for SpecFlow that covered manipulating the current ScenarioContext with extension methods, binding multiple Given/When/Then attributes, and using hooks.</description>
    </item>
    
    <item>
      <title>Some SpecFlow Tips</title>
      <link>/posts/2013/02/some-specflow-tips/</link>
      <pubDate>Sun, 17 Feb 2013 11:49:51 +0000</pubDate>
      
      <guid>/posts/2013/02/some-specflow-tips/</guid>
      <description>UPDATE (11/18/2016):
 I&#39;ve written a number of posts since this one was published that cover advanced SpecFlow topics like composable steps, tags done right, managing state, useful regex, etc. For a list of all my SpecFlow writing, you can click on the SpecFlow tag. SpecFlow is a fantastic tool that&#39;s changed the way I develop software, and I hope it does the same for you. Happy testing!
 Late last year a co-worker Jay Brummels introduced our development group to SpecFlow a .</description>
    </item>
    
  </channel>
</rss>